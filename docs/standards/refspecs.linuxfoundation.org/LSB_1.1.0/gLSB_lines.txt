     1	Linux Standard Base Specification 1.1.0
     2	
     3	Copyright © 2000, 2001 by Free Standards Group
     4	
     5	This material may be distributed only subject to the terms and conditions set
     6	forth in the Open Publication License, v1.0 or later (the latest version is
     7	presently available at http://www.opencontent.org/openpub/) and provided that
     8	neither the name of the Free Standards Group, the name of the Linux Standard
     9	Base, nor the names of its contributors may be used to endorse or promote
    10	derived works without specific prior written permission.
    11	
    12	Portions of the text were taken from other copyrighted documents in accordance
    13	with the respective license of those documents.
    14	
    15	-------------------------------------------------------------------------------
    16	
    17	Table of Contents
    18	I. Introduction
    19	   
    20	    1. Introduction
    21	       
    22	        Introduction
    23	        Purpose
    24	        Related Standards
    25	        Related Implementations
    26	        Relevant Libraries
    27	        How to Use this Standard
    28	        Definitions
    29	        Terminology
    30	       
    31	II. Object Format
    32	   
    33	    2. Object Files
    34	    3. Sections
    35	       
    36	        ELF Section Types
    37	        Linux Section Types
    38	       
    39	    4. Special Sections
    40	       
    41	        ELF Special Sections
    42	        Linux Special Sections
    43	       
    44	    5. Symbol Mapping
    45	       
    46	        C Language
    47	        C++ Language
    48	       
    49	    6. Symbol Versioning
    50	       
    51	        Symbol Version Table
    52	        Version Definitions
    53	        Version Requirements
    54	        Startup Sequence
    55	        Symbol Resolution
    56	       
    57	III. Dynamic Linking
    58	   
    59	    7. Program Loading and Dynamic Linking
    60	    8. Dynamic Entries
    61	       
    62	        ELF Dynamic Entries
    63	        Linux Dynamic Entries
    64	       
    65	    9. Program Interpreter
    66	       
    67	         
    68	       
    69	IV. Base Libraries
    70	   
    71	    10. Libraries
    72	       
    73	        Interfaces for libc
    74	        Data Definitions for libc
    75	        Interfaces Definitions for libc
    76	        Interfaces for libm
    77	        Data Definitions for libm
    78	        Interfaces for libpthread
    79	        Data Definitions for libpthread
    80	        Interfaces Definitions for libpthread
    81	        Interfaces for libdl
    82	        Data Definitions for libdl
    83	        Interfaces Definitions for libdl
    84	        Interfaces for libcrypt
    85	        Data Definitions for libcrypt
    86	        Interfaces for librt
    87	        Data Definitions for librt
    88	       
    89	V. Utility Libraries
    90	   
    91	    11. Libraries
    92	       
    93	        Interfaces for libz
    94	        Data Definitions for libz
    95	        Interfaces for libncurses
    96	        Data Definitions for libncurses
    97	        Interfaces for libutil
    98	        Interfaces Definitions for libutil
    99	       
   100	VI. Graphic Libraries
   101	   
   102	    12. Libraries
   103	       
   104	        Interfaces for libX11
   105	        Data Definitions for libX11
   106	        Interfaces for libXext
   107	        Data Definitions for libXext
   108	        Interfaces for libSM
   109	        Data Definitions for libSM
   110	        Interfaces for libICE
   111	        Data Definitions for libICE
   112	        Interfaces for libXt
   113	        Data Definitions for libXt
   114	        Interfaces Definitions for libXt
   115	        Interfaces for libGL
   116	        Data Definitions for libGL
   117	       
   118	VII. Package Format and Installation
   119	   
   120	    13. Software Installation
   121	       
   122	        Package Format
   123	        Package Tools
   124	        Package Naming
   125	        Package Dependencies
   126	       
   127	VIII. Commands and Utilities
   128	   
   129	    14. Command and Utilities
   130	       
   131	        Command and Utilities
   132	        Command Behavior
   133	       
   134	IX. Standard Shell
   135	   
   136	    15. Standard Shell
   137	       
   138	        Introduction
   139	        Standard Shell Exceptions
   140	        Standard Shell Rationale
   141	       
   142	X. Users & Groups
   143	   
   144	    16. Users & Groups
   145	       
   146	        User and Group Database
   147	        User & Group Names
   148	        UID Ranges
   149	       
   150	XI. Execution Environment
   151	   
   152	    17. File System Hierarchy
   153	       
   154	        /dev
   155	       
   156	    18. Additional Recommendations
   157	       
   158	        Minimal granted Directory and File permissions
   159	        Recommendations for applications on ownership and permissions
   160	       
   161	XII. System Initialization
   162	   
   163	    19. System Initialization
   164	       
   165	        Cron Jobs
   166	        Run Levels
   167	        Init Script Actions
   168	        Comment conventions for init scripts
   169	        Installation and removal of init.d files
   170	        Facility names
   171	        Script names
   172	        Init script Functions
   173	       
   174	A. Alphabetical Listing of Interfaces
   175	   
   176	    libX11
   177	    libXt
   178	    libm
   179	    libGL
   180	    libXext
   181	    libICE
   182	    libSM
   183	    libdl
   184	    libcrypt
   185	    libz
   186	    libncurses
   187	    libutil
   188	    libc
   189	    libpthread
   190	    librt
   191	   
   192	List of Tables
   193	1-1. Related Standards
   194	1-2. Related Implementations
   195	1-3. Relevant Libraries
   196	3-1.  
   197	3-2.  
   198	4-1.  
   199	4-2.  
   200	10-1. libc - RPC Interfaces Function Interfaces
   201	10-2. libc - System Calls Function Interfaces
   202	10-3. libc - Standard I/O Function Interfaces
   203	10-4. libc - Standard I/O Data Interfaces
   204	10-5. libc - Signal Handling Function Interfaces
   205	10-6. libc - Signal Handling Data Interfaces
   206	10-7. libc - Standard Library Function Interfaces
   207	10-8. libc - Standard Library Data Interfaces
   208	10-9. libc - Localization Functions Function Interfaces
   209	10-10. libc - Localization Functions Data Interfaces
   210	10-11. libc - Socket Interface Function Interfaces
   211	10-12. libc - Socket Interface Data Interfaces
   212	10-13. libc - Wide Characters Function Interfaces
   213	10-14. libc - String Functions Function Interfaces
   214	10-15. libc - IPC Functions Function Interfaces
   215	10-16. libc - Regular Expressions Function Interfaces
   216	10-17. libc - Regular Expressions Data Interfaces
   217	10-18. libc - Character Type Functions Function Interfaces
   218	10-19. libc - Character Type Functions Data Interfaces
   219	10-20. libc - Time Manipulation Function Interfaces
   220	10-21. libc - Time Manipulation Data Interfaces
   221	10-22. libc - Terminal Interface Functions Function Interfaces
   222	10-23. libc - System Database Interface Function Interfaces
   223	10-24. libc - Language Support Function Interfaces
   224	10-25. libc - Large File Support Function Interfaces
   225	10-26. libc - libc - deprecated Function Interfaces
   226	10-27. libc - libc - deprecated Data Interfaces
   227	10-28. libm - Math Function Interfaces
   228	10-29. libm - Math Data Interfaces
   229	10-30. libpthread - Posix Threads Function Interfaces
   230	10-31. libdl Definition
   231	10-32. libdl - Dynamic Loader Function Interfaces
   232	10-33. libcrypt Definition
   233	10-34. libcrypt - Encryption Function Interfaces
   234	10-35. librt - Asynchronous I/O Function Interfaces
   235	11-1. libz Definition
   236	11-2. libz - Compression Library Function Interfaces
   237	11-3. libncurses Definition
   238	11-4. libncurses - Curses Function Interfaces
   239	11-5. libncurses - Curses Data Interfaces
   240	11-6. libutil - Utility Functions Function Interfaces
   241	12-1. libX11 Definition
   242	12-2. libX11 - X Windows System Interface Function Interfaces
   243	12-3. libXext Definition
   244	12-4. libXext - X Shape Extension Function Interfaces
   245	12-5. libXext - X Display Power Management Signaling Extension Function
   246	    Interfaces
   247	12-6. libXext - X Shared Memory Extensions Function Interfaces
   248	12-7. libXext - X Synchronization Extension Function Interfaces
   249	12-8. libXext - X Security Extension Function Interfaces
   250	12-9. libXext - X Double Buffer Extension Function Interfaces
   251	12-10. libSM Definition
   252	12-11. libSM - Session Management Functions Function Interfaces
   253	12-12. libICE Definition
   254	12-13. libICE - ICE Functions Function Interfaces
   255	12-14. libXt Definition
   256	12-15. libXt - X Toolkit Function Interfaces
   257	12-16. libXt - X Toolkit Data Interfaces
   258	12-17. libGL Definition
   259	12-18. libGL - GL X interface Function Interfaces
   260	12-19. libGL - OpenGL Function Interfaces
   261	14-1. Commands and Utilities
   262	16-1. Required User & Group Names
   263	16-2. Optional User & Group Names
   264	A-1. libX11 Function Interfaces
   265	A-2. libXt Function Interfaces
   266	A-3. libXt Data Interfaces
   267	A-4. libm Function Interfaces
   268	A-5. libm Data Interfaces
   269	A-6. libGL Function Interfaces
   270	A-7. libXext Function Interfaces
   271	A-8. libICE Function Interfaces
   272	A-9. libSM Function Interfaces
   273	A-10. libdl Function Interfaces
   274	A-11. libcrypt Function Interfaces
   275	A-12. libz Function Interfaces
   276	A-13. libncurses Function Interfaces
   277	A-14. libncurses Data Interfaces
   278	A-15. libutil Function Interfaces
   279	A-16. libc Function Interfaces
   280	A-17. libc Data Interfaces
   281	A-18. libpthread Function Interfaces
   282	A-19. librt Function Interfaces
   283	
   284	List of Figures
   285	6-1. Version Definition Entries
   286	6-2. Version Definition Auxiliary Entries
   287	6-3. Version Needed Entries
   288	6-4. Version Needed Auxiliary Entries
   289	
   290	I. Introduction
   291	
   292	Table of Contents
   293	1. Introduction
   294	
   295	-------------------------------------------------------------------------------
   296	
   297	Chapter 1. Introduction
   298	
   299	Introduction
   300	
   301	This is version 1.1.0 of the Linux Standard Base Specification. An
   302	implementation of this version of the specification may not claim to be an
   303	implementation of the Linux Standard Base unless it has successfully completed
   304	the compliance process as defined by the Free Standards Group.
   305	
   306	-------------------------------------------------------------------------------
   307	
   308	Purpose
   309	
   310	The Linux Standard Base (LSB) defines a system interface for compiled
   311	applications and a minimal environment for support of installation scripts. Its
   312	purpose is to enable a uniform industry standard environment for high-volume
   313	applications conforming to the LSB.
   314	
   315	The LSB defines a binary interface for application programs that are compiled
   316	and packaged for LSB-conforming implementations on many different hardware
   317	architectures. Since a binary specification must include information specific
   318	to the computer processor architecture for which it is intended, it is not
   319	possible for a single document to specify the interface for all possible
   320	LSB-conforming implementations. Therefore, the LSB is a family of
   321	specifications, rather than a single one.
   322	
   323	The LSB is composed of two basic parts: A common part of the specification
   324	describes those parts of the interface that remain constant across all hardware
   325	implementations of the LSB, and an architecture-specific part of the
   326	specification describes the parts of the specification that are specific to a
   327	particular processor architecture. Together, the generic LSB and the
   328	architecture-specific supplement for a single hardware architecture provide a
   329	complete interface specification for compiled application programs on systems
   330	that share a common hardware architecture.
   331	
   332	This document is the generic LSB. It must be used in conjunction with an
   333	architecture-specific supplement. Whenever a section of this specification must
   334	be supplemented by architecture-specific information, this document includes a
   335	reference to the architecture supplement. Architecture supplements may also
   336	contain additional information that is not referenced here.
   337	
   338	This document should be used in conjunction with the documents it references.
   339	This document enumerates the system components it includes, but descriptions of
   340	those components may be included entirely or partly in this document, partly in
   341	other documents, or entirely in other reference documents. For example, the
   342	section that describes system service routines includes a list of the system
   343	routines supported in this interface, formal declarations of the data
   344	structures they use that are visible to applications, and a pointer to the
   345	underlying referenced specification for information about the syntax and
   346	semantics of each call. Only those routines not described in standards
   347	referenced by this document, or extensions to those standards, are described in
   348	the detail. Information referenced in this way is as much a part of this
   349	document as is the information explicitly included here.
   350	
   351	-------------------------------------------------------------------------------
   352	
   353	Related Standards
   354	
   355	The specifications listed below are referenced in whole or in part by the Linux
   356	Standard Base. Such references may be normative or non-normative; a reference
   357	to specification shall only be considered normative if it is explicitly cited
   358	as such. The LSB may make normative references to a portion of these
   359	specifications (that is, to define a specific function or group of functions);
   360	in such cases, only the explicitly referenced portion of the specification is
   361	to be considered normative.
   362	
   363	Table 1-1. Related Standards
   364	
   365	+-----------------------------------------------------------------------------+
   366	|System V Application Binary Interface |http://www.caldera.com|               |
   367	|- DRAFT - 22 June 2000                |/developers/gabi/     |               |
   368	|                                      |2000-07-17/           |               |
   369	|                                      |contents.html         |               |
   370	|--------------------------------------+----------------------+---------------|
   371	|Filesystem Hierarchy Standard 2.2     |http://               |               |
   372	|                                      |www.pathname.com/fhs/ |               |
   373	|--------------------------------------+----------------------+---------------|
   374	|IEEE Standard for Binary              |http://www.ieee.org/  |ANSI/IEEE      |
   375	|Floating-Point Arithmetic             |                      |Standards      |
   376	|                                      |                      |745-1985 and   |
   377	|                                      |                      |854-1987       |
   378	|--------------------------------------+----------------------+---------------|
   379	|System V Application Binary Interface,|http://www.caldera.com|               |
   380	|Edition 4.1                           |/developers/devspecs/ |               |
   381	|                                      |gabi41.pdf            |               |
   382	|--------------------------------------+----------------------+---------------|
   383	|IA32 Architecture Software Developer's|http://               |               |
   384	|Manual Volume 1: Basic Architecture   |developer.intel.com/  |               |
   385	|                                      |design/pentiium4/     |               |
   386	|                                      |manuals/24570.ht      |               |
   387	|--------------------------------------+----------------------+---------------|
   388	|IA32 Architecture Software Developer's|http://               |               |
   389	|Manual Volume 2: Instruction Set      |developer.intel.com/  |               |
   390	|Reference                             |design/pentiium4/     |               |
   391	|                                      |manuals/24571.ht      |               |
   392	|--------------------------------------+----------------------+---------------|
   393	|IA32 Architecture Software Developer's|http://               |               |
   394	|Manual Volume 3: System Programming   |developer.intel.com/  |               |
   395	|Guide                                 |design/pentiium4/     |               |
   396	|                                      |manuals/24572.ht      |               |
   397	|--------------------------------------+----------------------+---------------|
   398	|System V Application Binary Interface |http://www.caldera.com|               |
   399	|- Intel386 Architecture Processor     |/developers/devspecs/ |               |
   400	|Supplement                            |abi386-4.pdf          |               |
   401	|--------------------------------------+----------------------+---------------|
   402	|Itanium Architecture Software         |http://               |               |
   403	|Developer's Manual Volume 1:          |developer.intel.com/  |               |
   404	|Application Architecture              |design/itanium/       |               |
   405	|                                      |downloads/24531702    |               |
   406	|--------------------------------------+----------------------+---------------|
   407	|Itanium Architecture Software         |http://               |               |
   408	|Developer's Manual Volume 2: System   |developer.intel.com/  |               |
   409	|Architecture                          |design/itanium/       |               |
   410	|                                      |downloads/24531802    |               |
   411	|--------------------------------------+----------------------+---------------|
   412	|Itanium Architecture Software         |http://               |               |
   413	|Developer's Manual Volume 3:          |developer.intel.com/  |               |
   414	|Instruction Set Reference             |design/itanium/       |               |
   415	|                                      |downloads/24531902    |               |
   416	|--------------------------------------+----------------------+---------------|
   417	|Itanium Architecture Software         |http://               |               |
   418	|Developer's Manual Volume 4: Itanium  |developer.intel.com/  |               |
   419	|Processor Programmer's Guide          |design/itanium/       |               |
   420	|                                      |downloads/24532002    |               |
   421	|--------------------------------------+----------------------+---------------|
   422	|Itanium(R) Software Conventions &     |http://               |               |
   423	|Runtime Architecture Guide            |developer.intel.com/  |               |
   424	|                                      |design/ia-64/downloads|               |
   425	|                                      |/245358.htm           |               |
   426	|--------------------------------------+----------------------+---------------|
   427	|ISO/IEC 9899: 1990, Programming       |                      |               |
   428	|Languages --C                         |                      |               |
   429	|--------------------------------------+----------------------+---------------|
   430	|ISO/IEC 9899: 1999, Programming       |                      |               |
   431	|Languages --C                         |                      |               |
   432	|--------------------------------------+----------------------+---------------|
   433	|Linux Assigned Names And Numbers      |http://www.lanana.org/|               |
   434	|Authority                             |                      |               |
   435	|--------------------------------------+----------------------+---------------|
   436	|Large File Support                    |http://               |               |
   437	|                                      |www.UNIX-systems.org/ |               |
   438	|                                      |version2/whatsnew/    |               |
   439	|                                      |lfs20mar.html         |               |
   440	|--------------------------------------+----------------------+---------------|
   441	|Linux Standard Base                   |http://               |               |
   442	|                                      |www.linuxbase.org/spec|               |
   443	|                                      |/                     |               |
   444	|--------------------------------------+----------------------+---------------|
   445	|OpenGL® Application Binary Interface  |http://oss.sgi.com/   |               |
   446	|for Linux                             |projects/ogl-sample/  |               |
   447	|                                      |ABI/                  |               |
   448	|--------------------------------------+----------------------+---------------|
   449	|IEEE Std POSIX 1003.2-1992 (ISO/IEC   |http://www.ieee.org/  |               |
   450	|9945-2:1993)                          |                      |               |
   451	|--------------------------------------+----------------------+---------------|
   452	|POSIX 1003.1c                         |http://www.ieee.org/  |               |
   453	|--------------------------------------+----------------------+---------------|
   454	|CAE Specification, May 1996, X/Open   |http://               |               |
   455	|Curses, Issue 4, Version 2 (ISBN:     |www.opengroup.org/    |               |
   456	|1-85912-171-3, C610), plus Corrigendum|                      |               |
   457	|U018                                  |                      |               |
   458	|--------------------------------------+----------------------+---------------|
   459	|CAE Specification, January 1997,      |http://               |               |
   460	|System Interface Definitions (XBD),   |www.opengroup.org/    |               |
   461	|Issue 5 (ISBN: 1-85912-186-1, C605)   |                      |               |
   462	|--------------------------------------+----------------------+---------------|
   463	|CAE Specification, January 1997,      |http://               |               |
   464	|Commands and Utilities (XCU), Issue 5 |www.opengroup.org/    |               |
   465	|(ISBN: 1-85912-191-8, C604)           |                      |               |
   466	|--------------------------------------+----------------------+---------------|
   467	|CAE Specification, February 1997,     |http://               |               |
   468	|Networking Services (XNS), Issue 5    |www.opengroup.org/    |               |
   469	|(ISBN: 1-85912-165-9, C523)           |                      |               |
   470	|--------------------------------------+----------------------+---------------|
   471	|CAE Specification, January 1997,      |http://               |               |
   472	|System Interfaces and Headers (XSH),  |www.opengroup.org/    |               |
   473	|Issue 5 (ISBN: 1-85912-181-0, C606)   |                      |               |
   474	|--------------------------------------+----------------------+---------------|
   475	|The Single UNIX Specification Version |http://               |               |
   476	|1 (UNIX 95) System Interfaces &       |www.opengroup.org/    |               |
   477	|Headers                               |                      |               |
   478	|--------------------------------------+----------------------+---------------|
   479	|System V Interface Definition, Issue 3|                      |ISBN 0201566524|
   480	|--------------------------------------+----------------------+---------------|
   481	|System V Interface Definition,Fourth  |                      |               |
   482	|Edition                               |                      |               |
   483	|--------------------------------------+----------------------+---------------|
   484	|Double Buffer Extension Library       |http://www.x.org/     |               |
   485	|--------------------------------------+----------------------+---------------|
   486	|X Display Power Management Signaling  |http://www.x.org/     |               |
   487	|(DPMS) Extension, Library             |                      |               |
   488	|Specification                         |                      |               |
   489	|--------------------------------------+----------------------+---------------|
   490	|X Record Extension Library            |http://www.x.org/     |               |
   491	|--------------------------------------+----------------------+---------------|
   492	|Security Extension Specification,     |http://www.x.org/     |               |
   493	|Version 7.1                           |                      |               |
   494	|--------------------------------------+----------------------+---------------|
   495	|X Nonrectangular Window Shape         |http://www.x.org/     |               |
   496	|Extension Library Version 1.0         |                      |               |
   497	|--------------------------------------+----------------------+---------------|
   498	|MIT-SHM--The MIT Shared Memory        |http://www.x.org/     |               |
   499	|Extension                             |                      |               |
   500	|--------------------------------------+----------------------+---------------|
   501	|X Synchronization Extension Library   |http://www.x.org/     |               |
   502	|--------------------------------------+----------------------+---------------|
   503	|XTEST Extension Library               |http://www.x.org/     |               |
   504	|--------------------------------------+----------------------+---------------|
   505	|X11R6.4 X Inter-Client Exchange (ICE) |http://www.x.org/     |               |
   506	|Protocol                              |                      |               |
   507	|--------------------------------------+----------------------+---------------|
   508	|X11R6.4 X11 Input Extension Library   |http://www.x.org/     |               |
   509	|--------------------------------------+----------------------+---------------|
   510	|X11R6.4 Xlib - C library              |http://www.x.org/     |               |
   511	|--------------------------------------+----------------------+---------------|
   512	|X/Open Portability Guide, Issue 4     |http://               |               |
   513	|                                      |www.opengroup.org/    |               |
   514	|--------------------------------------+----------------------+---------------|
   515	|X11R6.4 X Session Management Library  |http://www.x.org/     |               |
   516	|--------------------------------------+----------------------+---------------|
   517	|X11R.4 X Toolkit Intrinsics           |http://www.x.org/     |               |
   518	|--------------------------------------+----------------------+---------------|
   519	|zlib 1.1.3 Manual                     |http://www.gzip.org/  |See            |
   520	|                                      |zlib/                 |               |
   521	+-----------------------------------------------------------------------------+
   522	-------------------------------------------------------------------------------
   523	
   524	Related Implementations
   525	
   526	The implementations listed here are referenced in whole or in part by the Linux
   527	Standard Base when no formal specification is available.
   528	
   529	Table 1-2. Related Implementations
   530	
   531	+-----------------------------------------------------------------------------+
   532	|BSD 4.4 Lite      |                    |                                     |
   533	|version 2         |                    |                                     |
   534	|------------------+--------------------+-------------------------------------|
   535	|GNU/Linux defacto |http://www.gnu.org/ |                                     |
   536	|standard          |                    |                                     |
   537	|------------------+--------------------+-------------------------------------|
   538	|RFC 1831 & 1832   |http://www.ietf.org/|Still need API reference, instead of |
   539	|                  |                    |protocol reference                   |
   540	|------------------+--------------------+-------------------------------------|
   541	|RPM Package Format|http://www.rpmdp.org|                                     |
   542	|V3.0              |/rpmbook/           |                                     |
   543	+-----------------------------------------------------------------------------+
   544	-------------------------------------------------------------------------------
   545	
   546	Relevant Libraries
   547	
   548	The libraries listed here shall be available on a Linux Standard Base system.
   549	This list may be supplemented or amended by the architecture-specific
   550	specifications.
   551	
   552	Table 1-3. Relevant Libraries
   553	
   554	+---------------------------+
   555	|Library   |Runtime Name    |
   556	|----------+----------------|
   557	|libX11    |libX11.so.6     |
   558	|----------+----------------|
   559	|libXt     |libXt.so.6      |
   560	|----------+----------------|
   561	|libGL     |libGL.so.1      |
   562	|----------+----------------|
   563	|libXext   |libXext.so.6    |
   564	|----------+----------------|
   565	|libICE    |libICE.so.6     |
   566	|----------+----------------|
   567	|libSM     |libSM.so.6      |
   568	|----------+----------------|
   569	|libdl     |libdl.so.2      |
   570	|----------+----------------|
   571	|libcrypt  |libcrypt.so.1   |
   572	|----------+----------------|
   573	|libz      |libz.so.1       |
   574	|----------+----------------|
   575	|libncurses|libncurses.so.5 |
   576	+---------------------------+
   577	
   578	These libraries will be in an implementation-dependent directory which the
   579	dynamic linker will search by default.
   580	
   581	-------------------------------------------------------------------------------
   582	
   583	How to Use this Standard
   584	
   585	The complete LSB specification is composed of this generic LSB specification
   586	and the supplemental processor-specific specification for a particular
   587	processor architecture. These two documents constitute a specification that
   588	should be used in conjunction with the publicly-available standards documents
   589	it references. The LSB enumerates the system components it includes, but
   590	descriptions of those components may be included entirely in the LSB, partly in
   591	the LSB and partly in other documents, or entirely in other reference
   592	documents.
   593	
   594	-------------------------------------------------------------------------------
   595	
   596	Definitions
   597	
   598	gLSB
   599	   
   600	    This document.
   601	   
   602	LSB-Compliant Application
   603	   
   604	    An application written to include only the system routines, commands, and
   605	    other resources included in this document, and that has been compiled into
   606	    an executable file that has the formats and characteristics specified for
   607	    such files in this document, and whose behavior complies, installs, and is
   608	    executed in the environment with the rules given in this document.
   609	   
   610	LSB-Conforming Implementation
   611	   
   612	    An implementation that provides the binary system interface for
   613	    applications described in this document.
   614	   
   615	Non-LSB-Compliant Application
   616	   
   617	    An application which has been written to include system routines, commands,
   618	    or other resources not included in this document, or which has been
   619	    compiled into a format different from those specified here, or which does
   620	    not behave as specified in this document.
   621	   
   622	LSB Implementation Conformance
   623	   
   624	    An implementation satisfying the following requirements:
   625	   
   626	     1. The implementation shall implement fully the architecture described in
   627	        the hardware manual for the target processor architecture.
   628	       
   629	     2. The implementation shall be capable of executing compiled applications
   630	        having the format and using the system interfaces described in this
   631	        document.
   632	       
   633	     3. The implementation shall provide libraries containing the interfaces
   634	        specified by this document, and shall provide a dynamic linking
   635	        mechanism that allows these interfaces to be attached to applications
   636	        at runtime. All the interfaces shall behave as specified in the
   637	        normative references and requirements of this document.
   638	       
   639	     4. The map of virtual memory provided by the implementation shall conform
   640	        to the requirements of this document.
   641	       
   642	     5. The implementation's low-level behavior with respect to function call
   643	        linkage, system traps, signals, and other such activities shall conform
   644	        to the formats described in this document.
   645	       
   646	     6. The compilation system shall compile source code into executable files
   647	        having the formats and characteristics specified in this document.
   648	       
   649	     7. The implementation shall provide all of the mandatory interfaces in
   650	        their entirety.
   651	       
   652	     8. The implementation may provide one or more of the optional interfaces.
   653	        Each optional interface that is provided shall be provided in its
   654	        entirety. The product documentation shall state which optional
   655	        interfaces are provided.
   656	       
   657	     9. The implementation shall provide all files and utilities specified as
   658	        part of this document in the format defined here and in other
   659	        referenced documents. All commands and utilities shall behave as
   660	        required by this document. The implementation shall also provide all
   661	        mandatory components of an application's runtime environment that are
   662	        included or referenced in this document.
   663	       
   664	    10. The implementation, when provided with standard data formats and values
   665	        at a named interface, shall provide the behavior defined for those
   666	        values and data formats at that interface. However, a conforming
   667	        implementation may consist of components which are separately packaged
   668	        and/or sold. For example, a vendor of a conforming implementation might
   669	        sell the hardware, operating system, and windowing system as separately
   670	        packaged items.
   671	       
   672	    11. The implementation may provide additional interfaces with different
   673	        names. It may also provide additional behavior corresponding to data
   674	        values outside the standard ranges, for standard named interfaces.
   675	       
   676	LSB Application Conformance
   677	   
   678	    An application with the following characteristics:
   679	   
   680	     1. Its executable files are either shell scripts or object files in the
   681	        format defined for the Object File Format system interface.
   682	       
   683	     2. Its object files participate in dynamic linking as defined in the
   684	        Program Loading and Linking System interface.
   685	       
   686	     3. It employs only the instructions, traps, and other low-level facilities
   687	        defined in the Low-Level System interface as being for use by
   688	        applications.
   689	       
   690	     4. If it requires any optional interface defined in this document in order
   691	        to be installed or to execute successfully, the requirement for that
   692	        optional interface is stated in the application's documentation.
   693	       
   694	     5. It does not use any interface or data format that is not required to be
   695	        provided by a conforming implementation, unless:
   696	       
   697	          o If such an interface or data format is supplied by another
   698	            application through direct invocation of that application during
   699	            execution, that application is in turn an LSB-compliant
   700	            application.
   701	           
   702	          o The use of that interface or data format, as well as its source, is
   703	            identified in the documentation of the application.
   704	           
   705	     6. It must not use any values for a named interface that are reserved for
   706	        vendor extensions.
   707	       
   708	    A strictly conforming application does not require or use any interface,
   709	    facility, or implementation-defined extension that is not defined in this
   710	    document in order to be installed or to execute successfully.
   711	   
   712	Rationale
   713	   
   714	    An LSB-compliant application is expected to have no dependencies on any
   715	    vendor extensions to this document. The most common such extensions are
   716	    additional function entry points and additional libraries other than the
   717	    ones defined in this document. If an application requires such extensions,
   718	    it is not portable, since other LSB-conforming implementations may not
   719	    provide those extensions.
   720	   
   721	    An LSB-compliant application is required to use system services on the
   722	    implementation on which it is running, rather than importing system
   723	    routines from some other implementation. Thus, it must link dynamically to
   724	    any routines in the implementation that perform system traps to kernel
   725	    services.
   726	   
   727	    It is to be expected that some applications may be companion applications
   728	    to other applications. For example, a query application may be a companion
   729	    to a database application; a preprocessor may be an adjunct to one or more
   730	    compilers; a data reformatter may convert data from one document manager to
   731	    another. In such cases, the application may or may not be LSB-compliant,
   732	    regardless of whether the other application on which it is dependent is
   733	    LSB-compliant. If such an application merely uses data produced by another
   734	    application, the application's compliance is independent of the other
   735	    application's compliance. If such an application actually invokes another
   736	    application during execution (as, for example, a third-party math library),
   737	    the invoking application is LSB-compliant only if it also constitutes a
   738	    LSB-compliant application in combination with the invoked application.
   739	   
   740	Shell Script
   741	   
   742	    A file that is read by an interpreter (e.g., awk). The first line of the
   743	    shell script includes a reference to its interpreter binary.
   744	   
   745	-------------------------------------------------------------------------------
   746	
   747	Terminology
   748	
   749	can
   750	   
   751	    Describes a permissible optional feature or behavior available to the user
   752	    or application. The feature or behavior is mandatory for an implementation
   753	    that conforms to this document. An application can rely on the existence of
   754	    the feature or behavior.
   755	   
   756	implementation-defined
   757	   
   758	    Describes a value or behavior that is not defined by this document but is
   759	    selected by an implementor. The value or behavior may vary among
   760	    implementations that conform to this document. An application should not
   761	    rely on the existence of the value or behavior. An application that relies
   762	    on such a value or behavior cannot be assured to be portable across
   763	    conforming implementations. The implementor shall document such a value or
   764	    behavior so that it can be used correctly by an application.
   765	   
   766	    Same as implementation-dependent.
   767	   
   768	may
   769	   
   770	    Describes a feature or behavior that is optional for an implementation that
   771	    conforms to this document. An application should not rely on the existence
   772	    of the feature or behavior. An application that relies on such a feature or
   773	    behavior cannot be assured to be portable across conforming
   774	    implementations.
   775	   
   776	    To avoid ambiguity, the opposite of may is expressed as need not, instead
   777	    of may not.
   778	   
   779	must
   780	   
   781	    Describes a feature or behavior that is mandatory for an application or
   782	    user. An implementation that conforms to this document shall support this
   783	    feature or behavior.
   784	   
   785	shall
   786	   
   787	    Describes a feature or behavior that is mandatory for an implementation
   788	    that conforms to this document. An application can rely on the existence of
   789	    the feature or behavior.
   790	   
   791	should
   792	   
   793	    For an implementation that conforms to this document, describes a feature
   794	    or behavior that is recommended but not mandatory. An application should
   795	    not rely on the existence of the feature or behavior. An application that
   796	    relies on such a feature or behavior cannot be assured to be portable
   797	    across conforming implementations.
   798	   
   799	    For an application, describes a feature or behavior that is recommended
   800	    programming practice for optimum portability.
   801	   
   802	undefined
   803	   
   804	    Describes the nature of a value or behavior not defined by this document
   805	    which results from use of an invalid program construct or invalid data
   806	    input. The value or behavior may vary among implementations that conform to
   807	    this document. An application should not rely on the existence or validity
   808	    of the value or behavior. An application that relies on any particular
   809	    value or behavior cannot be assured to be portable across conforming
   810	    implementations.
   811	   
   812	unspecified
   813	   
   814	    Describes the nature of a value or behavior not specified by this document
   815	    which results from use of a valid program construct or valid data input.
   816	    The value or behavior may vary among implementations that conform to this
   817	    document. An application should not rely on the existence or validity of
   818	    the value or behavior. An application that relies on any particular value
   819	    or behavior cannot be assured to be portable across conforming
   820	    implementations.
   821	   
   822	will
   823	   
   824	    Same meaning as shall; shall is the preferred term.
   825	   
   826	II. Object Format
   827	
   828	Table of Contents
   829	2. Object Files
   830	3. Sections
   831	4. Special Sections
   832	5. Symbol Mapping
   833	6. Symbol Versioning
   834	
   835	-------------------------------------------------------------------------------
   836	
   837	Chapter 2. Object Files
   838	
   839	LSB-conforming implementations shall support the object file Executable and
   840	Linking Format (ELF), which is defined by the following documents:
   841	
   842	  * System V Application Binary Interface, Edition 4.1
   843	   
   844	  * System V Application Binary Interface - DRAFT - April 29, 1998
   845	   
   846	  * this document
   847	   
   848	  * an architecture-specific LSB specification
   849	   
   850	Conforming implementations may also support other unspecified object file
   851	formats.
   852	
   853	-------------------------------------------------------------------------------
   854	
   855	Chapter 3. Sections
   856	
   857	-------------------------------------------------------------------------------
   858	
   859	ELF Section Types
   860	
   861	The following sections types are defined in the System V Application Binary
   862	Interface, Edition 4.1.
   863	
   864	Table 3-1.
   865	
   866	+-----------------------------------------------------------------------------+
   867	|      Name       |  Value   |                  Description                   |
   868	|-----------------+----------+------------------------------------------------|
   869	|SHT_DYNAMIC      |0x6       |The section holds information for dynamic       |
   870	|                 |          |linking. Currently, an object file may have only|
   871	|                 |          |one dynamic section, but this restriction may be|
   872	|                 |          |relaxed in the future. See `Dynamic Section' in |
   873	|                 |          |Chapter 5 for details.                          |
   874	|-----------------+----------+------------------------------------------------|
   875	|SHT_DYNSYM       |0xb       |                                                |
   876	|-----------------+----------+------------------------------------------------|
   877	|SHT_FINI_ARRAY   |0xf       |This section contains an array of pointers to   |
   878	|                 |          |termination functions, as described in          |
   879	|                 |          |`Initialization and Termination Functions' in   |
   880	|                 |          |Chapter 5. Each pointer in the array is taken as|
   881	|                 |          |a parameterless procedure with a void return.   |
   882	|-----------------+----------+------------------------------------------------|
   883	|SHT_HASH         |0x5       |The section holds a symbol hash table.          |
   884	|                 |          |Currently, an object file may have only one hash|
   885	|                 |          |table, but this restriction may be relaxed in   |
   886	|                 |          |the future. See `Hash Table' in the Chapter 5   |
   887	|                 |          |for details.                                    |
   888	|-----------------+----------+------------------------------------------------|
   889	|SHT_HIPROC       |0x7fffffff|Values in this inclusive range are reserved for |
   890	|                 |          |processor-specific semantics.                   |
   891	|-----------------+----------+------------------------------------------------|
   892	|SHT_HIUSER       |0xffffffff|This value specifies the upper bound of the     |
   893	|                 |          |range of indexes reserved for application       |
   894	|                 |          |programs. Section types between SHT_LOUSER and  |
   895	|                 |          |SHT_HIUSER may be used by the application,      |
   896	|                 |          |without conflicting with current or future      |
   897	|                 |          |system-defined section types.                   |
   898	|-----------------+----------+------------------------------------------------|
   899	|SHT_INIT_ARRAY   |0xe       |This section contains an array of pointers to   |
   900	|                 |          |initialization functions, as described in       |
   901	|                 |          |`Initialization and Termination Functions' in   |
   902	|                 |          |Chapter 5. Each pointer in the array is taken as|
   903	|                 |          |a parameterless procedure with a void return.   |
   904	|-----------------+----------+------------------------------------------------|
   905	|SHT_LOPROC       |0x70000000|Values in this inclusive range are reserved for |
   906	|                 |          |processor-specific semantics.                   |
   907	|-----------------+----------+------------------------------------------------|
   908	|SHT_LOUSER       |0x80000000|This value specifies the lower bound of the     |
   909	|                 |          |range of indexes reserved for application       |
   910	|                 |          |programs.                                       |
   911	|-----------------+----------+------------------------------------------------|
   912	|SHT_NOBITS       |0x8       |A section of this type occupies no space in the |
   913	|                 |          |file but otherwise resembles SHT_PROGBITS.      |
   914	|                 |          |Although this section contains no bytes, the    |
   915	|                 |          |sh_offset member contains the conceptual file   |
   916	|                 |          |offset.                                         |
   917	|-----------------+----------+------------------------------------------------|
   918	|SHT_NOTE         |0x7       |The section holds information that marks the    |
   919	|                 |          |file in some way. See `Note Section' in Chapter |
   920	|                 |          |5 for details.                                  |
   921	|-----------------+----------+------------------------------------------------|
   922	|SHT_NULL         |0x0       |This value marks the section header as inactive;|
   923	|                 |          |it does not have an associated section. Other   |
   924	|                 |          |members of the section header have undefined    |
   925	|                 |          |values.                                         |
   926	|-----------------+----------+------------------------------------------------|
   927	|SHT_PREINIT_ARRAY|0x10      |This section contains an array of pointers to   |
   928	|                 |          |functions that are invoked before all other     |
   929	|                 |          |initialization functions, as described in       |
   930	|                 |          |`Initialization and Termination Functions' in   |
   931	|                 |          |Chapter 5. Each pointer in the array is taken as|
   932	|                 |          |a parameterless proceure with a void return.    |
   933	|-----------------+----------+------------------------------------------------|
   934	|SHT_PROGBITS     |0x1       |The section holds information defined by the    |
   935	|                 |          |program, whose format and meaning are determined|
   936	|                 |          |solely by the program.                          |
   937	|-----------------+----------+------------------------------------------------|
   938	|SHT_REL          |0x9       |The section holds relocation entries without    |
   939	|                 |          |explicit addends, such as type Elf32_Rel for the|
   940	|                 |          |32-bit class of object files or type Elf64_Rel  |
   941	|                 |          |for the 64-bit class of object files. An object |
   942	|                 |          |file may have multiple relocation sections. See |
   943	|                 |          |"Relocation"                                    |
   944	|-----------------+----------+------------------------------------------------|
   945	|SHT_RELA         |0x4       |The section holds relocation entries with       |
   946	|                 |          |explicit addends, such as type Elf32_Rela for   |
   947	|                 |          |the 32-bit class of object files or type        |
   948	|                 |          |Elf64_Rela for the 64-bit class of object files.|
   949	|                 |          |An object file may have multiple relocation     |
   950	|                 |          |sections. `Relocation' b                        |
   951	|-----------------+----------+------------------------------------------------|
   952	|SHT_SHLIB        |0xa       |This section type is reserved but has           |
   953	|                 |          |unspecified semantics.                          |
   954	|-----------------+----------+------------------------------------------------|
   955	|SHT_STRTAB       |0x3       |The section holds a string table. An object file|
   956	|                 |          |may have multiple string table sections. See    |
   957	|                 |          |`String Table' below for details.               |
   958	|-----------------+----------+------------------------------------------------|
   959	|SHT_SYMTAB       |0x2       |These sections hold a symbol table. Currently,  |
   960	|                 |          |an object file may have only one section of each|
   961	|                 |          |type, but this restriction may be relaxed in the|
   962	|                 |          |future. Typically, SHT_SYMTAB provides symbols  |
   963	|                 |          |for link editing, though it may also be used for|
   964	|                 |          |dynamic l                                       |
   965	+-----------------------------------------------------------------------------+
   966	 
   967	
   968	-------------------------------------------------------------------------------
   969	
   970	Linux Section Types
   971	
   972	The following Linux section types are defined here.
   973	
   974	Table 3-2.
   975	
   976	+-----------------------------------------------------------------------------+
   977	|     Name      |  Value   |                   Description                    |
   978	|---------------+----------+--------------------------------------------------|
   979	|SHT_GNU_verdef |0x6ffffffd|This section contains the symbol versions that are|
   980	|               |          |provided.                                         |
   981	|---------------+----------+--------------------------------------------------|
   982	|SHT_GNU_verneed|0x6ffffffe|This section contains the symbol versions that are|
   983	|               |          |required.                                         |
   984	|---------------+----------+--------------------------------------------------|
   985	|SHT_GNU_versym |0x6fffffff|This section contains the Symbol Version Table.   |
   986	+-----------------------------------------------------------------------------+
   987	 
   988	
   989	-------------------------------------------------------------------------------
   990	
   991	Chapter 4. Special Sections
   992	
   993	ELF Special Sections
   994	
   995	The following sections are defined in the ELF reference specification.
   996	
   997	Table 4-1.
   998	
   999	+---------------------------------------------------+
  1000	|     Name     |    Type    |      Attributes       |
  1001	|--------------+------------+-----------------------|
  1002	|.bss          |SHT_NOTE    |SHF_ALLOC+SHF_WRITE    |
  1003	|--------------+------------+-----------------------|
  1004	|.comment      |SHT_NULL    |0                      |
  1005	|--------------+------------+-----------------------|
  1006	|.data         |SHT_NULL    |SHF_ALLOC+SHF_WRITE    |
  1007	|--------------+------------+-----------------------|
  1008	|.data1        |SHT_NULL    |SHF_ALLOC+SHF_WRITE    |
  1009	|--------------+------------+-----------------------|
  1010	|.debug        |SHT_NULL    |0                      |
  1011	|--------------+------------+-----------------------|
  1012	|.dynamic      |SHT_HASH    |SHF_ALLOC+SHF_WRITE    |
  1013	|--------------+------------+-----------------------|
  1014	|.dynstr       |SHT_SYMTAB  |SHF_ALLOC              |
  1015	|--------------+------------+-----------------------|
  1016	|.dynsym       |SHT_SHLIB   |SHF_ALLOC              |
  1017	|--------------+------------+-----------------------|
  1018	|.fini         |SHT_NULL    |SHF_ALLOC+SHF_EXECINSTR|
  1019	|--------------+------------+-----------------------|
  1020	|.fini_array   |            |SHF_ALLOC+SHF_WRITE    |
  1021	|--------------+------------+-----------------------|
  1022	|.got          |SHT_NULL    |SHF_ALLOC+SHF_WRITE    |
  1023	|--------------+------------+-----------------------|
  1024	|.hash         |SHT_RELA    |SHF_ALLOC              |
  1025	|--------------+------------+-----------------------|
  1026	|.init         |SHT_NULL    |SHF_ALLOC+SHF_EXECINSTR|
  1027	|--------------+------------+-----------------------|
  1028	|.init_array   |            |SHF_ALLOC+SHF_WRITE    |
  1029	|--------------+------------+-----------------------|
  1030	|.interp       |SHT_NULL    |SHF_ALLOC              |
  1031	|--------------+------------+-----------------------|
  1032	|.line         |SHT_NULL    |0                      |
  1033	|--------------+------------+-----------------------|
  1034	|.note         |SHT_DYNAMIC |0                      |
  1035	|--------------+------------+-----------------------|
  1036	|.plt          |SHT_NULL    |SHF_ALLOC+SHF_EXECINSTR|
  1037	|--------------+------------+-----------------------|
  1038	|.preinit_array|            |SHF_ALLOC+SHF_WRITE    |
  1039	|--------------+------------+-----------------------|
  1040	|.rel.bss      |SHT_NOBITS  |SHF_ALLOC              |
  1041	|--------------+------------+-----------------------|
  1042	|.rel.data     |SHT_NOBITS  |0                      |
  1043	|--------------+------------+-----------------------|
  1044	|.rel.got      |SHT_NOBITS  |SHF_ALLOC              |
  1045	|--------------+------------+-----------------------|
  1046	|.rel.plt      |SHT_NOBITS  |SHF_ALLOC              |
  1047	|--------------+------------+-----------------------|
  1048	|.rel.text     |SHT_NOBITS  |0                      |
  1049	|--------------+------------+-----------------------|
  1050	|.rodata       |SHT_NULL    |SHF_ALLOC              |
  1051	|--------------+------------+-----------------------|
  1052	|.rodata1      |SHT_NULL    |SHF_ALLOC              |
  1053	|--------------+------------+-----------------------|
  1054	|.shstrtab     |SHT_SYMTAB  |0                      |
  1055	|--------------+------------+-----------------------|
  1056	|.strtab       |SHT_SYMTAB  |SHF_ALLOC              |
  1057	|--------------+------------+-----------------------|
  1058	|.symtab       |SHT_PROGBITS|SHF_ALLOC              |
  1059	|--------------+------------+-----------------------|
  1060	|.text         |SHT_NULL    |SHF_ALLOC+SHF_EXECINSTR|
  1061	+---------------------------------------------------+
  1062	
  1063	.bss
  1064	   
  1065	    This section holds uninitialized data that contribute to the program's
  1066	    memory image. By definition, the system initializes the data with zeros
  1067	    when the program begins to run. The section occupies no file space, as
  1068	    indicated by the section type, SHT_NOBITS
  1069	   
  1070	.comment
  1071	   
  1072	    This section holds version control information.
  1073	   
  1074	.data
  1075	   
  1076	    This section holds initialized data that contribute to the program's memory
  1077	    image.
  1078	   
  1079	.data1
  1080	   
  1081	    This section holds initialized data that contribute to the program's memory
  1082	    image.
  1083	   
  1084	.debug
  1085	   
  1086	    This section holds information for symbolic debugging. The contents are
  1087	    unspecified. All section names with the prefix .debug are reserved for
  1088	    future use in the ABI.
  1089	   
  1090	.dynamic
  1091	   
  1092	    This section holds dynamic linking information. The section's attributes
  1093	    will include the SHF_ALLOC bit. Whether the SHF_WRITE bit is set is
  1094	    processor specific. See Chapter 5 for more information.
  1095	   
  1096	.dynstr
  1097	   
  1098	    This section holds strings needed for dynamic linking, most commonly the
  1099	    strings that represent the names associated with symbol table entries. See
  1100	    Chapter 5 for more information.
  1101	   
  1102	.dynsym
  1103	   
  1104	    This section holds the dynamic linking symbol table, as described in
  1105	    `Symbol Table'. See Chapter 5 for more information.
  1106	   
  1107	.fini
  1108	   
  1109	    This section holds executable instructions that contribute to the process
  1110	    termination code. That is, when a program exits normally, the system
  1111	    arranges to execute the code in this section.
  1112	   
  1113	.fini_array
  1114	   
  1115	    This section holds an array of function pointers that contributes to a
  1116	    single termination array for the executable or shared object containing the
  1117	    section.
  1118	   
  1119	.got
  1120	   
  1121	    This section holds the global offset table. See `Coding Examples' in
  1122	    Chapter 3, `Special Sections' in Chapter 4, and `Global Offset Table' in
  1123	    Chapter 5 of the processor supplement for more information.
  1124	   
  1125	.hash
  1126	   
  1127	    This section holds a symbol hash table. See `Hash Table' in Chapter 5 for
  1128	    more information.
  1129	   
  1130	.init
  1131	   
  1132	    This section holds executable instructions that contribute to the process
  1133	    initialization code. When a program starts to run, the system arranges to
  1134	    execute the code in this section before calling the main program entry
  1135	    point (called main for C programs)
  1136	   
  1137	.init_array
  1138	   
  1139	    This section holds an array of function pointers that contributes to a
  1140	    single initialization array for the executable or shared object containing
  1141	    the section.
  1142	   
  1143	.interp
  1144	   
  1145	    This section holds the path name of a program interpreter. If the file has
  1146	    a loadable segment that includes relocation, the sections' attributes will
  1147	    include the SHF_ALLOC bit; otherwise, that bit will be off. See Chapter 5
  1148	    for more information.
  1149	   
  1150	.line
  1151	   
  1152	    This section holds line number information for symbolic debugging, which
  1153	    describes the correspondence between the source program and the machine
  1154	    code. The contents are unspecified.
  1155	   
  1156	.note
  1157	   
  1158	    This section holds information in the format that `Note Section'. in
  1159	    Chapter 5 describes.
  1160	   
  1161	.plt
  1162	   
  1163	    This section holds the procedure linkage table. See `Special Sections' in
  1164	    Chapter 4 and `Procedure Linkage Table' in Chapter 5 of the processor
  1165	    supplement for more information.
  1166	   
  1167	.preinit_array
  1168	   
  1169	    This section holds an array of function pointers that contributes to a
  1170	    single pre-initialization array for the executable or shared object
  1171	    containing the section.
  1172	   
  1173	.rel.bss
  1174	   
  1175	    This section holds relocation information, as described in `Relocation'.
  1176	    These relocations are applied to the .bss section.
  1177	   
  1178	.rel.data
  1179	   
  1180	    This section holds relocation information, as described in `Relocation'.
  1181	    These relocations are applied to the .data section.
  1182	   
  1183	.rel.got
  1184	   
  1185	    This section holds relocation information, as described in `Relocation'.
  1186	    These relocations are applied to the .got section.
  1187	   
  1188	.rel.plt
  1189	   
  1190	    This section holds relocation information, as described in `Relocation'.
  1191	    These relocations are applied to the .plt section.
  1192	   
  1193	.rel.text
  1194	   
  1195	    This section holds relocation information, as described in `Relocation'.
  1196	    These relocations are applied to the .text section.
  1197	   
  1198	.rodata
  1199	   
  1200	    This section holds read-only data that typically contribute to a
  1201	    non-writable segment in the process image. See `Program Header' in Chapter
  1202	    5 for more information.
  1203	   
  1204	.rodata1
  1205	   
  1206	    This section hold sread-only data that typically contribute to a
  1207	    non-writable segment in the process image. See `Program Header' in Chapter
  1208	    5 for more information.
  1209	   
  1210	.shstrtab
  1211	   
  1212	    This section holds section names.
  1213	   
  1214	.strtab
  1215	   
  1216	    This section holds strings, most commonly the strings that represent the
  1217	    names associated with symbol table entries. If the file has a loadable
  1218	    segment that includes the symbol string table, the section's attributes
  1219	    will include the SHF_ALLOC bit; otherwi
  1220	   
  1221	.symtab
  1222	   
  1223	    This section holds a symbol table, as `Symbol Table'. in this chapter
  1224	    describes. If the file has a loadable segment that includes the symbol
  1225	    table, the section's attributes will include the SHF_ALLOC bit; otherwise,
  1226	    that bit will be off.
  1227	   
  1228	.text
  1229	   
  1230	    This section holds the `text,' or executable instructions, of a program.
  1231	   
  1232	 
  1233	
  1234	-------------------------------------------------------------------------------
  1235	
  1236	Linux Special Sections
  1237	
  1238	The following Linux-specific sections are defined here.
  1239	
  1240	Table 4-2.
  1241	
  1242	+----------------------------------------------+
  1243	|     Name     |   Type    |    Attributes     |
  1244	|--------------+-----------+-------------------|
  1245	|.ctors        |SHT_NULL   |SHF_ALLOC+SHF_WRITE|
  1246	|--------------+-----------+-------------------|
  1247	|.dtors        |SHT_NULL   |SHF_ALLOC+SHF_WRITE|
  1248	|--------------+-----------+-------------------|
  1249	|.eh_frame     |SHT_NULL   |SHF_ALLOC+SHF_WRITE|
  1250	|--------------+-----------+-------------------|
  1251	|.gnu.version  |           |SHF_ALLOC          |
  1252	|--------------+-----------+-------------------|
  1253	|.gnu.version_d|           |SHF_ALLOC          |
  1254	|--------------+-----------+-------------------|
  1255	|.gnu.version_r|           |SHF_ALLOC          |
  1256	|--------------+-----------+-------------------|
  1257	|.note.ABI-tag |SHT_DYNAMIC|SHF_ALLOC          |
  1258	|--------------+-----------+-------------------|
  1259	|.rel.dyn      |           |SHF_ALLOC          |
  1260	|--------------+-----------+-------------------|
  1261	|.stab         |SHT_NULL   |0                  |
  1262	|--------------+-----------+-------------------|
  1263	|.stabstr      |SHT_SYMTAB |0                  |
  1264	+----------------------------------------------+
  1265	
  1266	.ctors
  1267	   
  1268	    This section contains a list of global constructor function pointers.
  1269	   
  1270	.dtors
  1271	   
  1272	    This section contains a list of global destructor function pointers.
  1273	   
  1274	.eh_frame
  1275	   
  1276	    This section contains information necessary for frame unwinding during
  1277	    exception handling. The format is the same as for .debug_frame as described
  1278	    by DWARF2.
  1279	   
  1280	.gnu.version
  1281	   
  1282	    This section contains the Symbol Version Table.
  1283	   
  1284	.gnu.version_d
  1285	   
  1286	    This section contains the Version Definitions.
  1287	   
  1288	.gnu.version_r
  1289	   
  1290	    This section contains the Version Requirments.
  1291	   
  1292	.note.ABI-tag
  1293	   
  1294	.rel.dyn
  1295	   
  1296	    This section holds relocation information, as described in `Relocation'.
  1297	    These relocations are applied to the .dyn section.
  1298	   
  1299	.stab
  1300	   
  1301	    This section contains debugging information. The contents are not specified
  1302	    as part of the LSB.
  1303	   
  1304	.stabstr
  1305	   
  1306	    This section contains strings associated with the debugging infomation
  1307	    contained in the .stab section.
  1308	   
  1309	 
  1310	
  1311	-------------------------------------------------------------------------------
  1312	
  1313	Chapter 5. Symbol Mapping
  1314	
  1315	This chapter defines how names are mapped from the source symbol to the object
  1316	symbol.
  1317	
  1318	-------------------------------------------------------------------------------
  1319	
  1320	C Language
  1321	
  1322	External C symbols have the same names in C and object files' symbol tables.
  1323	
  1324	-------------------------------------------------------------------------------
  1325	
  1326	C++ Language
  1327	
  1328	Because of the immaturity of the C++ ABI (for name mangling, exception
  1329	handling, and other such issues), we do not standardize any libraries for C++
  1330	in this version of the Linux Standard Base. [1]
  1331	
  1332	In a future version of this specification, name mangling rules will be
  1333	specified so that C++ symbols can be mapped into symbol names in the object
  1334	file.
  1335	
  1336	-------------------------------------------------------------------------------
  1337	
  1338	Chapter 6. Symbol Versioning
  1339	
  1340	This chapter describes the Symbol Versioning mechanism. All ELF objects may
  1341	provide or depend on versioned symbols. Symbol Versioning is implemented by 3
  1342	section types: SHT_GNU_versym, SHT_GNU_verdef, and SHT_GNU_verneed.
  1343	
  1344	The term "Elfxx" means "Elf32" or "Elf64" depending on the architecture.
  1345	
  1346	Versions are described by strings. The structures that are used for symbol
  1347	versions also contain a member that holds the ELF hashing values of the
  1348	strings. This allows for more efficient processing.
  1349	
  1350	-------------------------------------------------------------------------------
  1351	
  1352	Symbol Version Table
  1353	
  1354	The Symbol Version Table is contained in the special section .gnu.version which
  1355	has a section type of SHT_GNU_versym. This section has the same number of
  1356	entries as the Dynamic Symbol Table.
  1357	
  1358	This section contains an array of elements of type Elfxx_Half. Each entry
  1359	specifies the version defined for or required by the corresponding symbol in
  1360	the Dynamic Symbol Table.
  1361	
  1362	The values in the Symbol Version Table are unique to the object in which they
  1363	are located. These values are identifiers that are provided by the the
  1364	vna_other member of the Elfxx_Vernaux structure or the vd_ndx member of the
  1365	Elfxx_Verdef structure.
  1366	
  1367	The values 0 and 1 are reserved.
  1368	
  1369	0
  1370	   
  1371	    The symbol is local, not available outside the object.
  1372	   
  1373	1
  1374	   
  1375	    The symbol is defined in this object and is globally available.
  1376	   
  1377	All other values are used to identify version strings located in one of the
  1378	other Symbol Version sections. The value itself is not the version associated
  1379	with the symbol. The string identified by the value defines the version of the
  1380	symbol.
  1381	
  1382	-------------------------------------------------------------------------------
  1383	
  1384	Version Definitions
  1385	
  1386	Symbol definitions are contained in the special section .gnu.version_d which
  1387	has a section type of SHT_GNU_verdef. The number of entries in this section is
  1388	contained in the DT_VERDEFNUM entry of the Dynamic Section. The sh_link member
  1389	of the section header points to the section that contains the strings
  1390	referenced by this section.
  1391	
  1392	Figure 6-1. Version Definition Entries
  1393	
  1394	typedef struct {
  1395	        Elfxx_Half    vd_version;
  1396	        Elfxx_Half    vd_flags;
  1397	        Elfxx_Half    vd_ndx;
  1398	        Elfxx_Half    vd_cnt;
  1399	        Elfxx_Word    vd_hash;
  1400	        Elfxx_Word    vd_aux;
  1401	        Elfxx_Word    vd_next;
  1402	} Elfxx_Verdef;
  1403	
  1404	vd_version
  1405	   
  1406	    Version revision. This value is currently set to 1, and will be reset if
  1407	    the versioning implementation is incompatibly altered.
  1408	   
  1409	vd_flags
  1410	   
  1411	    Version information flag bitmask.
  1412	   
  1413	vd_ndx
  1414	   
  1415	    Version index numeric value referencing the SHT_GNU_versym section.
  1416	   
  1417	vd_cnt
  1418	   
  1419	    Number of associated verdaux array entries.
  1420	   
  1421	vd_hash
  1422	   
  1423	    Version name hash value (ELF hash function).
  1424	   
  1425	vd_aux
  1426	   
  1427	    Offset to a corresponding entry in the verdaux array, in bytes.
  1428	   
  1429	vd_next
  1430	   
  1431	    Offset to the next verdef entry, in bytes.
  1432	   
  1433	Figure 6-2. Version Definition Auxiliary Entries
  1434	
  1435	typedef struct {
  1436	        Elfxx_Word    vda_name;
  1437	        Elfxx_Word    vda_next;
  1438	} Elfxx_Verdaux;
  1439	
  1440	vda_name
  1441	   
  1442	    Offset to the version or dependency name string in the section header, in
  1443	    bytes.
  1444	   
  1445	vda_next
  1446	   
  1447	    Offset to the next verdaux entry, in bytes.
  1448	   
  1449	-------------------------------------------------------------------------------
  1450	
  1451	Version Requirements
  1452	
  1453	Symbol definitions are contained in the special section .gnu.version_r which
  1454	has a section type of SHT_GNU_verneed. The number of entries in this section is
  1455	contained in the DT_VERNEEDNUM entry of the Dynamic Section. The sh_link member
  1456	of the section header points to the section that contains the strings
  1457	referenced by this section.
  1458	
  1459	Figure 6-3. Version Needed Entries
  1460	
  1461	typedef struct {
  1462	        Elfxx_Half    vn_version;
  1463	        Elfxx_Half    vn_cnt;
  1464	        Elfxx_Word    vn_file;
  1465	        Elfxx_Word    vn_aux;
  1466	        Elfxx_Word    vn_next;
  1467	} Elfxx_Verneed;
  1468	
  1469	vn_version
  1470	   
  1471	    Version of structure. This value is currently set to 1, and will be reset
  1472	    if the versioning implementation is incompatibly altered.
  1473	   
  1474	vn_cnt
  1475	   
  1476	    Number of associated verneed array entries.
  1477	   
  1478	vn_file
  1479	   
  1480	    Offset to the file name string in the section header, in bytes.
  1481	   
  1482	vn_aux
  1483	   
  1484	    Offset to a corresponding entry in the vernaux array, in bytes.
  1485	   
  1486	vn_next
  1487	   
  1488	    Offset to the next verneed entry, in bytes.
  1489	   
  1490	Figure 6-4. Version Needed Auxiliary Entries
  1491	
  1492	typedef struct {
  1493	        Elfxx_Word    vna_hash;
  1494	        Elfxx_Half    vna_flags;
  1495	        Elfxx_Half    vna_other;
  1496	        Elfxx_Word    vna_name;
  1497	        Elfxx_Word    vna_next;
  1498	} Elfxx_Vernaux;
  1499	
  1500	vna_hash
  1501	   
  1502	    Dependency name hash value (ELF hash function).
  1503	   
  1504	vna_flags
  1505	   
  1506	    Dependency information flag bitmask.
  1507	   
  1508	vna_other
  1509	   
  1510	    Object file version identifier used in the .gnu.version symbol version
  1511	    array. Bit number 15 controls whether or not the object is hidden; if this
  1512	    bit is set, the object cannot be used and the static linker will ignore the
  1513	    symbol's presence in the object.
  1514	   
  1515	vna_name
  1516	   
  1517	    Offset to the dependency name string in the section header, in bytes.
  1518	   
  1519	vna_next
  1520	   
  1521	    Offset to the next vernaux entry, in bytes.
  1522	   
  1523	-------------------------------------------------------------------------------
  1524	
  1525	Startup Sequence
  1526	
  1527	When loading a sharable object, version definition data from the loaded object
  1528	is analyzed to assure that it meets the version requirements of the calling
  1529	object. The dynamic loader retrieves the entries in the caller's Elfxx_Verneed
  1530	array and attempts to find matching definition information in the loaded
  1531	Elfxx_Verdef table.
  1532	
  1533	Each object and dependency is tested in turn. If a symbol definition is
  1534	missing, the loader returns an error. A warning is issued instead of a hard
  1535	error when the vna_flags bit for VER_FLG_WEAK is set in the Elfxx_Vernaux
  1536	entry.
  1537	
  1538	When the versions referenced by undefined symbols in the loaded object are
  1539	found, version availability is certified. The test completes without error and
  1540	the object is made available.
  1541	
  1542	-------------------------------------------------------------------------------
  1543	
  1544	Symbol Resolution
  1545	
  1546	When symbol versioning is used in an object, relocations extend the performance
  1547	of definition testing beyond the simple match of symbol name strings: the
  1548	version of the reference must also equal the name of the definition. The same
  1549	index that is used in the symbol table can be referenced in the SHT_GNU_versym
  1550	section, and the value of this index is then used to acquire name data. The
  1551	corresponding requirement string is retrieved from the Elfxx_Verneed array, and
  1552	likewise, the corresponding definition string from the Elfxx_Verdef table.
  1553	
  1554	Bit number 15 of the version symbol controls whether or not the object is
  1555	hidden; if this bit is set, the object cannot be used and the static linker
  1556	will ignore the symbol's presence in the object.
  1557	
  1558	Results differ in the interaction of objects that variously use symbol
  1559	versioning.
  1560	
  1561	  * The object with the reference and the object with the definitions may both
  1562	    use versioning. All described matching is processed in this case. A fatal
  1563	    error is triggered when no matching definition can be found in the object
  1564	    whose name is the one referenced by the vn_name element in the
  1565	    Elfxx_Verneed entry.
  1566	   
  1567	  * The object with the reference may not use versioning, while the object with
  1568	    the definitions does. In this instance, only the definition with index
  1569	    numbers 1 and 2 will be used in the reference match, the same identified by
  1570	    the static linker as the base definition. In infrequent cases where the
  1571	    static linker was not used, as in calls to dlopen(), a version that does
  1572	    not have the base definition index is acceptable as long as it is the only
  1573	    version for which the symbol is defined.
  1574	   
  1575	  * The object with the reference may use versioning, but the object with the
  1576	    definitions specifies none. A matching symbol is accepted in this case. A
  1577	    fatal error is triggered in the unlikely event that a corruption in the
  1578	    required symbols list obscured an outdated object file and caused a match
  1579	    on the object filename in the Elfxx_Verneed entry.
  1580	   
  1581	  * Finally, both the object with the reference and the object with the
  1582	    definitions may not use versioning. The behavior in this instance defaults
  1583	    to pre-existing symbol rules.
  1584	   
  1585	III. Dynamic Linking
  1586	
  1587	Table of Contents
  1588	7. Program Loading and Dynamic Linking
  1589	8. Dynamic Entries
  1590	9. Program Interpreter
  1591	
  1592	-------------------------------------------------------------------------------
  1593	
  1594	Chapter 7. Program Loading and Dynamic Linking
  1595	
  1596	LSB-conforming implementations shall support the object file information and
  1597	system actions that create running programs as specified in the System V
  1598	Application Binary Interface, Edition 4.1 and the System V Application Binary
  1599	Interface - DRAFT - April 29, 1998 and as supplemented by this document and an
  1600	architecture-specific LSB specification.
  1601	
  1602	Any shared object that is loaded must contain sufficient DT_NEEDED records to
  1603	satisfy the symbols on the shared library.
  1604	
  1605	-------------------------------------------------------------------------------
  1606	
  1607	Chapter 8. Dynamic Entries
  1608	
  1609	-------------------------------------------------------------------------------
  1610	
  1611	ELF Dynamic Entries
  1612	
  1613	The following dynamic entries are defined in the System V Application Binary
  1614	Interface, Edition 4.1.
  1615	
  1616	DT_BIND_NOW
  1617	   
  1618	    Process relocations of object
  1619	   
  1620	DT_DEBUG
  1621	   
  1622	    For debugging; unspecified
  1623	   
  1624	DT_FINI
  1625	   
  1626	    Address of termination function
  1627	   
  1628	DT_HASH
  1629	   
  1630	    Address of symbol hash table
  1631	   
  1632	DT_HIPROC
  1633	   
  1634	    End of processor-specific
  1635	   
  1636	DT_INIT
  1637	   
  1638	    Address of init function
  1639	   
  1640	DT_JMPREL
  1641	   
  1642	    Address of PLT relocs
  1643	   
  1644	DT_LOPROC
  1645	   
  1646	    Start of processor-specific
  1647	   
  1648	DT_NEEDED
  1649	   
  1650	    Name of needed library
  1651	   
  1652	DT_NULL
  1653	   
  1654	    Marks end of dynamic section
  1655	   
  1656	DT_PLTREL
  1657	   
  1658	    Type of reloc in PLT
  1659	   
  1660	DT_PLTRELSZ
  1661	   
  1662	    Size in bytes of PLT relocs
  1663	   
  1664	DT_REL
  1665	   
  1666	    Address of Rel relocs
  1667	   
  1668	DT_RELA
  1669	   
  1670	    Address of Rela relocs
  1671	   
  1672	DT_RELAENT
  1673	   
  1674	    Size of one Rela reloc
  1675	   
  1676	DT_RELASZ
  1677	   
  1678	    Total size of Rela relocs
  1679	   
  1680	DT_RELENT
  1681	   
  1682	    Size of one Rel reloc
  1683	   
  1684	DT_RELSZ
  1685	   
  1686	    Total size of Rel relocs
  1687	   
  1688	DT_RPATH
  1689	   
  1690	    Library search path
  1691	   
  1692	DT_SONAME
  1693	   
  1694	    Name of shared object
  1695	   
  1696	DT_STRSZ
  1697	   
  1698	    Size of string table
  1699	   
  1700	DT_STRTAB
  1701	   
  1702	    Address of string table
  1703	   
  1704	DT_SYMBOLIC
  1705	   
  1706	    Start symbol search here
  1707	   
  1708	DT_SYMENT
  1709	   
  1710	    Size of one symbol table entry
  1711	   
  1712	DT_SYMTAB
  1713	   
  1714	    Address of symbol table
  1715	   
  1716	DT_TEXTREL
  1717	   
  1718	    Reloc might modify .text
  1719	   
  1720	 
  1721	
  1722	-------------------------------------------------------------------------------
  1723	
  1724	Linux Dynamic Entries
  1725	
  1726	The following dynamic entries are defined here.
  1727	
  1728	DT_ADDRRNGLO
  1729	   
  1730	DT_AUXILIARY
  1731	   
  1732	    Shared object to load before self
  1733	   
  1734	DT_FILTER
  1735	   
  1736	    Shared object to get values from
  1737	   
  1738	DT_FINI_ARRAY
  1739	   
  1740	    Array with addresses of fini fct
  1741	   
  1742	DT_FINI_ARRAYSZ
  1743	   
  1744	    Size in bytes of DT_FINI_ARRAY
  1745	   
  1746	DT_FLAGS_1
  1747	   
  1748	    State flags, see DF_1_* below
  1749	   
  1750	DT_HIOS
  1751	   
  1752	    End of OS-specific
  1753	   
  1754	DT_INIT_ARRAY
  1755	   
  1756	    Array with addresses of init fct
  1757	   
  1758	DT_INIT_ARRAYSZ
  1759	   
  1760	    Size in bytes of DT_INIT_ARRAY
  1761	   
  1762	DT_LOOS
  1763	   
  1764	    Start of OS-specific
  1765	   
  1766	DT_NUM
  1767	   
  1768	    Number used
  1769	   
  1770	DT_POSFLAG_1
  1771	   
  1772	    Flags for DT_* entries, effecting the following DT_* entry
  1773	   
  1774	DT_SYMINENT
  1775	   
  1776	    Entry size of syminfo
  1777	   
  1778	DT_SYMINFO
  1779	   
  1780	    syminfo table
  1781	   
  1782	DT_SYMINSZ
  1783	   
  1784	    Size of syminfo table (in bytes)
  1785	   
  1786	DT_VALRNGHI
  1787	   
  1788	DT_VALRNGLO
  1789	   
  1790	DT_VERDEF
  1791	   
  1792	    Address of version definition table
  1793	   
  1794	DT_VERDEFNUM
  1795	   
  1796	    Number of version definitions
  1797	   
  1798	DT_VERNEED
  1799	   
  1800	    Address of table with needed versions
  1801	   
  1802	DT_VERNEEDNUM
  1803	   
  1804	    Number of needed versions
  1805	   
  1806	DT_VERSYM
  1807	   
  1808	    GNU Symbol versioning
  1809	   
  1810	 
  1811	
  1812	-------------------------------------------------------------------------------
  1813	
  1814	Chapter 9. Program Interpreter
  1815	
  1816	-------------------------------------------------------------------------------
  1817	
  1818	The Program Interpreter is specified in the appropriate architecture-specific
  1819	LSB specification.
  1820	
  1821	IV. Base Libraries
  1822	
  1823	Table of Contents
  1824	10. Libraries
  1825	
  1826	-------------------------------------------------------------------------------
  1827	
  1828	Chapter 10. Libraries
  1829	
  1830	An LSB-conforming implementation shall support some base libraries which
  1831	provide interfaces for accessing the operating system, processor and other
  1832	hardware in the system.[2]
  1833	
  1834	-------------------------------------------------------------------------------
  1835	
  1836	Interfaces for libc
  1837	
  1838	The behavior of the interfaces in this library is specified by the following
  1839	standards.
  1840	
  1841	ISO/IEC 9899: 1999, Programming Languages --C[3]                               
  1842	Large File Support[4]                                                          
  1843	Linux Standard Base[5]                                                         
  1844	IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996][6]                                 
  1845	CAE Specification, February 1997, Networking Services (XNS), Issue 5 (ISBN:    
  1846	1-85912-165-9, C523)[7]                                                        
  1847	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  1848	(ISBN: 1-85912-181-0, C606)[8]                                                 
  1849	System V Interface Definition, Issue 3[9]                                      
  1850	System V Interface Definition,Fourth Edition[10]                               
  1851	
  1852	-------------------------------------------------------------------------------
  1853	
  1854	RPC Interfaces
  1855	
  1856	Table 10-1. libc - RPC Interfaces Function Interfaces
  1857	
  1858	+-----------------------------------------------------------------------------------+
  1859	|authnone_create   |svcerr_auth       |xdr_bytes  |xdr_opaque        |xdr_u_short   |
  1860	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1861	|                  |                  |[9]        |                  |              |
  1862	|------------------+------------------+-----------+------------------+--------------|
  1863	|clnt_create       |svcerr_decode     |xdr_callhdr|xdr_opaque_auth   |xdr_union     |
  1864	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1865	|                  |                  |[9]        |                  |              |
  1866	|------------------+------------------+-----------+------------------+--------------|
  1867	|clnt_pcreateerror |svcerr_noproc     |xdr_callmsg|xdr_pointer       |xdr_vector    |
  1868	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1869	|                  |                  |[9]        |                  |              |
  1870	|------------------+------------------+-----------+------------------+--------------|
  1871	|clnt_perrno       |svcerr_noprog     |xdr_char   |xdr_reference     |xdr_void      |
  1872	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1873	|                  |                  |[9]        |                  |              |
  1874	|------------------+------------------+-----------+------------------+--------------|
  1875	|clnt_perror       |svcerr_progvers   |xdr_double |xdr_rejected_reply|xdr_wrapstring|
  1876	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1877	|                  |                  |[9]        |                  |              |
  1878	|------------------+------------------+-----------+------------------+--------------|
  1879	|clnt_spcreateerror|svcerr_systemerr  |xdr_enum   |xdr_replymsg      |xdrmem_create |
  1880	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1881	|                  |                  |[9]        |                  |              |
  1882	|------------------+------------------+-----------+------------------+--------------|
  1883	|clnt_sperrno      |svcerr_weakauth   |xdr_float  |xdr_short         |xdrrec_create |
  1884	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1885	|                  |                  |[9]        |                  |              |
  1886	|------------------+------------------+-----------+------------------+--------------|
  1887	|clnt_sperror      |xdr_accepted_reply|xdr_free   |xdr_string        |xdrrec_eof    |
  1888	|(GLIBC_2.0)[10]   |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]|
  1889	|                  |                  |[9]        |                  |              |
  1890	|------------------+------------------+-----------+------------------+--------------|
  1891	|key_decryptsession|xdr_array         |xdr_int    |xdr_u_char        |              |
  1892	|(GLIBC_2.1)[9]    |(GLIBC_2.1)[9]    |(GLIBC_2.1)|(GLIBC_2.1)[9]    |              |
  1893	|                  |                  |[9]        |                  |              |
  1894	|------------------+------------------+-----------+------------------+--------------|
  1895	|svc_getreqset     |xdr_bool          |xdr_long   |xdr_u_long        |              |
  1896	|(GLIBC_2.0)[9]    |(GLIBC_2.0)[9]    |(GLIBC_2.0)|(GLIBC_2.0)[9]    |              |
  1897	|                  |                  |[9]        |                  |              |
  1898	+-----------------------------------------------------------------------------------+
  1899	-------------------------------------------------------------------------------
  1900	
  1901	System Calls
  1902	
  1903	Table 10-2. libc - System Calls Function Interfaces
  1904	
  1905	+-----------------------------------------------------------------------------+
  1906	|__fxstat    |fchown        |getwd        |putmsg(GLIBC_2.0)[8]  |setrlimit   |
  1907	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1908	|[5]         |              |[8]          |                      |[8]         |
  1909	|------------+--------------+-------------+----------------------+------------|
  1910	|__getpgid   |fcntl         |initgroups   |pwrite(GLIBC_2.0)[8]  |setsid      |
  1911	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1912	|[5]         |              |[5]          |                      |[8]         |
  1913	|------------+--------------+-------------+----------------------+------------|
  1914	|__lxstat    |fdatasync     |ioctl        |read(GLIBC_2.0)[8]    |setuid      |
  1915	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1916	|[5]         |              |[8]          |                      |[8]         |
  1917	|------------+--------------+-------------+----------------------+------------|
  1918	|__xmknod    |fdetach       |kill         |readdir(GLIBC_2.0)[8] |sleep       |
  1919	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1920	|[5]         |              |[5]          |                      |[8]         |
  1921	|------------+--------------+-------------+----------------------+------------|
  1922	|__xstat     |flock         |killpg       |readlink(GLIBC_2.0)[8]|statfs      |
  1923	|(GLIBC_2.0) |(GLIBC_2.0)[5]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1924	|[5]         |              |[8]          |                      |[5]         |
  1925	|------------+--------------+-------------+----------------------+------------|
  1926	|access      |fork          |lchown       |readv(GLIBC_2.0)[8]   |statvfs     |
  1927	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1928	|[8]         |              |[8]          |                      |[8]         |
  1929	|------------+--------------+-------------+----------------------+------------|
  1930	|acct        |fstatfs       |link         |rename(GLIBC_2.0)[8]  |stime       |
  1931	|(GLIBC_2.0) |(GLIBC_2.0)[5]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1932	|[5]         |              |[8]          |                      |[5]         |
  1933	|------------+--------------+-------------+----------------------+------------|
  1934	|alarm       |fsync         |lockf        |rmdir(GLIBC_2.0)[8]   |symlink     |
  1935	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1936	|[8]         |              |[8]          |                      |[8]         |
  1937	|------------+--------------+-------------+----------------------+------------|
  1938	|brk         |ftime         |lseek        |sbrk(GLIBC_2.0)[8]    |sync        |
  1939	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1940	|[8]         |              |[8]          |                      |[8]         |
  1941	|------------+--------------+-------------+----------------------+------------|
  1942	|chdir       |ftruncate     |mkdir        |sched_get_priority_max|sysconf     |
  1943	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1944	|[8]         |              |[8]          |                      |[8]         |
  1945	|------------+--------------+-------------+----------------------+------------|
  1946	|chmod       |getcontext    |mkfifo       |sched_get_priority_min|time        |
  1947	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1948	|[8]         |              |[8]          |                      |[8]         |
  1949	|------------+--------------+-------------+----------------------+------------|
  1950	|chown       |getegid       |mlock        |sched_getparam        |times       |
  1951	|(GLIBC_2.1) |(GLIBC_2.1)[8]|(GLIBC_2.1)  |(GLIBC_2.1)[8]        |(GLIBC_2.1) |
  1952	|[8]         |              |[8]          |                      |[8]         |
  1953	|------------+--------------+-------------+----------------------+------------|
  1954	|chroot      |geteuid       |mlockall     |sched_getscheduler    |truncate    |
  1955	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1956	|[8]         |              |[8]          |                      |[8]         |
  1957	|------------+--------------+-------------+----------------------+------------|
  1958	|clock       |getgid        |mmap         |sched_rr_get_interval |ulimit      |
  1959	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1960	|[8]         |              |[8]          |                      |[8]         |
  1961	|------------+--------------+-------------+----------------------+------------|
  1962	|close       |getgroups     |mprotect     |sched_setparam        |umask       |
  1963	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1964	|[8]         |              |[8]          |                      |[8]         |
  1965	|------------+--------------+-------------+----------------------+------------|
  1966	|closedir    |getitimer     |msync        |sched_setscheduler    |uname       |
  1967	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |(GLIBC_2.0)[8]        |(GLIBC_2.0) |
  1968	|[8]         |              |[8]          |                      |[8]         |
  1969	|------------+--------------+-------------+----------------------+------------|
  1970	|creat       |getloadavg    |munlock      |sched_yield(GLIBC_2.0)|unlink      |
  1971	|(GLIBC_2.0) |(GLIBC_2.0)[5]|(GLIBC_2.0)  |[8]                   |(GLIBC_2.0) |
  1972	|[8]         |              |[8]          |                      |[8]         |
  1973	|------------+--------------+-------------+----------------------+------------|
  1974	|dup         |getmsg        |munlockall   |select(GLIBC_2.0)[7]  |utime       |
  1975	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1976	|[8]         |              |[8]          |                      |[8]         |
  1977	|------------+--------------+-------------+----------------------+------------|
  1978	|dup2        |getpagesize   |munmap       |setcontext(GLIBC_2.0) |utimes      |
  1979	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |[8]                   |(GLIBC_2.0) |
  1980	|[8]         |              |[8]          |                      |[8]         |
  1981	|------------+--------------+-------------+----------------------+------------|
  1982	|execl       |getpgid       |nanosleep    |setegid(GLIBC_2.0)[5] |vfork       |
  1983	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1984	|[8]         |              |[8]          |                      |[8]         |
  1985	|------------+--------------+-------------+----------------------+------------|
  1986	|execle      |getpgrp       |nice         |seteuid(GLIBC_2.0)[5] |wait        |
  1987	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1988	|[8]         |              |[8]          |                      |[8]         |
  1989	|------------+--------------+-------------+----------------------+------------|
  1990	|execlp      |getpid        |open         |setgid(GLIBC_2.0)[8]  |wait3       |
  1991	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  1992	|[8]         |              |[8]          |                      |[8]         |
  1993	|------------+--------------+-------------+----------------------+------------|
  1994	|execv       |getppid       |opendir      |setitimer(GLIBC_2.0)  |wait4       |
  1995	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |[8]                   |(GLIBC_2.0) |
  1996	|[8]         |              |[8]          |                      |[5]         |
  1997	|------------+--------------+-------------+----------------------+------------|
  1998	|execve      |getpriority   |pathconf     |setpgid(GLIBC_2.0)[8] |waitid      |
  1999	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  2000	|[8]         |              |[8]          |                      |[8]         |
  2001	|------------+--------------+-------------+----------------------+------------|
  2002	|execvp      |getrlimit     |pause        |setpgrp(GLIBC_2.0)[8] |waitpid     |
  2003	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  2004	|[8]         |              |[8]          |                      |[8]         |
  2005	|------------+--------------+-------------+----------------------+------------|
  2006	|exit        |getrusage     |pipe         |setpriority(GLIBC_2.0)|write       |
  2007	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |[8]                   |(GLIBC_2.0) |
  2008	|[8]         |              |[8]          |                      |[8]         |
  2009	|------------+--------------+-------------+----------------------+------------|
  2010	|fchdir      |getsid        |poll         |setregid(GLIBC_2.0)[8]|writev      |
  2011	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |(GLIBC_2.0) |
  2012	|[8]         |              |[8]          |                      |[8]         |
  2013	|------------+--------------+-------------+----------------------+------------|
  2014	|fchmod      |getuid        |pread        |setreuid(GLIBC_2.0)[8]|            |
  2015	|(GLIBC_2.0) |(GLIBC_2.0)[8]|(GLIBC_2.0)  |                      |            |
  2016	|[8]         |              |[8]          |                      |            |
  2017	+-----------------------------------------------------------------------------+
  2018	-------------------------------------------------------------------------------
  2019	
  2020	Standard I/O
  2021	
  2022	Table 10-3. libc - Standard I/O Function Interfaces
  2023	
  2024	+-----------------------------------------------------------------------------+
  2025	|_IO_feof       |fgetpos        |fsetpos         |putc(GLIBC_2.0) |snprintf   |
  2026	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |[8]             |(GLIBC_2.0)|
  2027	|               |               |                |                |[8]        |
  2028	|---------------+---------------+----------------+----------------+-----------|
  2029	|_IO_getc       |fgets          |fstatvfs        |putc_unlocked   |sprintf    |
  2030	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2031	|               |               |                |                |[8]        |
  2032	|---------------+---------------+----------------+----------------+-----------|
  2033	|_IO_putc       |fgetwc_unlocked|ftell(GLIBC_2.0)|putchar         |sscanf     |
  2034	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2035	|               |               |                |                |[8]        |
  2036	|---------------+---------------+----------------+----------------+-----------|
  2037	|_IO_puts       |fileno         |ftello          |putchar_unlocked|telldir    |
  2038	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2039	|               |               |                |                |[8]        |
  2040	|---------------+---------------+----------------+----------------+-----------|
  2041	|alphasort      |flockfile      |fwrite          |puts(GLIBC_2.0) |tempnam    |
  2042	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |[8]             |(GLIBC_2.0)|
  2043	|               |               |                |                |[8]        |
  2044	|---------------+---------------+----------------+----------------+-----------|
  2045	|clearerr       |fopen          |getc(GLIBC_2.0) |putw(GLIBC_2.0) |ungetc     |
  2046	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |[8]             |[8]             |(GLIBC_2.0)|
  2047	|               |               |                |                |[8]        |
  2048	|---------------+---------------+----------------+----------------+-----------|
  2049	|ctermid        |fprintf        |getc_unlocked   |remove          |vasprintf  |
  2050	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2051	|               |               |                |                |[5]        |
  2052	|---------------+---------------+----------------+----------------+-----------|
  2053	|fclose         |fputc          |getchar         |rewind          |vdprintf   |
  2054	|(GLIBC_2.1)[8] |(GLIBC_2.1)[8] |(GLIBC_2.1)[8]  |(GLIBC_2.1)[8]  |(GLIBC_2.1)|
  2055	|               |               |                |                |[5]        |
  2056	|---------------+---------------+----------------+----------------+-----------|
  2057	|fdopen         |fputs          |getchar_unlocked|rewinddir       |vfprintf   |
  2058	|(GLIBC_2.1)[8] |(GLIBC_2.1)[8] |(GLIBC_2.1)[8]  |(GLIBC_2.1)[8]  |(GLIBC_2.1)|
  2059	|               |               |                |                |[8]        |
  2060	|---------------+---------------+----------------+----------------+-----------|
  2061	|feof(GLIBC_2.0)|fread          |gets(GLIBC_2.0) |scanf(GLIBC_2.0)|vprintf    |
  2062	|[8]            |(GLIBC_2.0)[8] |[8]             |[8]             |(GLIBC_2.0)|
  2063	|               |               |                |                |[8]        |
  2064	|---------------+---------------+----------------+----------------+-----------|
  2065	|ferror         |freopen        |getw(GLIBC_2.0) |seekdir         |vsnprintf  |
  2066	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2067	|               |               |                |                |[8]        |
  2068	|---------------+---------------+----------------+----------------+-----------|
  2069	|fflush         |fscanf         |pclose          |setbuf          |vsprintf   |
  2070	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2071	|               |               |                |                |[8]        |
  2072	|---------------+---------------+----------------+----------------+-----------|
  2073	|fflush_unlocked|fseek          |popen(GLIBC_2.0)|setbuffer       |wprintf    |
  2074	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |[8]             |(GLIBC_2.0)[5]  |(GLIBC_2.0)|
  2075	|               |               |                |                |[3]        |
  2076	|---------------+---------------+----------------+----------------+-----------|
  2077	|fgetc          |fseeko         |printf          |setvbuf         |wscanf     |
  2078	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)|
  2079	|               |               |                |                |[3]        |
  2080	+-----------------------------------------------------------------------------+
  2081	-------------------------------------------------------------------------------
  2082	
  2083	Data Symbols
  2084	
  2085	Table 10-4. libc - Standard I/O Data Interfaces
  2086	
  2087	+--------------------------------+
  2088	|stderr[8]|stdin[8]|stdout[8]| | |
  2089	+--------------------------------+
  2090	-------------------------------------------------------------------------------
  2091	
  2092	Signal Handling
  2093	
  2094	Table 10-5. libc - Signal Handling Function Interfaces
  2095	
  2096	+-----------------------------------------------------------------------------+
  2097	|__libc_current_sigrtmax|sigaddset   |sighold      |sigpause    |sigsuspend   |
  2098	|(GLIBC_2.1)[5]         |(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1) |(GLIBC_2.1)  |
  2099	|                       |[8]         |[8]          |[8]         |[8]          |
  2100	|-----------------------+------------+-------------+------------+-------------|
  2101	|__libc_current_sigrtmin|sigaltstack |sigignore    |sigpending  |sigtimedwait |
  2102	|(GLIBC_2.1)[5]         |(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1) |(GLIBC_2.1)  |
  2103	|                       |[8]         |[8]          |[8]         |[8]          |
  2104	|-----------------------+------------+-------------+------------+-------------|
  2105	|__sigsetjmp(GLIBC_2.0) |sigandset   |siginterrupt |sigprocmask |sigwait      |
  2106	|[5]                    |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |(GLIBC_2.0)  |
  2107	|                       |[5]         |[8]          |[8]         |[8]          |
  2108	|-----------------------+------------+-------------+------------+-------------|
  2109	|__sysv_signal          |sigblock    |sigisemptyset|sigqueue    |sigwaitinfo  |
  2110	|(GLIBC_2.0)[5]         |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |(GLIBC_2.0)  |
  2111	|                       |[5]         |[5]          |[8]         |[8]          |
  2112	|-----------------------+------------+-------------+------------+-------------|
  2113	|bsd_signal(GLIBC_2.0)  |sigdelset   |sigismember  |sigrelse    |             |
  2114	|[8]                    |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |             |
  2115	|                       |[8]         |[8]          |[8]         |             |
  2116	|-----------------------+------------+-------------+------------+-------------|
  2117	|psignal(GLIBC_2.0)[5]  |sigemptyset |siglongjmp   |sigreturn   |             |
  2118	|                       |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |             |
  2119	|                       |[8]         |[8]          |[5]         |             |
  2120	|-----------------------+------------+-------------+------------+-------------|
  2121	|raise(GLIBC_2.0)[8]    |sigfillset  |signal       |sigset      |             |
  2122	|                       |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |             |
  2123	|                       |[8]         |[8]          |[8]         |             |
  2124	|-----------------------+------------+-------------+------------+-------------|
  2125	|sigaction(GLIBC_2.0)[8]|siggetmask  |sigorset     |sigstack    |             |
  2126	|                       |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0) |             |
  2127	|                       |[5]         |[5]          |[8]         |             |
  2128	+-----------------------------------------------------------------------------+
  2129	-------------------------------------------------------------------------------
  2130	
  2131	Data Symbols
  2132	
  2133	Table 10-6. libc - Signal Handling Data Interfaces
  2134	
  2135	+------------------------+
  2136	|_sys_siglist[5] | | | | |
  2137	+------------------------+
  2138	-------------------------------------------------------------------------------
  2139	
  2140	Standard Library
  2141	
  2142	Table 10-7. libc - Standard Library Function Interfaces
  2143	
  2144	+-----------------------------------------------------------------------------+
  2145	|_Exit           |ecvt            |hcreate      |lsearch        |setstate     |
  2146	|(GLIBC_2.1.1)[3]|(GLIBC_2.1.1)[8]|(GLIBC_2.1.1)|(GLIBC_2.1.1)  |(GLIBC_2.1.1)|
  2147	|                |                |[8]          |[8]            |[8]          |
  2148	|----------------+----------------+-------------+---------------+-------------|
  2149	|__assert_fail   |erand48         |hdestroy     |makecontext    |srand        |
  2150	|(GLIBC_2.0)[5]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2151	|                |                |[8]          |               |[8]          |
  2152	|----------------+----------------+-------------+---------------+-------------|
  2153	|__cxa_atexit    |err(GLIBC_2.1.3)|hsearch      |malloc         |srand48      |
  2154	|(GLIBC_2.1.3)[5]|[5]             |(GLIBC_2.1.3)|(GLIBC_2.1.3)  |(GLIBC_2.1.3)|
  2155	|                |                |[8]          |[8]            |[8]          |
  2156	|----------------+----------------+-------------+---------------+-------------|
  2157	|__errno_location|error(GLIBC_2.0)|htonl        |memmem         |srandom      |
  2158	|(GLIBC_2.0)[5]  |[5]             |(GLIBC_2.0)  |(GLIBC_2.0)[5] |(GLIBC_2.0)  |
  2159	|                |                |[7]          |               |[8]          |
  2160	|----------------+----------------+-------------+---------------+-------------|
  2161	|__fpending      |errx(GLIBC_2.2) |htons        |mkstemp        |strtod       |
  2162	|(GLIBC_2.2)[5]  |[5]             |(GLIBC_2.2)  |(GLIBC_2.2)[8] |(GLIBC_2.2)  |
  2163	|                |                |[7]          |               |[8]          |
  2164	|----------------+----------------+-------------+---------------+-------------|
  2165	|__getpagesize   |fcvt(GLIBC_2.0) |imaxabs      |mktemp         |strtol       |
  2166	|(GLIBC_2.0)[5]  |[8]             |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2167	|                |                |[3]          |               |[8]          |
  2168	|----------------+----------------+-------------+---------------+-------------|
  2169	|__sysconf       |fmtmsg          |imaxdiv      |mrand48        |strtoul      |
  2170	|(GLIBC_2.2)[5]  |(GLIBC_2.2)[8]  |(GLIBC_2.2)  |(GLIBC_2.2)[8] |(GLIBC_2.2)  |
  2171	|                |                |[3]          |               |[8]          |
  2172	|----------------+----------------+-------------+---------------+-------------|
  2173	|_exit(GLIBC_2.0)|fnmatch         |inet_addr    |nftw(GLIBC_2.0)|swapcontext  |
  2174	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |[8]            |(GLIBC_2.0)  |
  2175	|                |                |[7]          |               |[8]          |
  2176	|----------------+----------------+-------------+---------------+-------------|
  2177	|_longjmp        |fpathconf       |inet_aton    |nrand48        |syslog       |
  2178	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2179	|                |                |[7]          |               |[8]          |
  2180	|----------------+----------------+-------------+---------------+-------------|
  2181	|_setjmp         |free(GLIBC_2.0) |inet_ntoa    |ntohl          |system       |
  2182	|(GLIBC_2.0)[8]  |[8]             |(GLIBC_2.0)  |(GLIBC_2.0)[7] |(GLIBC_2.0)  |
  2183	|                |                |[7]          |               |[5]          |
  2184	|----------------+----------------+-------------+---------------+-------------|
  2185	|a64l(GLIBC_2.0) |ftrylockfile    |initstate    |ntohs          |textdomain   |
  2186	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[7] |(GLIBC_2.0)  |
  2187	|                |                |[8]          |               |[5]          |
  2188	|----------------+----------------+-------------+---------------+-------------|
  2189	|abort(GLIBC_2.0)|ftw(GLIBC_2.0)  |insque       |openlog        |tfind        |
  2190	|[8]             |[8]             |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2191	|                |                |[8]          |               |[8]          |
  2192	|----------------+----------------+-------------+---------------+-------------|
  2193	|abs(GLIBC_2.0)  |funlockfile     |isatty       |perror         |tmpfile      |
  2194	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2195	|                |                |[8]          |               |[8]          |
  2196	|----------------+----------------+-------------+---------------+-------------|
  2197	|atexit          |gcvt(GLIBC_2.0) |isblank      |posix_memalign |tmpnam       |
  2198	|(GLIBC_2.0)[8]  |[8]             |(GLIBC_2.0)  |(GLIBC_2.0)[6] |(GLIBC_2.0)  |
  2199	|                |                |[5]          |               |[8]          |
  2200	|----------------+----------------+-------------+---------------+-------------|
  2201	|atof(GLIBC_2.0) |getcwd          |isinf        |ptsname        |tsearch      |
  2202	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2203	|                |                |[3]          |               |[8]          |
  2204	|----------------+----------------+-------------+---------------+-------------|
  2205	|atoi(GLIBC_2.0) |getdate         |isinfl       |putenv         |ttyname      |
  2206	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2207	|                |                |[3]          |               |[8]          |
  2208	|----------------+----------------+-------------+---------------+-------------|
  2209	|atol(GLIBC_2.0) |getenv          |isnan        |qsort          |ttyname_r    |
  2210	|[8]             |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2211	|                |                |[3]          |               |[8]          |
  2212	|----------------+----------------+-------------+---------------+-------------|
  2213	|basename        |getlogin        |isnanf       |rand(GLIBC_2.0)|twalk        |
  2214	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |[8]            |(GLIBC_2.0)  |
  2215	|                |                |[3]          |               |[8]          |
  2216	|----------------+----------------+-------------+---------------+-------------|
  2217	|bindtextdomain  |getopt          |isnanl       |rand_r         |unlockpt     |
  2218	|(GLIBC_2.0)[5]  |(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2219	|                |                |[3]          |               |[8]          |
  2220	|----------------+----------------+-------------+---------------+-------------|
  2221	|bsearch         |getopt_long     |jrand48      |random         |usleep       |
  2222	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2223	|                |                |[8]          |               |[8]          |
  2224	|----------------+----------------+-------------+---------------+-------------|
  2225	|calloc          |getopt_long_only|l64a         |random_r       |verrx        |
  2226	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[5] |(GLIBC_2.0)  |
  2227	|                |                |[8]          |               |[5]          |
  2228	|----------------+----------------+-------------+---------------+-------------|
  2229	|closelog        |getsubopt       |labs         |realloc        |warn         |
  2230	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2231	|                |                |[8]          |               |[5]          |
  2232	|----------------+----------------+-------------+---------------+-------------|
  2233	|confstr         |gettimeofday    |ldiv         |realpath       |warnx        |
  2234	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2235	|                |                |[8]          |               |[5]          |
  2236	|----------------+----------------+-------------+---------------+-------------|
  2237	|cuserid         |glob(GLIBC_2.0) |lfind        |remque         |wordexp      |
  2238	|(GLIBC_2.0)[8]  |[8]             |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2239	|                |                |[8]          |               |[8]          |
  2240	|----------------+----------------+-------------+---------------+-------------|
  2241	|daemon          |glob64          |llabs        |seed48         |wordfree     |
  2242	|(GLIBC_2.0)[5]  |(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |(GLIBC_2.0)  |
  2243	|                |                |[3]          |               |[8]          |
  2244	|----------------+----------------+-------------+---------------+-------------|
  2245	|dirname         |globfree        |lldiv        |sethostid      |             |
  2246	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[5] |             |
  2247	|                |                |[3]          |               |             |
  2248	|----------------+----------------+-------------+---------------+-------------|
  2249	|div(GLIBC_2.0)  |globfree64      |longjmp      |sethostname    |             |
  2250	|[8]             |(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[5] |             |
  2251	|                |                |[8]          |               |             |
  2252	|----------------+----------------+-------------+---------------+-------------|
  2253	|drand48         |grantpt         |lrand48      |setlogmask     |             |
  2254	|(GLIBC_2.0)[8]  |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[8] |             |
  2255	|                |                |[8]          |               |             |
  2256	+-----------------------------------------------------------------------------+
  2257	-------------------------------------------------------------------------------
  2258	
  2259	Data Symbols
  2260	
  2261	Table 10-8. libc - Standard Library Data Interfaces
  2262	
  2263	+---------------------------------------------------------------+
  2264	|__environ[5]|_sys_errlist[5]|getdate_err[8]|opterr[5]|optopt[5]|
  2265	|------------+---------------+--------------+---------+---------|
  2266	|_environ[5] |environ[8]     |optarg[8]     |optind[5]|         |
  2267	+---------------------------------------------------------------+
  2268	-------------------------------------------------------------------------------
  2269	
  2270	Localization Functions
  2271	
  2272	Table 10-9. libc - Localization Functions Function Interfaces
  2273	
  2274	+------------------------------------------------------------------------------+
  2275	|__dcgettext     |catgets      |dcgettext     |iconv          |nl_langinfo     |
  2276	|(GLIBC_2.0)[5]  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |
  2277	|                |[8]          |              |               |                |
  2278	|----------------+-------------+--------------+---------------+----------------|
  2279	|catclose        |catopen      |gettext       |localeconv     |setlocale       |
  2280	|(GLIBC_2.0)[8]  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |
  2281	|                |[8]          |              |               |                |
  2282	+------------------------------------------------------------------------------+
  2283	-------------------------------------------------------------------------------
  2284	
  2285	Data Symbols
  2286	
  2287	Table 10-10. libc - Localization Functions Data Interfaces
  2288	
  2289	+----------------------------+
  2290	|_nl_msg_cat_cntr[5] | | | | |
  2291	+----------------------------+
  2292	-------------------------------------------------------------------------------
  2293	
  2294	Socket Interface
  2295	
  2296	Table 10-11. libc - Socket Interface Function Interfaces
  2297	
  2298	+------------------------------------------------------------------------------+
  2299	|accept(GLIBC_2.0) |gethostid      |listen       |sendmsg       |socketpair    |
  2300	|[7]               |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|(GLIBC_2.0)[7]|
  2301	|                  |               |[7]          |              |              |
  2302	|------------------+---------------+-------------+--------------+--------------|
  2303	|bind(GLIBC_2.0)[7]|gethostname    |recv         |sendto        |              |
  2304	|                  |(GLIBC_2.0)[7] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|              |
  2305	|                  |               |[7]          |              |              |
  2306	|------------------+---------------+-------------+--------------+--------------|
  2307	|bindresvport      |getpeername    |recvfrom     |setsockopt    |              |
  2308	|(GLIBC_2.0)[5]    |(GLIBC_2.0)[7] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|              |
  2309	|                  |               |[7]          |              |              |
  2310	|------------------+---------------+-------------+--------------+--------------|
  2311	|connect(GLIBC_2.0)|getsockname    |recvmsg      |shutdown      |              |
  2312	|[7]               |(GLIBC_2.0)[7] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|              |
  2313	|                  |               |[7]          |              |              |
  2314	|------------------+---------------+-------------+--------------+--------------|
  2315	|gethostbyname_r   |getsockopt     |send         |socket        |              |
  2316	|(GLIBC_2.1.2)[5]  |(GLIBC_2.1.2)  |(GLIBC_2.1.2)|(GLIBC_2.1.2) |              |
  2317	|                  |[7]            |[7]          |[7]           |              |
  2318	+------------------------------------------------------------------------------+
  2319	-------------------------------------------------------------------------------
  2320	
  2321	Data Symbols
  2322	
  2323	Table 10-12. libc - Socket Interface Data Interfaces
  2324	
  2325	+-------------------+
  2326	|h_errno[7] | | | | |
  2327	+-------------------+
  2328	-------------------------------------------------------------------------------
  2329	
  2330	Wide Characters
  2331	
  2332	Table 10-13. libc - Wide Characters Function Interfaces
  2333	
  2334	+-----------------------------------------------------------------------------+
  2335	|btowc          |mbsrtowcs     |wcpcpy         |wcsnlen        |wcstoull      |
  2336	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8]|(GLIBC_2.0)[5] |(GLIBC_2.0)[5] |(GLIBC_2.0)[3]|
  2337	|---------------+--------------+---------------+---------------+--------------|
  2338	|fgetwc         |mbstowcs      |wcpncpy        |wcsnrtombs     |wcstoumax     |
  2339	|(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|(GLIBC_2.2)[5] |(GLIBC_2.2)[5] |(GLIBC_2.2)[3]|
  2340	|---------------+--------------+---------------+---------------+--------------|
  2341	|fgetws         |mbtowc        |wcrtomb        |wcspbrk        |wcstouq       |
  2342	|(GLIBC_2.2)[3] |(GLIBC_2.2)[8]|(GLIBC_2.2)[8] |(GLIBC_2.2)[3] |(GLIBC_2.2)[5]|
  2343	|---------------+--------------+---------------+---------------+--------------|
  2344	|fputwc         |putwc         |wcscasecmp     |wcsrchr        |wcswcs        |
  2345	|(GLIBC_2.2)[3] |(GLIBC_2.2)[3]|(GLIBC_2.2)[5] |(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|
  2346	|---------------+--------------+---------------+---------------+--------------|
  2347	|fputws         |putwchar      |wcscat         |wcsrtombs      |wcswidth      |
  2348	|(GLIBC_2.2)[3] |(GLIBC_2.2)[3]|(GLIBC_2.2)[8] |(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|
  2349	|---------------+--------------+---------------+---------------+--------------|
  2350	|fwide          |swprintf      |wcschr         |wcsspn         |wcsxfrm       |
  2351	|(GLIBC_2.2)[3] |(GLIBC_2.2)[8]|(GLIBC_2.2)[8] |(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|
  2352	|---------------+--------------+---------------+---------------+--------------|
  2353	|fwprintf       |swscanf       |wcscmp         |wcsstr         |wctob         |
  2354	|(GLIBC_2.2)[5] |(GLIBC_2.2)[3]|(GLIBC_2.2)[8] |(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|
  2355	|---------------+--------------+---------------+---------------+--------------|
  2356	|fwscanf        |towctrans     |wcscoll        |wcstod         |wctomb        |
  2357	|(GLIBC_2.2)[3] |(GLIBC_2.2)[8]|(GLIBC_2.2)[8] |(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|
  2358	|---------------+--------------+---------------+---------------+--------------|
  2359	|getwc          |towlower      |wcscpy         |wcstof         |wctrans       |
  2360	|(GLIBC_2.2)[3] |(GLIBC_2.2)[3]|(GLIBC_2.2)[8] |(GLIBC_2.2)[3] |(GLIBC_2.2)[8]|
  2361	|---------------+--------------+---------------+---------------+--------------|
  2362	|getwchar       |towupper      |wcscspn        |wcstoimax      |wctype        |
  2363	|(GLIBC_2.2)[8] |(GLIBC_2.2)[8]|(GLIBC_2.2)[8] |(GLIBC_2.2)[3] |(GLIBC_2.2)[8]|
  2364	|---------------+--------------+---------------+---------------+--------------|
  2365	|iconv_close    |ungetwc       |wcsdup         |wcstok         |wcwidth       |
  2366	|(GLIBC_2.1)[8] |(GLIBC_2.1)[3]|(GLIBC_2.1)[5] |(GLIBC_2.1)[8] |(GLIBC_2.1)[8]|
  2367	|---------------+--------------+---------------+---------------+--------------|
  2368	|iconv_open     |vfwprintf     |wcsftime       |wcstol         |wmemchr       |
  2369	|(GLIBC_2.1)[8] |(GLIBC_2.1)[3]|(GLIBC_2.1)[3] |(GLIBC_2.1)[8] |(GLIBC_2.1)[8]|
  2370	|---------------+--------------+---------------+---------------+--------------|
  2371	|mblen          |vfwscanf      |wcslen         |wcstold        |wmemcmp       |
  2372	|(GLIBC_2.0)[8] |(GLIBC_2.0)[3]|(GLIBC_2.0)[8] |(GLIBC_2.0)[3] |(GLIBC_2.0)[8]|
  2373	|---------------+--------------+---------------+---------------+--------------|
  2374	|mbrlen         |vswprintf     |wcsncasecmp    |wcstoll        |wmemcpy       |
  2375	|(GLIBC_2.0)[8] |(GLIBC_2.0)[3]|(GLIBC_2.0)[5] |(GLIBC_2.0)[3] |(GLIBC_2.0)[8]|
  2376	|---------------+--------------+---------------+---------------+--------------|
  2377	|mbrtowc        |vswscanf      |wcsncat        |wcstombs       |wmemmove      |
  2378	|(GLIBC_2.0)[8] |(GLIBC_2.0)[3]|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]|
  2379	|---------------+--------------+---------------+---------------+--------------|
  2380	|mbsinit        |vwprintf      |wcsncmp        |wcstoq         |wmemset       |
  2381	|(GLIBC_2.0)[8] |(GLIBC_2.0)[3]|(GLIBC_2.0)[8] |(GLIBC_2.0)[5] |(GLIBC_2.0)[8]|
  2382	|---------------+--------------+---------------+---------------+--------------|
  2383	|mbsnrtowcs     |vwscanf       |wcsncpy        |wcstoul        |              |
  2384	|(GLIBC_2.0)[5] |(GLIBC_2.0)[3]|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |              |
  2385	+-----------------------------------------------------------------------------+
  2386	-------------------------------------------------------------------------------
  2387	
  2388	String Functions
  2389	
  2390	Table 10-14. libc - String Functions Function Interfaces
  2391	
  2392	+----------------------------------------------------------------------------+
  2393	|__mempcpy          |bzero        |strcasestr   |strncasecmp   |strtoimax    |
  2394	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2395	|                   |[8]          |[5]          |              |[3]          |
  2396	|-------------------+-------------+-------------+--------------+-------------|
  2397	|__rawmemchr        |ffs          |strcat       |strncat       |strtok       |
  2398	|(GLIBC_2.1)[5]     |(GLIBC_2.1)  |(GLIBC_2.1)  |(GLIBC_2.1)[8]|(GLIBC_2.1)  |
  2399	|                   |[8]          |[8]          |              |[8]          |
  2400	|-------------------+-------------+-------------+--------------+-------------|
  2401	|__stpcpy(GLIBC_2.0)|index        |strchr       |strncmp       |strtok_r     |
  2402	|[5]                |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2403	|                   |[8]          |[8]          |              |[5]          |
  2404	|-------------------+-------------+-------------+--------------+-------------|
  2405	|__strdup(GLIBC_2.0)|memccpy      |strcmp       |strncpy       |strtold      |
  2406	|[5]                |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2407	|                   |[8]          |[8]          |              |[3]          |
  2408	|-------------------+-------------+-------------+--------------+-------------|
  2409	|__strtod_internal  |memchr       |strcoll      |strndup       |strtoll      |
  2410	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)  |
  2411	|                   |[8]          |[8]          |              |[3]          |
  2412	|-------------------+-------------+-------------+--------------+-------------|
  2413	|__strtof_internal  |memcmp       |strcpy       |strnlen       |strtoq       |
  2414	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)  |
  2415	|                   |[8]          |[8]          |              |[5]          |
  2416	|-------------------+-------------+-------------+--------------+-------------|
  2417	|__strtok_r         |memcpy       |strcspn      |strpbrk       |strtoull     |
  2418	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2419	|                   |[8]          |[8]          |              |[3]          |
  2420	|-------------------+-------------+-------------+--------------+-------------|
  2421	|__strtol_internal  |memmove      |strdup       |strptime      |strtoumax    |
  2422	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2423	|                   |[8]          |[8]          |              |[3]          |
  2424	|-------------------+-------------+-------------+--------------+-------------|
  2425	|__strtold_internal |memrchr      |strerror     |strrchr       |strtouq      |
  2426	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2427	|                   |[5]          |[8]          |              |[5]          |
  2428	|-------------------+-------------+-------------+--------------+-------------|
  2429	|__strtoll_internal |memset       |strerror_r   |strsep        |strverscmp   |
  2430	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)  |
  2431	|                   |[8]          |[5]          |              |[5]          |
  2432	|-------------------+-------------+-------------+--------------+-------------|
  2433	|__strtoul_internal |rindex       |strfmon      |strsignal     |strxfrm      |
  2434	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[5]|(GLIBC_2.0)  |
  2435	|                   |[8]          |[8]          |              |[8]          |
  2436	|-------------------+-------------+-------------+--------------+-------------|
  2437	|__strtoull_internal|stpcpy       |strfry       |strspn        |swab         |
  2438	|(GLIBC_2.0)[5]     |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)  |
  2439	|                   |[5]          |[5]          |              |[8]          |
  2440	|-------------------+-------------+-------------+--------------+-------------|
  2441	|bcmp(GLIBC_2.0)[8] |stpncpy      |strftime     |strstr        |             |
  2442	|                   |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[8]|             |
  2443	|                   |[5]          |[8]          |              |             |
  2444	|-------------------+-------------+-------------+--------------+-------------|
  2445	|bcopy(GLIBC_2.0)[8]|strcasecmp   |strlen       |strtof        |             |
  2446	|                   |(GLIBC_2.0)  |(GLIBC_2.0)  |(GLIBC_2.0)[3]|             |
  2447	|                   |[8]          |[8]          |              |             |
  2448	+----------------------------------------------------------------------------+
  2449	-------------------------------------------------------------------------------
  2450	
  2451	IPC Functions
  2452	
  2453	Table 10-15. libc - IPC Functions Function Interfaces
  2454	
  2455	+-----------------------------------------------------------------------------+
  2456	|ftok(GLIBC_2.0)[8]|msgrcv(GLIBC_2.0) |semget(GLIBC_2.0) |shmctl(GLIBC_2.0) | |
  2457	|                  |[8]               |[8]               |[8]               | |
  2458	|------------------+------------------+------------------+------------------+-|
  2459	|msgctl(GLIBC_2.0) |msgsnd(GLIBC_2.0) |semop(GLIBC_2.0)  |shmdt(GLIBC_2.0)  | |
  2460	|[8]               |[8]               |[8]               |[8]               | |
  2461	|------------------+------------------+------------------+------------------+-|
  2462	|msgget(GLIBC_2.0) |semctl(GLIBC_2.0) |shmat(GLIBC_2.0)  |shmget(GLIBC_2.0) | |
  2463	|[8]               |[8]               |[8]               |[8]               | |
  2464	+-----------------------------------------------------------------------------+
  2465	-------------------------------------------------------------------------------
  2466	
  2467	Regular Expressions
  2468	
  2469	Table 10-16. libc - Regular Expressions Function Interfaces
  2470	
  2471	+-----------------------------------------------------------------------------+
  2472	|advance(GLIBC_2.0)|re_exec(GLIBC_2.0)|regerror          |regfree(GLIBC_2.0)| |
  2473	|[8]               |[8]               |(GLIBC_2.0)[8]    |[8]               | |
  2474	|------------------+------------------+------------------+------------------+-|
  2475	|re_comp(GLIBC_2.0)|regcomp(GLIBC_2.0)|regexec(GLIBC_2.0)|step(GLIBC_2.0)[8]| |
  2476	|[8]               |[8]               |[8]               |                  | |
  2477	+-----------------------------------------------------------------------------+
  2478	-------------------------------------------------------------------------------
  2479	
  2480	Data Symbols
  2481	
  2482	Table 10-17. libc - Regular Expressions Data Interfaces
  2483	
  2484	+---------------------------+
  2485	|loc1[8]|loc2[8]|locs[8]| | |
  2486	+---------------------------+
  2487	-------------------------------------------------------------------------------
  2488	
  2489	Character Type Functions
  2490	
  2491	Table 10-18. libc - Character Type Functions Function Interfaces
  2492	
  2493	+-----------------------------------------------------------------------------+
  2494	|__ctype_get_mb_cur_max|isdigit     |iswalnum     |iswlower      |toascii     |
  2495	|(GLIBC_2.0)[5]        |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0) |
  2496	|                      |[8]         |[8]          |              |[8]         |
  2497	|----------------------+------------+-------------+--------------+------------|
  2498	|_tolower(GLIBC_2.0)[8]|isgraph     |iswalpha     |iswprint      |tolower     |
  2499	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0) |
  2500	|                      |[8]         |[8]          |              |[8]         |
  2501	|----------------------+------------+-------------+--------------+------------|
  2502	|_toupper(GLIBC_2.0)[8]|islower     |iswblank     |iswpunct      |toupper     |
  2503	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0) |
  2504	|                      |[8]         |[5]          |              |[8]         |
  2505	|----------------------+------------+-------------+--------------+------------|
  2506	|isalnum(GLIBC_2.0)[8] |isprint     |iswcntrl     |iswspace      |            |
  2507	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|            |
  2508	|                      |[8]         |[8]          |              |            |
  2509	|----------------------+------------+-------------+--------------+------------|
  2510	|isalpha(GLIBC_2.0)[8] |ispunct     |iswctype     |iswupper      |            |
  2511	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|            |
  2512	|                      |[8]         |[5]          |              |            |
  2513	|----------------------+------------+-------------+--------------+------------|
  2514	|isascii(GLIBC_2.0)[8] |isspace     |iswdigit     |iswxdigit     |            |
  2515	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|            |
  2516	|                      |[8]         |[8]          |              |            |
  2517	|----------------------+------------+-------------+--------------+------------|
  2518	|iscntrl(GLIBC_2.0)[8] |isupper     |iswgraph     |isxdigit      |            |
  2519	|                      |(GLIBC_2.0) |(GLIBC_2.0)  |(GLIBC_2.0)[8]|            |
  2520	|                      |[8]         |[8]          |              |            |
  2521	+-----------------------------------------------------------------------------+
  2522	-------------------------------------------------------------------------------
  2523	
  2524	Data Symbols
  2525	
  2526	Table 10-19. libc - Character Type Functions Data Interfaces
  2527	
  2528	+------------------------------------------------------+
  2529	|__ctype_b[5]|__ctype_tolower[5]|__ctype_toupper[5]| | |
  2530	+------------------------------------------------------+
  2531	-------------------------------------------------------------------------------
  2532	
  2533	Time Manipulation
  2534	
  2535	Table 10-20. libc - Time Manipulation Function Interfaces
  2536	
  2537	+------------------------------------------------------------------------------+
  2538	|adjtime        |asctime_r      |difftime       |localtime       |tzset        |
  2539	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |
  2540	|               |               |               |                |[8]          |
  2541	|---------------+---------------+---------------+----------------+-------------|
  2542	|adjtimex       |ctime          |gmtime         |localtime_r     |ualarm       |
  2543	|(GLIBC_2.0)[5] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |(GLIBC_2.0)  |
  2544	|               |               |               |                |[8]          |
  2545	|---------------+---------------+---------------+----------------+-------------|
  2546	|asctime        |ctime_r        |gmtime_r       |mktime          |             |
  2547	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)[8]  |             |
  2548	+------------------------------------------------------------------------------+
  2549	-------------------------------------------------------------------------------
  2550	
  2551	Data Symbols
  2552	
  2553	Table 10-21. libc - Time Manipulation Data Interfaces
  2554	
  2555	+-----------------------------------------+
  2556	|__daylight[5]|__tzname[5]|timezone[8]| | |
  2557	|-------------+-----------+-----------+-+-|
  2558	|__timezone[5]|daylight[8]|tzname[8]  | | |
  2559	+-----------------------------------------+
  2560	-------------------------------------------------------------------------------
  2561	
  2562	Terminal Interface Functions
  2563	
  2564	Table 10-22. libc - Terminal Interface Functions Function Interfaces
  2565	
  2566	+----------------------------------------------------------------------------+
  2567	|cfgetispeed    |cfsetispeed    |tcdrain      |tcgetattr     |tcsendbreak    |
  2568	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)[8] |
  2569	|               |               |[8]          |              |               |
  2570	|---------------+---------------+-------------+--------------+---------------|
  2571	|cfgetospeed    |cfsetospeed    |tcflow       |tcgetpgrp     |tcsetattr      |
  2572	|(GLIBC_2.0)[8] |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)[8] |
  2573	|               |               |[8]          |              |               |
  2574	|---------------+---------------+-------------+--------------+---------------|
  2575	|cfmakeraw      |cfsetspeed     |tcflush      |tcgetsid      |tcsetpgrp      |
  2576	|(GLIBC_2.0)[5] |(GLIBC_2.0)[5] |(GLIBC_2.0)  |(GLIBC_2.0)[8]|(GLIBC_2.0)[8] |
  2577	|               |               |[8]          |              |               |
  2578	+----------------------------------------------------------------------------+
  2579	-------------------------------------------------------------------------------
  2580	
  2581	System Database Interface
  2582	
  2583	Table 10-23. libc - System Database Interface Function Interfaces
  2584	
  2585	+-----------------------------------------------------------------------------+
  2586	|endgrent      |getgrent         |getprotoent    |getutent     |sethostent    |
  2587	|(GLIBC_2.0)[8]|(GLIBC_2.0)[8]   |(GLIBC_2.0)[5] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|
  2588	|              |                 |               |[5]          |              |
  2589	|--------------+-----------------+---------------+-------------+--------------|
  2590	|endhostent    |getgrgid         |getpwent       |getutent_r   |setmntent     |
  2591	|(GLIBC_2.0)[7]|(GLIBC_2.0)[8]   |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[5]|
  2592	|              |                 |               |[5]          |              |
  2593	|--------------+-----------------+---------------+-------------+--------------|
  2594	|endnetent     |getgrnam         |getpwnam       |getutxent    |setnetent     |
  2595	|(GLIBC_2.0)[7]|(GLIBC_2.0)[8]   |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|
  2596	|              |                 |               |[8]          |              |
  2597	|--------------+-----------------+---------------+-------------+--------------|
  2598	|endprotoent   |gethostbyaddr    |getpwuid       |getutxid     |setprotoent   |
  2599	|(GLIBC_2.0)[7]|(GLIBC_2.0)[7]   |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|
  2600	|              |                 |               |[8]          |              |
  2601	|--------------+-----------------+---------------+-------------+--------------|
  2602	|endpwent      |gethostbyname    |getpwuid_r     |getutxline   |setpwent      |
  2603	|(GLIBC_2.0)[8]|(GLIBC_2.0)[5]   |(GLIBC_2.0)[8] |(GLIBC_2.0)  |(GLIBC_2.0)[8]|
  2604	|              |                 |               |[8]          |              |
  2605	|--------------+-----------------+---------------+-------------+--------------|
  2606	|endservent    |getnetbyaddr     |getservbyname  |pututxline   |setservent    |
  2607	|(GLIBC_2.0)[7]|(GLIBC_2.0)[7]   |(GLIBC_2.0)[5] |(GLIBC_2.0)  |(GLIBC_2.0)[7]|
  2608	|              |                 |               |[8]          |              |
  2609	|--------------+-----------------+---------------+-------------+--------------|
  2610	|endutent      |getprotobyname   |getservbyport  |setgrent     |setutent      |
  2611	|(GLIBC_2.0)[8]|(GLIBC_2.0)[5]   |(GLIBC_2.0)[7] |(GLIBC_2.0)  |(GLIBC_2.0)[5]|
  2612	|              |                 |               |[8]          |              |
  2613	|--------------+-----------------+---------------+-------------+--------------|
  2614	|endutxent     |getprotobynumber |getservent     |setgroups    |setutxent     |
  2615	|(GLIBC_2.1)[8]|(GLIBC_2.1)[7]   |(GLIBC_2.1)[5] |(GLIBC_2.1)  |(GLIBC_2.1)[8]|
  2616	|              |                 |               |[5]          |              |
  2617	+-----------------------------------------------------------------------------+
  2618	-------------------------------------------------------------------------------
  2619	
  2620	Language Support
  2621	
  2622	Table 10-24. libc - Language Support Function Interfaces
  2623	
  2624	+-----------------------------------------------------------------------------+
  2625	|__libc_start_main  |_obstack_begin    |_obstack_newchunk  |obstack_free    | |
  2626	|(GLIBC_2.0)[5]     |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]     |(GLIBC_2.0)[5]  | |
  2627	+-----------------------------------------------------------------------------+
  2628	-------------------------------------------------------------------------------
  2629	
  2630	Large File Support
  2631	
  2632	Table 10-25. libc - Large File Support Function Interfaces
  2633	
  2634	+----------------------------------------------------------------------------+
  2635	|__fxstat64     |fopen64       |ftello64       |mkstemp64     |readdir64     |
  2636	|(GLIBC_2.2)[5] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4]|
  2637	|---------------+--------------+---------------+--------------+--------------|
  2638	|__lxstat64     |freopen64     |ftruncate64    |mmap64        |tmpfile64     |
  2639	|(GLIBC_2.2)[5] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4]|
  2640	|---------------+--------------+---------------+--------------+--------------|
  2641	|__xstat64      |fseeko64      |ftw64          |nftw64        |truncate64    |
  2642	|(GLIBC_2.2)[5] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4] |(GLIBC_2.2)[4]|(GLIBC_2.2)[4]|
  2643	|---------------+--------------+---------------+--------------+--------------|
  2644	|alphasort64    |fsetpos64     |getrlimit64    |open64        |              |
  2645	|(GLIBC_2.1)[5] |(GLIBC_2.1)[4]|(GLIBC_2.1)[4] |(GLIBC_2.1)[4]|              |
  2646	|---------------+--------------+---------------+--------------+--------------|
  2647	|creat64        |fstatfs64     |lockf64        |pread64       |              |
  2648	|(GLIBC_2.1)[4] |(GLIBC_2.1)[4]|(GLIBC_2.1)[4] |(GLIBC_2.1)[4]|              |
  2649	|---------------+--------------+---------------+--------------+--------------|
  2650	|fgetpos64      |fstatvfs64    |lseek64        |pwrite64      |              |
  2651	|(GLIBC_2.1)[4] |(GLIBC_2.1)[4]|(GLIBC_2.1)[4] |(GLIBC_2.1)[4]|              |
  2652	+----------------------------------------------------------------------------+
  2653	-------------------------------------------------------------------------------
  2654	
  2655	libc - deprecated
  2656	
  2657	Table 10-26. libc - libc - deprecated Function Interfaces
  2658	
  2659	+-----------------------------------------------------------------------------+
  2660	|__bzero          |__sigpause        |__wcstol_internal |__wcstoul_internal | |
  2661	|(GLIBC_2.0)[5]   |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]     | |
  2662	|-----------------+------------------+------------------+-------------------+-|
  2663	|__mbrlen         |__wcstod_internal |__wcstold_internal|__wcstoull_internal| |
  2664	|(GLIBC_2.0)[5]   |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]     | |
  2665	|-----------------+------------------+------------------+-------------------+-|
  2666	|__secure_getenv  |__wcstof_internal |__wcstoll_internal|                   | |
  2667	|(GLIBC_2.0)[5]   |(GLIBC_2.0)[5]    |(GLIBC_2.0)[5]    |                   | |
  2668	+-----------------------------------------------------------------------------+
  2669	-------------------------------------------------------------------------------
  2670	
  2671	Data Symbols
  2672	
  2673	Table 10-27. libc - libc - deprecated Data Interfaces
  2674	
  2675	+-----------------------------------------------------------+
  2676	|_IO_2_1_stderr_[5]|_IO_2_1_stdin_[5]|_IO_2_1_stdout_[5]| | |
  2677	+-----------------------------------------------------------+
  2678	-------------------------------------------------------------------------------
  2679	
  2680	Data Definitions for libc
  2681	
  2682	-------------------------------------------------------------------------------
  2683	
  2684	assert.h
  2685	
  2686	#define assert(expr) /**/
  2687	-------------------------------------------------------------------------------
  2688	
  2689	ctype.h
  2690	
  2691	
  2692	enum
  2693	{
  2694	  _ISupper,
  2695	  _ISlower,
  2696	  _ISalpha,
  2697	  _ISdigit,
  2698	  _ISxdigit,
  2699	  _ISspace,
  2700	  _ISprint,
  2701	  _ISgraph,
  2702	  _ISblank,
  2703	  _IScntrl,
  2704	  _ISpunct,
  2705	  _ISalnum
  2706	}
  2707	 ;
  2708	-------------------------------------------------------------------------------
  2709	
  2710	dirent.h
  2711	
  2712	
  2713	typedef struct __dirstream DIR;
  2714	
  2715	
  2716	
  2717	struct dirent
  2718	{
  2719	  long d_ino;
  2720	  off_t d_off;
  2721	  unsigned short d_reclen;
  2722	  char d_name[1];
  2723	}
  2724	 ;
  2725	
  2726	struct dirent64
  2727	{
  2728	  uint64_t d_ino;
  2729	  int64_t d_off;
  2730	  unsigned short d_reclen;
  2731	  unsigned char d_type;
  2732	  char d_name[1];
  2733	}
  2734	 ;
  2735	-------------------------------------------------------------------------------
  2736	
  2737	errno.h
  2738	
  2739	#define errno   (*__errno_location())
  2740	
  2741	#define EPERM   1
  2742	#define ECHILD  10
  2743	#define ENETDOWN        100
  2744	#define ENETUNREACH     101
  2745	#define ENETRESET       102
  2746	#define ECONNABORTED    103
  2747	#define ECONNRESET      104
  2748	#define ENOBUFS 105
  2749	#define EISCONN 106
  2750	#define ENOTCONN        107
  2751	#define ESHUTDOWN       108
  2752	#define ETOOMANYREFS    109
  2753	#define EAGAIN  11
  2754	#define ETIMEDOUT       110
  2755	#define ECONNREFUSED    111
  2756	#define EHOSTDOWN       112
  2757	#define EHOSTUNREACH    113
  2758	#define EALREADY        114
  2759	#define EINPROGRESS     115
  2760	#define ESTALE  116
  2761	#define EUCLEAN 117
  2762	#define ENOTNAM 118
  2763	#define ENAVAIL 119
  2764	#define ENOMEM  12
  2765	#define EISNAM  120
  2766	#define EREMOTEIO       121
  2767	#define EDQUOT  122
  2768	#define ENOMEDIUM       123
  2769	#define EMEDIUMTYPE     124
  2770	#define ECANCELED       125
  2771	#define EACCES  13
  2772	#define EFAULT  14
  2773	#define ENOTBLK 15
  2774	#define EBUSY   16
  2775	#define EEXIST  17
  2776	#define EXDEV   18
  2777	#define ENODEV  19
  2778	#define ENOENT  2
  2779	#define ENOTDIR 20
  2780	#define EISDIR  21
  2781	#define EINVAL  22
  2782	#define ENFILE  23
  2783	#define EMFILE  24
  2784	#define ENOTTY  25
  2785	#define ETXTBSY 26
  2786	#define EFBIG   27
  2787	#define ENOSPC  28
  2788	#define ESPIPE  29
  2789	#define ESRCH   3
  2790	#define EROFS   30
  2791	#define EMLINK  31
  2792	#define EPIPE   32
  2793	#define EDOM    33
  2794	#define ERANGE  34
  2795	#define EDEADLK 35
  2796	#define ENAMETOOLONG    36
  2797	#define ENOLCK  37
  2798	#define ENOSYS  38
  2799	#define ENOTEMPTY       39
  2800	#define EINTR   4
  2801	#define ELOOP   40
  2802	#define ENOMSG  42
  2803	#define EIDRM   43
  2804	#define ECHRNG  44
  2805	#define EL2NSYNC        45
  2806	#define EL3HLT  46
  2807	#define EL3RST  47
  2808	#define ELNRNG  48
  2809	#define EUNATCH 49
  2810	#define ENOANO  55
  2811	#define EBADRQC 56
  2812	#define EBADSLT 57
  2813	#define EBFONT  59
  2814	#define ENXIO   6
  2815	#define ENOSTR  60
  2816	#define ENODATA 61
  2817	#define ETIME   62
  2818	#define ENOSR   63
  2819	#define ENONET  64
  2820	#define ENOPKG  65
  2821	#define EREMOTE 66
  2822	#define ENOLINK 67
  2823	#define EADV    68
  2824	#define ESRMNT  69
  2825	#define E2BIG   7
  2826	#define ECOMM   70
  2827	#define EPROTO  71
  2828	#define EMULTIHOP       72
  2829	#define EDOTDOT 73
  2830	#define EBADMSG 74
  2831	#define EOVERFLOW       75
  2832	#define ENOTUNIQ        76
  2833	#define EBADFD  77
  2834	#define EREMCHG 78
  2835	#define ELIBACC 79
  2836	#define ENOEXEC 8
  2837	#define ELIBBAD 80
  2838	#define ELIBSCN 81
  2839	#define ELIBMAX 82
  2840	#define ELIBEXEC        83
  2841	#define EILSEQ  84
  2842	#define ERESTART        85
  2843	#define ESTRPIPE        86
  2844	#define EUSERS  87
  2845	#define ENOTSOCK        88
  2846	#define EDESTADDRREQ    89
  2847	#define EBADF   9
  2848	#define EMSGSIZE        90
  2849	#define EPROTOTYPE      91
  2850	#define ENOPROTOOPT     92
  2851	#define EPROTONOSUPPORT 93
  2852	#define ESOCKTNOSUPPORT 94
  2853	#define EOPNOTSUPP      95
  2854	#define EPFNOSUPPORT    96
  2855	#define EAFNOSUPPORT    97
  2856	#define EADDRINUSE      98
  2857	#define EADDRNOTAVAIL   99
  2858	#define EWOULDBLOCK     EAGAIN
  2859	#define EDEADLOCK       EDEADLK
  2860	#define ENOTSUP EOPNOTSUPP
  2861	-------------------------------------------------------------------------------
  2862	
  2863	fcntl.h
  2864	
  2865	#define O_RDONLY        00
  2866	#define O_ACCMODE       0003
  2867	#define O_WRONLY        01
  2868	#define O_CREAT 0100
  2869	#define O_TRUNC 01000
  2870	#define O_SYNC  010000
  2871	#define O_RDWR  02
  2872	#define O_EXCL  0200
  2873	#define O_APPEND        02000
  2874	#define O_ASYNC 020000
  2875	#define O_NOCTTY        0400
  2876	#define O_NONBLOCK      04000
  2877	#define O_NDELAY        04000
  2878	
  2879	
  2880	
  2881	#define F_DUPFD 0
  2882	#define F_RDLCK 0
  2883	#define F_WRLCK 1
  2884	#define F_GETFD 1
  2885	#define F_SETFD 2
  2886	#define F_UNLCK 2
  2887	#define F_GETFL 3
  2888	#define F_SETFL 4
  2889	#define F_GETLK 5
  2890	#define F_SETLK 6
  2891	#define F_SETLKW        7
  2892	#define F_SETOWN        8
  2893	#define F_GETOWN        9
  2894	-------------------------------------------------------------------------------
  2895	
  2896	fnmatch.h
  2897	
  2898	
  2899	#define FNM_PATHNAME    (1<<0)
  2900	#define FNM_NOESCAPE    (1<<1)
  2901	#define FNM_PERIOD      (1<<2)
  2902	#define FNM_NOMATCH     1
  2903	-------------------------------------------------------------------------------
  2904	
  2905	ftw.h
  2906	
  2907	
  2908	enum
  2909	{
  2910	  FTW_F,
  2911	  FTW_D,
  2912	  FTW_DNR,
  2913	  FTW_NS,
  2914	  FTW_SL,
  2915	  FTW_DP,
  2916	  FTW_SLN
  2917	}
  2918	 ;
  2919	
  2920	#define FTW_D   FTW_D
  2921	#define FTW_DNR FTW_DNR
  2922	#define FTW_DP  FTW_DP
  2923	#define FTW_F   FTW_F
  2924	#define FTW_NS  FTW_NS
  2925	#define FTW_SL  FTW_SL
  2926	#define FTW_SLN FTW_SLN
  2927	
  2928	enum
  2929	{
  2930	  FTW_PHYS,
  2931	  FTW_MOUNT,
  2932	  FTW_CHDIR,
  2933	  FTW_DEPTH
  2934	}
  2935	 ;
  2936	
  2937	
  2938	struct FTW
  2939	{
  2940	  int base;
  2941	  int level;
  2942	}
  2943	 ;
  2944	
  2945	
  2946	typedef int (*__ftw_func_t) (char *__filename, struct stat * __status,
  2947	                             int __flag);
  2948	
  2949	typedef int (*__ftw64_func_t) (char *__filename, struct stat64 * __status,
  2950	                               int __flag);
  2951	
  2952	typedef int (*__nftw_func_t) (char *__filename, struct stat * __status,
  2953	                              int __flag, struct FTW * __info);
  2954	
  2955	typedef int (*__nftw64_func_t) (char *__filename, struct stat64 * __status,
  2956	                                int __flag, struct FTW * __info);
  2957	-------------------------------------------------------------------------------
  2958	
  2959	glob.h
  2960	
  2961	
  2962	typedef struct
  2963	{
  2964	  __size_t gl_pathc;
  2965	  char **gl_pathv;
  2966	  __size_t gl_offs;
  2967	  int gl_flags;
  2968	  void (*gl_closedir) ();
  2969	  Unknown Type:".." (*gl_readdir) ();
  2970	  void *(*gl_opendir) ();
  2971	  int (*gl_lstat) ();
  2972	  int (*gl_stat) ();
  2973	}
  2974	glob_t;
  2975	
  2976	
  2977	typedef struct
  2978	{
  2979	  __size_t gl_pathc;
  2980	  char **gl_pathv;
  2981	  __size_t gl_offs;
  2982	  int gl_flags;
  2983	  void (*gl_closedir) ();
  2984	  Unknown Type:".." (*gl_readdir) ();
  2985	  void *(*gl_opendir) ();
  2986	  int (*gl_lstat) ();
  2987	  int (*gl_stat) ();
  2988	}
  2989	glob64_t;
  2990	
  2991	
  2992	#define GLOB_ERR        (1<<0)
  2993	#define GLOB_MARK       (1<<1)
  2994	#define GLOB_BRACE      (1<<10)
  2995	#define GLOB_NOMAGIC    (1<<11)
  2996	#define GLOB_TILDE      (1<<12)
  2997	#define GLOB_ONLYDIR    (1<<13)
  2998	#define GLOB_TILDE_CHECK        (1<<14)
  2999	#define GLOB_NOSORT     (1<<2)
  3000	#define GLOB_DOOFFS     (1<<3)
  3001	#define GLOB_NOCHECK    (1<<4)
  3002	#define GLOB_APPEND     (1<<5)
  3003	#define GLOB_NOESCAPE   (1<<6)
  3004	#define GLOB_PERIOD     (1<<7)
  3005	#define GLOB_MAGCHAR    (1<<8)
  3006	#define GLOB_ALTDIRFUNC (1<<9)
  3007	
  3008	#define GLOB_NOSPACE    1
  3009	#define GLOB_ABORTED    2
  3010	#define GLOB_NOMATCH    3
  3011	#define GLOB_NOSYS      4
  3012	-------------------------------------------------------------------------------
  3013	
  3014	grp.h
  3015	
  3016	struct group
  3017	{
  3018	  char *gr_name;
  3019	  char *gr_passwd;
  3020	  __gid_t gr_gid;
  3021	  char **gr_mem;
  3022	}
  3023	 ;
  3024	-------------------------------------------------------------------------------
  3025	
  3026	iconv.h
  3027	
  3028	
  3029	typedef void *iconv_t;
  3030	-------------------------------------------------------------------------------
  3031	
  3032	inttypes.h
  3033	
  3034	
  3035	typedef lldiv_t imaxdiv_t;
  3036	
  3037	typedef long long intmax_t;
  3038	
  3039	typedef unsigned long long uintmax_t;
  3040	-------------------------------------------------------------------------------
  3041	
  3042	locale.h
  3043	
  3044	#define LC_CTYPE        0
  3045	#define LC_NUMERIC      1
  3046	#define LC_TELEPHONE    10
  3047	#define LC_MEASUREMENT  11
  3048	#define LC_IDENTIFICATION       12
  3049	#define LC_TIME 2
  3050	#define LC_COLLATE      3
  3051	#define LC_MONETARY     4
  3052	#define LC_MESSAGES     5
  3053	#define LC_ALL  6
  3054	#define LC_PAPER        7
  3055	#define LC_NAME 8
  3056	#define LC_ADDRESS      9
  3057	
  3058	struct lconv
  3059	{
  3060	  char *decimal_point;
  3061	  char *thousands_sep;
  3062	  char *grouping;
  3063	  char *int_curr_symbol;
  3064	  char *currency_symbol;
  3065	  char *mon_decimal_point;
  3066	  char *mon_thousands_sep;
  3067	  char *mon_grouping;
  3068	  char *positive_sign;
  3069	  char *negative_sign;
  3070	  char int_frac_digits;
  3071	  char frac_digits;
  3072	  char p_cs_precedes;
  3073	  char p_sep_by_space;
  3074	  char n_cs_precedes;
  3075	  char n_sep_by_space;
  3076	  char p_sign_posn;
  3077	  char n_sign_posn;
  3078	}
  3079	 ;
  3080	-------------------------------------------------------------------------------
  3081	
  3082	math.h
  3083	
  3084	struct exception
  3085	{
  3086	  int type;
  3087	  char *name;
  3088	  double arg1;
  3089	  double arg2;
  3090	  double retval;
  3091	}
  3092	 ;
  3093	
  3094	#define HUGE_VAL        0x7FF00000UL
  3095	
  3096	#define M_1_PI  0.31830988618379067154
  3097	#define M_LOG10E        0.43429448190325182765
  3098	#define M_2_PI  0.63661977236758134308
  3099	#define M_LN2   0.69314718055994530942
  3100	#define M_SQRT1_2       0.70710678118654752440
  3101	#define M_PI_4  0.78539816339744830962
  3102	#define M_2_SQRTPI      1.12837916709551257390
  3103	#define M_SQRT2 1.41421356237309504880
  3104	#define M_LOG2E 1.4426950408889634074
  3105	#define M_PI_2  1.57079632679489661923
  3106	#define M_LN10  2.30258509299404568402
  3107	#define M_E     2.7182818284590452354
  3108	#define M_PI    3.14159265358979323846
  3109	-------------------------------------------------------------------------------
  3110	
  3111	netdb.h
  3112	
  3113	struct servent
  3114	{
  3115	  char *s_name;
  3116	  char **s_aliases;
  3117	  int s_port;
  3118	  char *s_proto;
  3119	}
  3120	 ;
  3121	
  3122	struct hostent
  3123	{
  3124	  char *h_name;
  3125	  char **h_aliases;
  3126	  int h_addrtype;
  3127	  socklen_t h_length;
  3128	  char **h_addr_list;
  3129	}
  3130	 ;
  3131	
  3132	#define h_addr  h_addr_list[0]
  3133	-------------------------------------------------------------------------------
  3134	
  3135	netinet/in.h
  3136	
  3137	#define INADDR_ANY      0
  3138	
  3139	struct in_addr
  3140	{
  3141	  uint32_t s_addr;
  3142	}
  3143	 ;
  3144	
  3145	
  3146	struct sockaddr_in
  3147	{
  3148	  sa_family_t sin_family;
  3149	  unsigned short sin_port;
  3150	  struct in_addr sin_addr;
  3151	  unsigned char __pad[1];
  3152	}
  3153	 ;
  3154	-------------------------------------------------------------------------------
  3155	
  3156	nl_types.h
  3157	
  3158	
  3159	typedef void *nl_catd;
  3160	
  3161	
  3162	typedef int nl_item;
  3163	-------------------------------------------------------------------------------
  3164	
  3165	pwd.h
  3166	
  3167	
  3168	struct passwd
  3169	{
  3170	  char *pw_name;
  3171	  char *pw_passwd;
  3172	  __uid_t pw_uid;
  3173	  __gid_t pw_gid;
  3174	  char *pw_gecos;
  3175	  char *pw_dir;
  3176	  char *pw_shell;
  3177	}
  3178	 ;
  3179	-------------------------------------------------------------------------------
  3180	
  3181	regex.h
  3182	
  3183	
  3184	typedef unsigned long reg_syntax_t;
  3185	
  3186	#define RE_SYNTAX_GNU_AWK       ((RE_SYNTAX_POSIX_EXTENDED|RE_BACKSLASH_ESCAPE_IN_LISTS|RE_DEBUG)&  ~(RE_DOT_NOT_NULL | RE_INTERVALS | RE_CONTEXT_INDEP_OPS))
  3187	#define RE_BACKSLASH_ESCAPE_IN_LISTS    ((unsigned long int)1)
  3188	#define RE_BK_PLUS_QM   (RE_BACKSLASH_ESCAPE_IN_LISTS<<1)
  3189	#define RE_SYNTAX_AWK   (RE_BACKSLASH_ESCAPE_IN_LISTS|RE_DOT_NOT_NULL|RE_NO_BK_PARENS| RE_NO_BK_REFS| RE_NO_BK_VBAR| RE_NO_EMPTY_RANGES| RE_DOT_NEWLINE| RE_CONTEXT_INDEP_ANCHORS| RE_UNMATCHED_RIGHT_PAREN_ORD | RE_NO_GNU_OPS)
  3190	#define RE_CHAR_CLASSES (RE_BK_PLUS_QM<<1)
  3191	#define RE_SYNTAX_GREP  (RE_BK_PLUS_QM|RE_CHAR_CLASSES|RE_HAT_LISTS_NOT_NEWLINE|RE_INTERVALS|RE_NEWLINE_ALT)
  3192	#define RE_CONTEXT_INDEP_ANCHORS        (RE_CHAR_CLASSES<<1)
  3193	#define RE_SYNTAX_EGREP (RE_CHAR_CLASSES|RE_CONTEXT_INDEP_ANCHORS| RE_CONTEXT_INDEP_OPS|RE_HAT_LISTS_NOT_NEWLINE|RE_NEWLINE_ALT|RE_NO_BK_PARENS|RE_NO_BK_VBAR)
  3194	#define RE_CONTEXT_INVALID_OPS  (RE_CONTEXT_INDEP_OPS<<1)
  3195	#define RE_DOT_NEWLINE  (RE_CONTEXT_INVALID_OPS<<1)
  3196	#define RE_DOT_NOT_NULL (RE_DOT_NEWLINE<<1)
  3197	#define RE_HAT_LISTS_NOT_NEWLINE        (RE_DOT_NOT_NULL<<1)
  3198	#define RE_LIMITED_OPS  (RE_INTERVALS<<1)
  3199	#define RE_NEWLINE_ALT  (RE_LIMITED_OPS<<1)
  3200	#define RE_NO_BK_BRACES (RE_NEWLINE_ALT<<1)
  3201	#define RE_NO_BK_PARENS (RE_NO_BK_BRACES<<1)
  3202	#define RE_NO_BK_REFS   (RE_NO_BK_PARENS<<1)
  3203	#define RE_NO_BK_VBAR   (RE_NO_BK_REFS<<1)
  3204	#define RE_NO_EMPTY_RANGES      (RE_NO_BK_VBAR<<1)
  3205	#define RE_UNMATCHED_RIGHT_PAREN_ORD    (RE_NO_EMPTY_RANGES<<1)
  3206	#define RE_SYNTAX_POSIX_EGREP   (RE_SYNTAX_EGREP|RE_INTERVALS|RE_NO_BK_BRACES|RE_INVALID_INTERVAL_ORD)
  3207	#define RE_SYNTAX_POSIX_AWK     (RE_SYNTAX_POSIX_EXTENDED|RE_BACKSLASH_ESCAPE_IN_LISTS|RE_INTERVALS|RE_NO_GNU_OPS)
  3208	#define RE_SYNTAX_POSIX_BASIC   (_RE_SYNTAX_POSIX_COMMON|RE_BK_PLUS_QM)
  3209	#define RE_SYNTAX_POSIX_EXTENDED        (_RE_SYNTAX_POSIX_COMMON|RE_CONTEXT_INDEP_ANCHORS|RE_CONTEXT_INDEP_OPS|RE_NO_BK_BRACES|RE_NO_BK_PARENS|RE_NO_BK_VBAR|RE_CONTEXT_INVALID_OPS|RE_UNMATCHED_RIGHT_PAREN_ORD)
  3210	#define RE_SYNTAX_POSIX_MINIMAL_EXTENDED        (_RE_SYNTAX_POSIX_COMMON|RE_CONTEXT_INDEP_ANCHORS|RE_CONTEXT_INVALID_OPS|RE_NO_BK_BRACES|RE_NO_BK_PARENS|RE_NO_BK_REFS|RE_NO_BK_VBAR|RE_UNMATCHED_RIGHT_PAREN_ORD)
  3211	#define RE_SYNTAX_POSIX_MINIMAL_BASIC   (_RE_SYNTAX_POSIX_COMMON|RE_LIMITED_OPS)
  3212	#define RE_SYNTAX_ED    RE_SYNTAX_POSIX_BASIC
  3213	#define RE_SYNTAX_SED   RE_SYNTAX_POSIX_BASIC
  3214	
  3215	
  3216	typedef struct re_pattern_buffer
  3217	{
  3218	  unsigned char *buffer;
  3219	  unsigned long allocated;
  3220	  unsigned long used;
  3221	  reg_syntax_t syntax;
  3222	  char *fastmap;
  3223	  char *translate;
  3224	  size_t re_nsub;
  3225	  unsigned int can_be_null;
  3226	  unsigned int regs_allocated;
  3227	  unsigned int fastmap_accurate;
  3228	  unsigned int no_sub;
  3229	  unsigned int not_bol;
  3230	  unsigned int not_eol;
  3231	  unsigned int newline_anchor;
  3232	}
  3233	regex_t;
  3234	
  3235	typedef int regoff_t;
  3236	
  3237	typedef struct
  3238	{
  3239	  regoff_t rm_so;
  3240	  regoff_t rm_eo;
  3241	}
  3242	regmatch_t;
  3243	
  3244	
  3245	#define REG_NOTEOL      (1<<1)
  3246	#define REG_ICASE       (REG_EXTENDED<<1)
  3247	#define REG_NEWLINE     (REG_ICASE<<1)
  3248	#define REG_NOSUB       (REG_NEWLINE<<1)
  3249	#define REG_NOMATCH     -1
  3250	#define REG_EXTENDED    1
  3251	#define REG_NOTBOL      1
  3252	-------------------------------------------------------------------------------
  3253	
  3254	sched.h
  3255	
  3256	struct sched_param
  3257	{
  3258	  int sched_priority;
  3259	}
  3260	 ;
  3261	-------------------------------------------------------------------------------
  3262	
  3263	search.h
  3264	
  3265	
  3266	typedef struct entry
  3267	{
  3268	  char *key;
  3269	  void *data;
  3270	}
  3271	ENTRY;
  3272	
  3273	typedef void (*__action_fn_t) (void *__nodep, VISIT __value, int __level);
  3274	
  3275	typedef enum
  3276	{
  3277	  FIND,
  3278	  ENTER
  3279	}
  3280	ACTION;
  3281	
  3282	typedef enum
  3283	{
  3284	  preorder,
  3285	  postorder,
  3286	  endorder,
  3287	  leaf
  3288	}
  3289	VISIT;
  3290	-------------------------------------------------------------------------------
  3291	
  3292	setjmp.h
  3293	
  3294	#define setjmp(env)     _setjmp(env)
  3295	#define sigsetjmp(a,b)  __sigsetjmp(a,b)
  3296	
  3297	typedef int __jmp_buf;
  3298	
  3299	
  3300	typedef struct __jmp_buf_tag
  3301	{
  3302	  __jmp_buf __jmpbuf;
  3303	  int __mask_was_saved;
  3304	  sigset_t __saved_mask;
  3305	}
  3306	jmp_buf;
  3307	
  3308	typedef jmp_buf sigjmp_buf;
  3309	-------------------------------------------------------------------------------
  3310	
  3311	signal.h
  3312	
  3313	struct sigstack;
  3314	
  3315	struct sigcontext;
  3316	
  3317	#define SIGRTMAX        (__libc_current_sigrtmax ())
  3318	#define SIGRTMIN        (__libc_current_sigrtmin ())
  3319	
  3320	#define SIGHUP  1
  3321	#define SIGUSR1 10
  3322	#define SIGSEGV 11
  3323	#define SIGUSR2 12
  3324	#define SIGPIPE 13
  3325	#define SIGALRM 14
  3326	#define SIGTERM 15
  3327	#define SIGSTKFLT       16
  3328	#define SIGCHLD 17
  3329	#define SIGCONT 18
  3330	#define SIGSTOP 19
  3331	#define SIGINT  2
  3332	#define SIGTSTP 20
  3333	#define SIGTTIN 21
  3334	#define SIGTTOU 22
  3335	#define SIGXCPU 24
  3336	#define SIGXFSZ 25
  3337	#define SIGVTALRM       26
  3338	#define SIGPROF 27
  3339	#define SIGWINCH        28
  3340	#define SIGIO   29
  3341	#define SIGQUIT 3
  3342	#define SIGPWR  30
  3343	#define SIGUNUSED       31
  3344	#define SIGSYS  31
  3345	#define SIGILL  4
  3346	#define SIGTRAP 5
  3347	#define SIGIOT  6
  3348	#define SIGABRT 6
  3349	#define SIGBUS  7
  3350	#define SIGFPE  8
  3351	#define SIGKILL 9
  3352	#define SIGCLD  SIGCHLD
  3353	#define SIGPOLL SIGIO
  3354	
  3355	typedef void (*__sighandler_t) ();
  3356	
  3357	#define SIG_ERR ((__sighandler_t)-1)
  3358	#define SIG_DFL ((__sighandler_t)0)
  3359	#define SIG_IGN ((__sighandler_t)1)
  3360	
  3361	typedef union sigval
  3362	{
  3363	  int sival_int;
  3364	  void *sival_ptr;
  3365	}
  3366	sigval_t;
  3367	
  3368	#define SV_ONSTACK      (1<<0)
  3369	#define SV_INTERRUPT    (1<<1)
  3370	#define SV_RESETHAND    (1<<2)
  3371	
  3372	
  3373	typedef struct siginfo
  3374	{
  3375	  int si_signo;
  3376	  int si_errno;
  3377	  int si_code;
  3378	  union _sifields;
  3379	}
  3380	siginfo_t;
  3381	
  3382	
  3383	typedef struct
  3384	{
  3385	  unsigned long sig[1];
  3386	}
  3387	sigset_t;
  3388	
  3389	
  3390	struct sigaction
  3391	{
  3392	  union _u;
  3393	  unsigned long sa_flags;
  3394	  void (*sa_restorer) ();
  3395	  sigset_t sa_mask;
  3396	}
  3397	 ;
  3398	
  3399	#define SA_NOCLDSTOP    0x00000001
  3400	#define SA_NOCLDWAIT    0x00000002
  3401	#define SA_SIGINFO      0x00000004
  3402	#define SA_ONSTACK      0x08000000
  3403	#define SA_RESTART      0x10000000
  3404	#define SA_INTERRUPT    0x20000000
  3405	#define SA_NODEFER      0x40000000
  3406	#define SA_RESETHAND    0x80000000
  3407	#define SA_NOMASK       SA_NODEFER
  3408	#define SA_ONESHOT      SA_RESETHAND
  3409	
  3410	typedef struct sigaltstack
  3411	{
  3412	  void *ss_sp;
  3413	  int ss_flags;
  3414	  size_t ss_size;
  3415	}
  3416	stack_t;
  3417	-------------------------------------------------------------------------------
  3418	
  3419	stdio.h
  3420	
  3421	typedef struct _IO_FILE *FILE;
  3422	
  3423	typedef __off_t fpos_t;
  3424	
  3425	typedef __off64_t fpos64_t;
  3426	
  3427	#define EOF     (-1)
  3428	#define BUFSIZ  8192
  3429	
  3430	
  3431	#define _IOFBF  0
  3432	#define _IOLBF  1
  3433	#define _IONBF  2
  3434	-------------------------------------------------------------------------------
  3435	
  3436	stdlib.h
  3437	
  3438	typedef int (*__compar_fn_t) ();
  3439	
  3440	#define MB_CUR_MAX      (__ctype_get_mb_cur_max())
  3441	
  3442	typedef struct
  3443	{
  3444	  int quot;
  3445	  int rem;
  3446	}
  3447	div_t;
  3448	
  3449	
  3450	typedef struct
  3451	{
  3452	  long quot;
  3453	  long rem;
  3454	}
  3455	ldiv_t;
  3456	
  3457	
  3458	typedef struct
  3459	{
  3460	  long quot;
  3461	  long rem;
  3462	}
  3463	lldiv_t;
  3464	-------------------------------------------------------------------------------
  3465	
  3466	sys/ioctl.h
  3467	
  3468	#define FIONREAD        0x541B
  3469	-------------------------------------------------------------------------------
  3470	
  3471	sys/mman.h
  3472	
  3473	#define MAP_SHARED      0x01
  3474	#define MAP_PRIVATE     0x02
  3475	#define PROT_READ       0x1
  3476	-------------------------------------------------------------------------------
  3477	
  3478	sys/resource.h
  3479	
  3480	struct rusage;
  3481	
  3482	#define RLIM_INFINITY   (~0UL)
  3483	#define RLIMIT_CPU      0
  3484	#define RLIMIT_FSIZE    1
  3485	#define RLIMIT_DATA     2
  3486	#define RLIMIT_STACK    3
  3487	#define RLIMIT_CORE     4
  3488	#define RLIMIT_NOFILE   7
  3489	#define RLIMIT_AS       9
  3490	-------------------------------------------------------------------------------
  3491	
  3492	sys/sem.h
  3493	
  3494	struct sembuf
  3495	{
  3496	  short sem_num;
  3497	  short sem_op;
  3498	  short sem_flg;
  3499	}
  3500	 ;
  3501	
  3502	#define IPC_PRIVATE     ((key_t)0)
  3503	#define IPC_RMID        0
  3504	#define IPC_CREAT       00001000
  3505	#define IPC_EXCL        00002000
  3506	#define IPC_NOWAIT      00004000
  3507	#define SEM_UNDO        0x1000
  3508	#define IPC_SET 1
  3509	#define GETPID  11
  3510	#define GETVAL  12
  3511	#define GETALL  13
  3512	#define GETNCNT 14
  3513	#define GETZCNT 15
  3514	#define SETVAL  16
  3515	#define SETALL  17
  3516	#define IPC_STAT        2
  3517	-------------------------------------------------------------------------------
  3518	
  3519	sys/shm.h
  3520	
  3521	struct shmid_ds
  3522	{
  3523	  struct ipc_perm shm_perm;
  3524	  int shm_segsz;
  3525	  time_t shm_atime;
  3526	  time_t shm_dtime;
  3527	  time_t shm_ctime;
  3528	  pid_t shm_cpid;
  3529	  pid_t shm_lpid;
  3530	  unsigned short shm_nattch;
  3531	  unsigned short shm_unused;
  3532	  void *shm_unused2;
  3533	  void *shm_unused3;
  3534	}
  3535	 ;
  3536	
  3537	#define SHMLBA  (__getpagesize())
  3538	#define SHM_RND 020000
  3539	#define SHM_RDONLY      4096
  3540	-------------------------------------------------------------------------------
  3541	
  3542	sys/socket.h
  3543	
  3544	struct linger
  3545	{
  3546	  int l_onoff;
  3547	  int l_linger;
  3548	}
  3549	 ;
  3550	
  3551	struct iovec
  3552	{
  3553	  void *iov_base;
  3554	  size_t iov_len;
  3555	}
  3556	 ;
  3557	
  3558	
  3559	typedef unsigned short sa_family_t;
  3560	
  3561	typedef unsigned int socklen_t;
  3562	
  3563	
  3564	struct sockaddr
  3565	{
  3566	  sa_family_t sa_family;
  3567	  char sa_data[1];
  3568	}
  3569	 ;
  3570	
  3571	
  3572	struct msghdr
  3573	{
  3574	  void *msg_name;
  3575	  int msg_namelen;
  3576	  struct iovec *msg_iov;
  3577	  size_t msg_iovlen;
  3578	  void *msg_control;
  3579	  size_t msg_controllen;
  3580	  unsigned int msg_flags;
  3581	}
  3582	 ;
  3583	
  3584	
  3585	#define AF_UNSPEC       0
  3586	#define AF_LOCAL        1
  3587	#define AF_UNIX 1
  3588	#define AF_INET6        10
  3589	#define AF_INET 2
  3590	#define AF_AX25 3
  3591	#define AF_IPX  4
  3592	#define AF_APPLETALK    5
  3593	#define AF_NETROM       6
  3594	#define AF_BRIDGE       7
  3595	#define AF_ATMPVC       8
  3596	#define AF_X25  9
  3597	
  3598	#define SOCK_STREAM     1
  3599	#define SOCK_PACKET     10
  3600	#define SOCK_DGRAM      2
  3601	#define SOCK_RAW        3
  3602	#define SOCK_RDM        4
  3603	#define SOCK_SEQPACKET  5
  3604	
  3605	#define SOL_IP  0
  3606	#define SOL_SOCKET      1
  3607	#define SO_DEBUG        1
  3608	#define SO_OOBINLINE    10
  3609	#define SO_NO_CHECK     11
  3610	#define SO_PRIORITY     12
  3611	#define SO_LINGER       13
  3612	#define SOL_UDP 17
  3613	#define SO_REUSEADDR    2
  3614	#define SOL_RAW 255
  3615	#define SO_TYPE 3
  3616	#define SO_ERROR        4
  3617	#define SO_DONTROUTE    5
  3618	#define SOL_TCP 6
  3619	#define SO_BROADCAST    6
  3620	#define SO_SNDBUF       7
  3621	#define SO_RCVBUF       8
  3622	#define SO_KEEPALIVE    9
  3623	-------------------------------------------------------------------------------
  3624	
  3625	sys/stat.h
  3626	
  3627	struct stat
  3628	{
  3629	  unsigned short st_dev;
  3630	  unsigned short __pad1;
  3631	  unsigned long st_ino;
  3632	  unsigned short st_mode;
  3633	  unsigned short st_nlink;
  3634	  unsigned short st_uid;
  3635	  unsigned short st_gid;
  3636	  unsigned short st_rdev;
  3637	  unsigned short __pad2;
  3638	  unsigned long st_size;
  3639	  unsigned long st_blksize;
  3640	  unsigned long st_blocks;
  3641	  unsigned long st_atime;
  3642	  unsigned long __unused1;
  3643	  unsigned long st_mtime;
  3644	  unsigned long __unused2;
  3645	  unsigned long st_ctime;
  3646	  unsigned long __unused3;
  3647	  unsigned long __unused4;
  3648	  unsigned long __unused5;
  3649	}
  3650	 ;
  3651	
  3652	struct stat64
  3653	{
  3654	  unsigned short st_dev;
  3655	  unsigned char __pad0[1];
  3656	  unsigned long __st_ino;
  3657	  unsigned int st_mode;
  3658	  unsigned int st_nlink;
  3659	  unsigned long st_uid;
  3660	  unsigned long st_gid;
  3661	  unsigned short st_rdev;
  3662	  unsigned char __pad3[1];
  3663	  long st_size;
  3664	  unsigned long st_blksize;
  3665	  unsigned long st_blocks;
  3666	  unsigned long __pad4;
  3667	  unsigned long st_atime;
  3668	  unsigned long __pad5;
  3669	  unsigned long st_mtime;
  3670	  unsigned long __pad6;
  3671	  unsigned long st_ctime;
  3672	  unsigned long __pad7;
  3673	  unsigned long st_ino;
  3674	}
  3675	 ;
  3676	
  3677	#define S_ISBLK(m)      (((m)& S_IFMT)==S_IFBLK)
  3678	#define S_ISCHR(m)      (((m)& S_IFMT)==S_IFCHR)
  3679	#define S_ISDIR(m)      (((m)& S_IFMT)==S_IFDIR)
  3680	#define S_ISFIFO(m)     (((m)& S_IFMT)==S_IFIFO)
  3681	#define S_ISLNK(m)      (((m)& S_IFMT)==S_IFLNK)
  3682	#define S_ISREG(m)      (((m)& S_IFMT)==S_IFREG)
  3683	#define S_ISSOCK(m)     (((m)& S_IFMT)==S_IFSOCK)
  3684	#define S_IRWXU (S_IREAD|S_IWRITE|S_IEXEC)
  3685	#define S_IROTH (S_IRGRP>>3)
  3686	#define S_IRGRP (S_IRUSR>>3)
  3687	#define S_IRWXO (S_IRWXG>>3)
  3688	#define S_IRWXG (S_IRWXU>>3)
  3689	#define S_IWOTH (S_IWGRP>>3)
  3690	#define S_IWGRP (S_IWUSR>>3)
  3691	#define S_IXOTH (S_IXGRP>>3)
  3692	#define S_IXGRP (S_IXUSR>>3)
  3693	#define S_IXUSR 0x0040
  3694	#define S_IWUSR 0x0080
  3695	#define S_IRUSR 0x0100
  3696	#define S_ISGID 0x0400
  3697	#define S_ISUID 0x0800
  3698	#define S_IFIFO 0x1000
  3699	#define S_IFCHR 0x2000
  3700	#define S_IFDIR 0x4000
  3701	#define S_IFBLK 0x6000
  3702	#define S_IFREG 0x8000
  3703	#define S_IFLNK 0xa000
  3704	#define S_IFSOCK        0xc000
  3705	#define S_IFMT  0xf000
  3706	#define S_IREAD S_IRUSR
  3707	#define S_IWRITE        S_IWUSR
  3708	#define S_IEXEC S_IXUSR
  3709	-------------------------------------------------------------------------------
  3710	
  3711	sys/time.h
  3712	
  3713	struct timezone
  3714	{
  3715	  int tz_minuteswest;
  3716	  int tz_dsttime;
  3717	}
  3718	 ;
  3719	
  3720	#define ITIMER_REAL     0
  3721	#define ITIMER_VIRTUAL  1
  3722	#define ITIMER_PROF     2
  3723	
  3724	
  3725	enum __itimer_which;
  3726	
  3727	typedef int __itimer_which_t;
  3728	
  3729	
  3730	struct timespec
  3731	{
  3732	  time_t tv_sec;
  3733	  long tv_nsec;
  3734	}
  3735	 ;
  3736	
  3737	
  3738	struct tm
  3739	{
  3740	  int tm_sec;
  3741	  int tm_min;
  3742	  int tm_hour;
  3743	  int tm_mday;
  3744	  int tm_mon;
  3745	  int tm_year;
  3746	  int tm_wday;
  3747	  int tm_yday;
  3748	  int tm_isdst;
  3749	  long tm_gmtoff;
  3750	  char *tm_zone;
  3751	}
  3752	 ;
  3753	
  3754	
  3755	struct timeval
  3756	{
  3757	  time_t tv_sec;
  3758	  suseconds_t tv_usec;
  3759	}
  3760	 ;
  3761	
  3762	
  3763	struct itimerval
  3764	{
  3765	  struct timeval it_interval;
  3766	  struct timeval it_value;
  3767	}
  3768	 ;
  3769	-------------------------------------------------------------------------------
  3770	
  3771	sys/times.h
  3772	
  3773	struct tms
  3774	{
  3775	  clock_t tms_utime;
  3776	  clock_t tms_stime;
  3777	  clock_t tms_cutime;
  3778	  clock_t tms_cstime;
  3779	}
  3780	 ;
  3781	-------------------------------------------------------------------------------
  3782	
  3783	sys/utsname.h
  3784	
  3785	struct utsname
  3786	{
  3787	  char sysname[1];
  3788	  char nodename[1];
  3789	  char release[1];
  3790	  char version[1];
  3791	  char machine[1];
  3792	  char __domainname[1];
  3793	}
  3794	 ;
  3795	-------------------------------------------------------------------------------
  3796	
  3797	sys/wait.h
  3798	
  3799	typedef enum
  3800	{
  3801	  P_ALL,
  3802	  P_PID,
  3803	  P_PGID
  3804	}
  3805	idtype_t;
  3806	
  3807	#define WIFSIGNALED(status)     (!WIFSTOPPED(status) & & !WIFEXITED(status))
  3808	#define WIFSTOPPED(status)      (((status) &  0xff) == 0x7f)
  3809	#define WEXITSTATUS(status)     (((status) &  0xff00) >> 8)
  3810	#define WTERMSIG(status)        ((status) &  0x7f)
  3811	#define WCOREDUMP(status)       ((status) &  0x80)
  3812	#define WIFEXITED(status)       (WTERMSIG(status) == 0)
  3813	#define WNOHANG 0x00000001
  3814	#define WUNTRACED       0x00000002
  3815	#define WCOREFLAG       0x80
  3816	#define WSTOPSIG(status)        WEXITSTATUS(status)
  3817	-------------------------------------------------------------------------------
  3818	
  3819	termios.h
  3820	
  3821	typedef int speed_t;
  3822	
  3823	#define TCSANOW 0
  3824	#define TCOOFF  0
  3825	#define TCIFLUSH        0
  3826	#define TAB0    0000000
  3827	#define VT0     0000000
  3828	#define CR0     0000000
  3829	#define FF0     0000000
  3830	#define NL0     0000000
  3831	#define BS0     0000000
  3832	#define OPOST   0000001
  3833	#define OLCUC   0000002
  3834	#define XCASE   0000004
  3835	#define ONLCR   0000004
  3836	#define OCRNL   0000010
  3837	#define ONOCR   0000020
  3838	#define ONLRET  0000040
  3839	#define OFILL   0000100
  3840	#define OFDEL   0000200
  3841	#define NLDLY   0000400
  3842	#define NL1     0000400
  3843	#define IUCLC   0001000
  3844	#define CR1     0001000
  3845	#define CR2     0002000
  3846	#define CRDLY   0003000
  3847	#define CR3     0003000
  3848	#define TAB1    0004000
  3849	#define TAB2    0010000
  3850	#define TABDLY  0014000
  3851	#define TAB3    0014000
  3852	#define BSDLY   0020000
  3853	#define BS1     0020000
  3854	#define VTDLY   0040000
  3855	#define VT1     0040000
  3856	#define FFDLY   0100000
  3857	#define FF1     0100000
  3858	#define TCSADRAIN       1
  3859	#define TCOON   1
  3860	#define TCOFLUSH        1
  3861	#define TCSAFLUSH       2
  3862	#define TCIOFF  2
  3863	#define TCIOFLUSH       2
  3864	#define TCION   3
  3865	
  3866	#define VINTR   0
  3867	#define VQUIT   1
  3868	#define VSUSP   10
  3869	#define VEOL    11
  3870	#define VREPRINT        12
  3871	#define VDISCARD        13
  3872	#define VWERASE 14
  3873	#define VLNEXT  15
  3874	#define VEOL2   16
  3875	#define VERASE  2
  3876	#define VKILL   3
  3877	#define NCCS    32
  3878	#define VEOF    4
  3879	#define VMIN    6
  3880	#define VSWTC   7
  3881	#define VSTART  8
  3882	#define VSTOP   9
  3883	
  3884	#define IGNBRK  0000001
  3885	#define BRKINT  0000002
  3886	#define IGNPAR  0000004
  3887	#define PARMRK  0000010
  3888	#define INPCK   0000020
  3889	#define ISTRIP  0000040
  3890	#define INLCR   0000100
  3891	#define IGNCR   0000200
  3892	#define ICRNL   0000400
  3893	#define IXON    0002000
  3894	#define IXANY   0004000
  3895	#define IXOFF   0010000
  3896	#define IMAXBEL 0020000
  3897	
  3898	
  3899	#define CS5     0000000
  3900	#define CS6     0000020
  3901	#define CS7     0000040
  3902	#define CSIZE   0000060
  3903	#define CS8     0000060
  3904	#define CSTOPB  0000100
  3905	#define PARENB  0000400
  3906	#define PARODD  0001000
  3907	#define HUPCL   0002000
  3908	#define CLOCAL  0004000
  3909	
  3910	#define ISIG    0000001
  3911	#define ICANON  0000002
  3912	#define ECHO    0000010
  3913	#define ECHOE   0000020
  3914	#define ECHOK   0000040
  3915	#define ECHONL  0000100
  3916	#define NOFLSH  0000200
  3917	#define TOSTOP  0000400
  3918	#define ECHOCTL 0001000
  3919	#define ECHOPRT 0002000
  3920	#define ECHOKE  0004000
  3921	#define FLUSHO  0010000
  3922	#define PENDIN  0040000
  3923	#define IEXTEN  0100000
  3924	
  3925	#define B0      0000000
  3926	#define B50     0000001
  3927	#define B75     0000002
  3928	#define B110    0000003
  3929	#define B134    0000004
  3930	#define B150    0000005
  3931	#define B200    0000006
  3932	#define B300    0000007
  3933	#define B600    0000010
  3934	#define B1200   0000011
  3935	#define B1800   0000012
  3936	#define B2400   0000013
  3937	#define B4800   0000014
  3938	#define B9600   0000015
  3939	#define B19200  0000016
  3940	#define B38400  0000017
  3941	-------------------------------------------------------------------------------
  3942	
  3943	time.h
  3944	
  3945	#define CLOCK_REALTIME  0
  3946	#define TIMER_ABSTIME   1
  3947	#define CLOCKS_PER_SEC  1000000l
  3948	
  3949	typedef long __clock_t;
  3950	
  3951	
  3952	typedef __clock_t clock_t;
  3953	-------------------------------------------------------------------------------
  3954	
  3955	ulimit.h
  3956	
  3957	#define UL_GETFSIZE     UL_GETFSIZE
  3958	#define UL_SETFSIZE     UL_SETFSIZE
  3959	-------------------------------------------------------------------------------
  3960	
  3961	unistd.h
  3962	
  3963	typedef int ssize_t;
  3964	
  3965	typedef int pid_t;
  3966	
  3967	typedef int *intptr_t;
  3968	
  3969	#define SEEK_SET        0
  3970	#define STDIN_FILENO    0
  3971	#define STDOUT_FILENO   1
  3972	#define SEEK_CUR        1
  3973	#define _SC_CLK_TCK     2
  3974	#define SEEK_END        2
  3975	#define STDERR_FILENO   2
  3976	#define _SC_OPEN_MAX    4
  3977	
  3978	#define F_OK    0
  3979	#define X_OK    1
  3980	#define W_OK    2
  3981	#define R_OK    4
  3982	-------------------------------------------------------------------------------
  3983	
  3984	utime.h
  3985	
  3986	struct utimbuf
  3987	{
  3988	  __time_t actime;
  3989	  __time_t modtime;
  3990	}
  3991	 ;
  3992	-------------------------------------------------------------------------------
  3993	
  3994	wchar.h
  3995	
  3996	#define WEOF    (0xffffffffu)
  3997	#define WCHAR_MAX       __WCHAR_MAX
  3998	#define WCHAR_MIN       __WCHAR_MIN
  3999	
  4000	typedef unsigned int wint_t;
  4001	
  4002	typedef struct
  4003	{
  4004	  int count;
  4005	  wint_t value;
  4006	}
  4007	mbstate_t;
  4008	-------------------------------------------------------------------------------
  4009	
  4010	wctype.h
  4011	
  4012	typedef unsigned long wctype_t;
  4013	
  4014	typedef int wctrans_t;
  4015	-------------------------------------------------------------------------------
  4016	
  4017	wordexp.h
  4018	
  4019	
  4020	enum
  4021	{
  4022	  WRDE_DOOFFS,
  4023	  WRDE_APPEND,
  4024	  WRDE_NOCMD,
  4025	  WRDE_REUSE,
  4026	  WRDE_SHOWERR,
  4027	  WRDE_UNDEF,
  4028	  __WRDE_FLAGS
  4029	}
  4030	 ;
  4031	
  4032	
  4033	typedef struct
  4034	{
  4035	  int we_wordc;
  4036	  char **we_wordv;
  4037	  int we_offs;
  4038	}
  4039	wordexp_t;
  4040	
  4041	
  4042	enum
  4043	{
  4044	  WRDE_NOSYS,
  4045	  WRDE_NOSPACE,
  4046	  WRDE_BADCHAR,
  4047	  WRDE_BADVAL,
  4048	  WRDE_CMDSUB,
  4049	  WRDE_SYNTAX
  4050	}
  4051	 ;
  4052	-------------------------------------------------------------------------------
  4053	
  4054	Interfaces Definitions for libc
  4055	
  4056	Table of Contents
  4057	_IO_2_1_stderr_ -- standard I/O stream
  4058	_IO_2_1_stdin_ -- standard I/O stream
  4059	_IO_2_1_stdout_ -- standard I/O stream
  4060	_IO_feof -- alias for feof
  4061	_IO_getc -- alias for getc
  4062	_IO_putc -- alias for putc
  4063	_IO_puts -- alias for puts
  4064	__assert_fail -- abort the program after false assertion
  4065	__bzero -- mangle of bzero
  4066	__ctype_b -- array index for ctype functions
  4067	__ctype_get_mb_cur_max -- maximum length of a multibyte character in the
  4068	    current locale
  4069	__ctype_tolower -- convert uppercase letter to lowercase letter
  4070	__ctype_toupper -- convert lowercase letter to uppercase letter
  4071	__cxa_atexit -- register a function to be called by exit or when a shared
  4072	    library is unloaded
  4073	__daylight -- global variable containing daylight
  4074	__dcgettext -- used by dcgettext in the translation to look up the MSGID in the
  4075	    DOMAINNAME message catalog for the current locale
  4076	__environ -- alias for environ - user environment
  4077	__errno_location -- address of errno variable
  4078	__fpending -- returns in bytes the amount of output pending on a stream
  4079	__getpgid -- get the process group id
  4080	__libc_current_sigrtmax -- return number of available real-time signal with
  4081	    lowest priority
  4082	__libc_current_sigrtmin -- return number of available real-time signal with
  4083	    highest priority
  4084	__libc_start_main -- initialization routine
  4085	__lxstat -- inline wrapper around call to lxstat
  4086	__mbrlen -- mangle of mbrlen
  4087	__mempcpy -- copy given number of bytes of source to destination
  4088	__rawmemchr -- scan memory
  4089	__secure_getenv -- get an environment variable
  4090	__sigpause -- atomically release blocked signals and wait for interrupt
  4091	__sigsetjmp -- save stack context for non-local goto
  4092	__stpcpy -- copy a string returning a pointer to its end
  4093	__strdup -- mangle of strdup
  4094	__strtod_internal -- alias for strtod
  4095	__strtof_internal -- mangle of strtof
  4096	__strtok_r -- mangle of strtok_r
  4097	__strtol_internal -- alias for strtol
  4098	__strtold_internal -- What is this?
  4099	__strtoll_internal -- What is this?
  4100	__strtoul_internal -- mangle of strtoul
  4101	__strtoull_internal -- What is this?
  4102	__sysconf -- get configuration information at runtime
  4103	__sysv_signal -- signal handling
  4104	__timezone -- global variable containing timezone
  4105	__tzname -- global variable containing the timezone
  4106	__wcstod_internal -- What is this?
  4107	__wcstof_internal -- What is this?
  4108	__wcstol_internal -- What is this?
  4109	__wcstold_internal -- What is this?
  4110	__wcstoll_internal -- What is this?
  4111	__wcstoul_internal -- What is this?
  4112	__wcstoull_internal -- What is this?
  4113	__xmknod -- make block or character special file
  4114	__xstat -- provide inode information
  4115	__xstat64 -- provide inode information
  4116	_environ -- alias for environ - user environment
  4117	_nl_msg_cat_cntr -- variable defined in loadmsgcat.c which gets incremented
  4118	    every time a new catalog is loaded
  4119	_obstack_begin -- initialize an obstack for use
  4120	_obstack_newchunk -- allocate a new current chunk of memory for the obstack
  4121	_sys_errlist -- array containing the "C" locale strings used by strerror()
  4122	_sys_siglist -- array containing the names of the signal names
  4123	acct -- switch process accounting on or off
  4124	adjtime -- correct the time to allow synchronization of the system clock
  4125	adjtimex -- tune kernel clock
  4126	alphasort -- scan a directory for matching entries
  4127	alphasort64 -- compare two struct dirents alphabetically
  4128	bindtextdomain -- specify that the DOMAINNAME message catalog will be found in
  4129	    DIRNAME rather than in the system locale data base
  4130	cfmakeraw -- get and set terminal attributes
  4131	cfsetspeed -- manipulate the termios structure
  4132	daemon -- run in the background
  4133	dcgettext -- look up the MSGID in the DOMAINNAME message catalog for the
  4134	    current CATEGORY locale
  4135	err -- display formatted error messages
  4136	error -- analyze and disperse compiler error messages
  4137	errx -- format error messages
  4138	flock -- apply or remove an advisory lock on an open file
  4139	fstatfs -- get file system statistics
  4140	fwprintf -- formatted wide character output conversion
  4141	gethostbyname -- get network host entry
  4142	getloadavg -- get system load averages
  4143	getopt -- parse command line options
  4144	getopt_long -- parse command line options
  4145	getopt_long_only -- parse command line options
  4146	getprotobyname -- get protocol entry
  4147	getprotoent -- get protocol entry
  4148	getservbyname -- get service entry
  4149	getservent -- get service entry
  4150	gettext -- look up MSGID in the current default message catalog for the current
  4151	    LC_MESSAGES locale
  4152	getutent -- access utmp file entries
  4153	glob64 -- find pathnames matching a pattern (Large File Support)
  4154	globfree64 -- free memory from glob64() (Large File Support)
  4155	initgroups -- initialize the supplementary group access list
  4156	isblank -- character classification routine
  4157	iswblank -- test for whitespace wide character
  4158	iswctype -- wide character classification
  4159	kill -- send a signal
  4160	mbsnrtowcs -- convert a multibyte string to a wide character string
  4161	memmem -- locate a substring
  4162	memrchr -- scan memory for a character
  4163	obstack_free -- free an object in the obstack
  4164	opterr -- external variable used in getopt()
  4165	optind -- external variable used in getopt()
  4166	optopt -- external variable used in getopt()
  4167	psignal -- print signal message
  4168	setbuffer -- stream buffering operation
  4169	setegid -- set real and / or effective group ID
  4170	seteuid -- set real and/or effective user ID
  4171	setgroups -- set list of supplementary group IDs
  4172	sethostid -- set the unique identifier of the current host
  4173	sethostname -- set host name
  4174	setmntent -- get file system descriptor file entry
  4175	setutent -- access utmp file entries
  4176	sigandset -- build a new signal set by combining the two input sets using
  4177	    logical AND
  4178	sigblock -- manipulate the signal mask
  4179	siggetmask -- manipulate the signal mask
  4180	sigisemptyset -- signal function - check for empty SET
  4181	sigorset -- build a new signal set by combining the two input sets using
  4182	    logical OR
  4183	sigreturn -- return from signal handler and cleanup stack frame
  4184	statfs -- get file system statistics
  4185	stime -- set time
  4186	stpcpy -- copy a string returning a pointer to its end
  4187	stpncpy -- copy a fixed-size string, returning a pointer to its end
  4188	strcasestr -- locate a substring - ignores the case of both strings
  4189	strerror_r -- reentrant version of strerror
  4190	strfry -- randomize a string
  4191	strndup -- return a malloc'd copy of at most the specified number of bytes of a
  4192	    string
  4193	strnlen -- determine the length of a fixed-size string
  4194	strsep -- extract token from string
  4195	strsignal -- return string describing signal
  4196	strtok_r -- extract tokens from strings
  4197	strtoq -- convert string value to a long or quad_t integer
  4198	strtouq -- convert a string to an uquad_t
  4199	strverscmp -- compare strings holding name and indices/version numbers
  4200	system -- execute a shell command
  4201	textdomain -- set the current default message catalog to DOMAINNAME
  4202	vasprintf -- write formatted output to a string dynamically allocated with
  4203	    malloc and store the address of the string
  4204	vdprintf -- write formatted output to a file descriptor
  4205	verrx -- display formatted error messages
  4206	wait4 -- wait for process termination, BSD style
  4207	warn -- formatted error messages
  4208	warnx -- formatted error messages
  4209	wcpcpy -- copy a wide character string, returning a pointer to its end
  4210	wcpncpy -- copy a fixed-size string of wide characters, returning a pointer to
  4211	    its end
  4212	wcscasecmp -- compare two wide-character strings, ignoring case
  4213	wcsdup -- duplicate a wide-character string
  4214	wcsncasecmp -- compare two fixed-size wide-character strings, ignoring case
  4215	wcsnlen -- determine the length of a fixed-size wide-character string
  4216	wcsnrtombs -- convert a wide character string to a multi-byte string
  4217	wcstoq -- convert initial portion of wide string NPTR to long int
  4218	    representation
  4219	wcstouq -- convert initial portion of wide string NPTR to unsigned long long
  4220	    int representation
  4221	
  4222	_IO_2_1_stderr_
  4223	
  4224	Name
  4225	
  4226	_IO_2_1_stderr_ -- standard I/O stream
  4227	
  4228	Synopsis
  4229	
  4230	#include <libio.h>
  4231	
  4232	extern struct _IO_FILE_plus _IO_2_1_stderr_;
  4233	
  4234	Description
  4235	
  4236	_IO_2_1_stderr is an object whose address becomes stderr.
  4237	
  4238	_IO_2_1_stderr is not in the source standard; it is only in the binary
  4239	standard.
  4240	
  4241	_IO_2_1_stdin_
  4242	
  4243	Name
  4244	
  4245	_IO_2_1_stdin_ -- standard I/O stream
  4246	
  4247	Synopsis
  4248	
  4249	#include <libio.h>
  4250	
  4251	extern struct _IO_FILE_plus _IO_2_1_stdin_;
  4252	
  4253	Description
  4254	
  4255	_IO_2_1_stdin is an object whose address becomes stdin.
  4256	
  4257	_IO_2_1_stdin is not in the source standard; it is only in the binary standard.
  4258	
  4259	_IO_2_1_stdout_
  4260	
  4261	Name
  4262	
  4263	_IO_2_1_stdout_ -- standard I/O stream
  4264	
  4265	Synopsis
  4266	
  4267	#include <libio.h>
  4268	
  4269	extern struct _IO_FILE_plus _IO_2_1_stdout_;
  4270	
  4271	Description
  4272	
  4273	_IO_2_1_stdout is an object whose address becomes stdout.
  4274	
  4275	_IO_2_1_stdout is not in the source standard; it is only in the binary
  4276	standard.
  4277	
  4278	_IO_feof
  4279	
  4280	Name
  4281	
  4282	_IO_feof -- alias for feof
  4283	
  4284	Synopsis
  4285	
  4286	int _IO_feof(_IO_FILE *__fp);
  4287	
  4288	Description
  4289	
  4290	The function _IO_feof() tests the end-of-file indicator for the stream pointed
  4291	to by __fp, returning non-zero if it is set.
  4292	
  4293	_IO_feof is not in the source standard; it is only in the binary standard.
  4294	
  4295	_IO_getc
  4296	
  4297	Name
  4298	
  4299	_IO_getc -- alias for getc
  4300	
  4301	Synopsis
  4302	
  4303	int _IO_getc(_IO_FILE *__fp);
  4304	
  4305	Description
  4306	
  4307	_IO_getc() reads the next character from __fp and returns it as an unsigned
  4308	char cast to an int, or EOF on end of file or error.
  4309	
  4310	_IO_getc is not in the source standard; it is only in the binary standard.
  4311	
  4312	_IO_putc
  4313	
  4314	Name
  4315	
  4316	_IO_putc -- alias for putc
  4317	
  4318	Synopsis
  4319	
  4320	int _IO_putc(int __c, _IO_FILE *__fp);
  4321	
  4322	Description
  4323	
  4324	_IO_putc() writes the character __c, cast to an unsigned char, to __fp.
  4325	
  4326	_IO_putc is not in the source standard; it is only in the binary standard.
  4327	
  4328	_IO_puts
  4329	
  4330	Name
  4331	
  4332	_IO_puts -- alias for puts
  4333	
  4334	Synopsis
  4335	
  4336	int _IO_puts(const char *__c);
  4337	
  4338	Description
  4339	
  4340	_IO_puts() writes the string __s and a trailing newline to stdout.
  4341	
  4342	_IO_puts is not in the source standard; it is only in the binary standard.
  4343	
  4344	__assert_fail
  4345	
  4346	Name
  4347	
  4348	__assert_fail -- abort the program after false assertion
  4349	
  4350	Synopsis
  4351	
  4352	void
  4353	__assert_fail(const char *assertion,
  4354	              const char *file,
  4355	              unsigned int line,
  4356	              const char *function);
  4357	
  4358	Description
  4359	
  4360	This function, when passed a string containing an asserted expression, a
  4361	filename, and a line number, prints a message on the standard error stream such
  4362	as:
  4363	
  4364	   
  4365	    a.c:10: foobar: Assertion a == b failed.
  4366	   
  4367	It then aborts program execution via a call to abort. The exact form of the
  4368	message is up to the implementation.
  4369	
  4370	If FUNCTION is NULL, then omit information about the function.
  4371	
  4372	FILE, LINE, and ASSERTION must be non-NULL.
  4373	
  4374	__assert_fail is not in the source standard; it is only in the binary standard.
  4375	
  4376	__bzero
  4377	
  4378	Name
  4379	
  4380	__bzero -- mangle of bzero
  4381	
  4382	Synopsis
  4383	
  4384	void __bzero(void *s, size_t n);
  4385	
  4386	Description
  4387	
  4388	__bzero(s, n) has the same specification as bzero(s, n).
  4389	
  4390	__bzero is not in the source standard; it is only in the binary standard.
  4391	
  4392	__ctype_b
  4393	
  4394	Name
  4395	
  4396	__ctype_c -- array index for ctype functions
  4397	
  4398	Synopsis
  4399	
  4400	#include <ctype.h>
  4401	
  4402	extern const unsigned short int *ctype_b;
  4403	
  4404	Description
  4405	
  4406	Array index for ctype functions.
  4407	
  4408	__ctype_b is not in the source standard; it is only in the binary standard.
  4409	
  4410	__ctype_get_mb_cur_max
  4411	
  4412	Name
  4413	
  4414	__ctype_get_mb_cur_max -- maximum length of a multibyte character in the
  4415	current locale
  4416	
  4417	Synopsis
  4418	
  4419	size_t __ctype_get_mb_cur_max(void);
  4420	
  4421	Description
  4422	
  4423	__ctype_get_mb_cur_max() returns the maximum length of a multibyte character in
  4424	the current locale.
  4425	
  4426	__ctype_get_mb_cur_max is not in the source standard; it is only in the binary
  4427	standard.
  4428	
  4429	__ctype_tolower
  4430	
  4431	Name
  4432	
  4433	__ctype_tolower -- convert uppercase letter to lowercase letter
  4434	
  4435	Synopsis
  4436	
  4437	#include <ctype.h>
  4438	
  4439	int __ctype_tolower(int c);
  4440	
  4441	Description
  4442	
  4443	The __ctype_tolower() function converts an uppercase letter to the
  4444	corresponding lowercase letter. If the argument is an uppercase letter, the
  4445	__ctype_tolower() function returns the corresponding lowercase letter if there
  4446	is one; otherwise, the argument is returned unchanged.
  4447	
  4448	__ctype_tolower is not in the source standard; it is only in the binary
  4449	standard.
  4450	
  4451	__ctype_toupper
  4452	
  4453	Name
  4454	
  4455	__ctype_toupper -- convert lowercase letter to uppercase letter
  4456	
  4457	Synopsis
  4458	
  4459	#include <ctype.h>
  4460	
  4461	int __ctype_toupper(int c);
  4462	
  4463	Description
  4464	
  4465	The __ctype_toupper() function converts a lowercase letter to the corresponding
  4466	uppercase letter. If the argument is a lowercase letter, the __ctype_toupper()
  4467	function returns the corresponding uppercase letter if there is one; otherwise,
  4468	the argument is returned unchanged.
  4469	
  4470	__ctype_toupper is not in the source standard; it is only in the binary
  4471	standard.
  4472	
  4473	__cxa_atexit
  4474	
  4475	Name
  4476	
  4477	__cxa_atexit -- register a function to be called by exit or when a shared
  4478	library is unloaded
  4479	
  4480	Synopsis
  4481	
  4482	int __cxa_atexit(void (*func) (void *), void *arg, void *d);
  4483	
  4484	Description
  4485	
  4486	Register a function to be called by exit or when a shared library is unloaded.
  4487	This function is only called from code generated by the C++ compiler.
  4488	
  4489	__cxa_atexit() has the same specification as atexit().
  4490	
  4491	__cxa_atexit is not in the source standard; it is only in the binary standard.
  4492	
  4493	__daylight
  4494	
  4495	Name
  4496	
  4497	 -- global variable containing daylight
  4498	
  4499	Synopsis
  4500	
  4501	int __daylight;
  4502	
  4503	Description
  4504	
  4505	The specification for "__daylight" is as specified in the SUSv2.
  4506	
  4507	ERRORS
  4508	
  4509	__dcgettext
  4510	
  4511	Name
  4512	
  4513	__dcgettext -- used by dcgettext in the translation to look up the MSGID in the
  4514	DOMAINNAME message catalog for the current locale
  4515	
  4516	Synopsis
  4517	
  4518	#include <libintl.h>
  4519	
  4520	extern char *__dcgettext(const char *domainname,
  4521	                         const char *msgid, int category);
  4522	
  4523	Description
  4524	
  4525	Used by dcgettext in the translation to look up the MSGID in the DOMAINNAME
  4526	message catalog for the current locale. CATEGORY locale.
  4527	
  4528	__dcgettext() has the same specification as dcgettext().
  4529	
  4530	__dcgettext is not in the source standard; it is only in the binary standard.
  4531	
  4532	__environ
  4533	
  4534	Name
  4535	
  4536	__environ -- alias for environ - user environment
  4537	
  4538	Synopsis
  4539	
  4540	extern char **__environ;
  4541	
  4542	Description
  4543	
  4544	Alias for environ - user environment.
  4545	
  4546	__environ has the same specification as environ.
  4547	
  4548	__environ is not in the source standard; it is only in the binary standard.
  4549	
  4550	__errno_location
  4551	
  4552	Name
  4553	
  4554	__errno_location -- address of errno variable
  4555	
  4556	Synopsis
  4557	
  4558	int *__errno_location(void);
  4559	
  4560	Description
  4561	
  4562	__errno_location is not in the source standard; it is only in the binary
  4563	standard.
  4564	
  4565	__fpending
  4566	
  4567	Name
  4568	
  4569	__fpending -- returns in bytes the amount of output pending on a stream
  4570	
  4571	Synopsis
  4572	
  4573	#include <stdio_ext.h>
  4574	
  4575	size_t __fpending(FILE *stream);
  4576	
  4577	Description
  4578	
  4579	The __fpending function returns the amount of output in bytes pending on a
  4580	stream.
  4581	
  4582	__fpending is not in the source standard; it is only in the binary standard.
  4583	
  4584	__getpgid
  4585	
  4586	Name
  4587	
  4588	__getpgid -- get the process group id
  4589	
  4590	Synopsis
  4591	
  4592	pid_t __getpgid(pid_t pid);
  4593	
  4594	Description
  4595	
  4596	__getpgid(pid) has the same specification as getpgid(pid).
  4597	
  4598	__getpgid is not in the source standard; it is only in the binary standard.
  4599	
  4600	__libc_current_sigrtmax
  4601	
  4602	Name
  4603	
  4604	__libc_current_sigrtmax -- return number of available real-time signal with
  4605	lowest priority
  4606	
  4607	Synopsis
  4608	
  4609	int __libc_current_sigrtmax(void);
  4610	
  4611	Description
  4612	
  4613	__libc_current_sigrtmax() returns the number of an available real-time signal
  4614	with the lowest priority.
  4615	
  4616	__libc_current_sigrtmax is not in the source standard; it is only in the binary
  4617	standard.
  4618	
  4619	__libc_current_sigrtmin
  4620	
  4621	Name
  4622	
  4623	__libc_current_sigrtmin -- return number of available real-time signal with
  4624	highest priority
  4625	
  4626	Synopsis
  4627	
  4628	int __libc_current_sigrtmin(void);
  4629	
  4630	Description
  4631	
  4632	__libc_current_sigrtmin() returns the number of an available real-time signal
  4633	with the highest priority
  4634	
  4635	__libc_current_sigrtmin is not in the source standard; it is only in the binary
  4636	standard
  4637	
  4638	__libc_start_main
  4639	
  4640	Name
  4641	
  4642	__libc_start_main -- initialization routine
  4643	
  4644	Synopsis
  4645	
  4646	BP_SYM __libc_start_main (int (*main) (int, char**, char**),
  4647	    int argc, char *__unbounded *__unbounded ubp_av,
  4648	    void (*init) (void), void (*fini) (void),
  4649	    void (*rtld_fini) (void), void (*__unbounded stack_end);
  4650	
  4651	Description
  4652	
  4653	Initialize glibc.
  4654	
  4655	__libc_start_main is not in the source standard; it is only in the binary
  4656	standard.
  4657	
  4658	__lxstat
  4659	
  4660	Name
  4661	
  4662	__lxstat -- inline wrapper around call to lxstat
  4663	
  4664	Synopsis
  4665	
  4666	#include <ctype.h>
  4667	
  4668	int __lxstat(int version, char *__path, struct stat *__statbuf);
  4669	
  4670	Description
  4671	
  4672	Inline wrapper around call to lxstat.
  4673	
  4674	__lxstat is not in the source standard; it is only in the binary standard.
  4675	
  4676	__mbrlen
  4677	
  4678	Name
  4679	
  4680	__mbrlen -- mangle of mbrlen
  4681	
  4682	Synopsis
  4683	
  4684	size_t __mbrlen(const char *__restrict s,
  4685	               size_t n,
  4686	               mbstate_t *__restrict ps);
  4687	
  4688	Description
  4689	
  4690	__mbrlen(s, n, ps) has the same specification as mbrlen(s, n, ps).
  4691	
  4692	__mbrlen is not in the source standard; it is only in the binary standard.
  4693	
  4694	__mempcpy
  4695	
  4696	Name
  4697	
  4698	__mempcpy -- copy given number of bytes of source to destination
  4699	
  4700	Synopsis
  4701	
  4702	#include <string.h>
  4703	
  4704	extern ptr_t __mempcpy(ptr_t restrict dest,
  4705	                       const ptr_t restrict src, size_t n));
  4706	
  4707	Description
  4708	
  4709	Copy n bytes of source to destination, returning pointer to bytes after the
  4710	last written byte.
  4711	
  4712	__mempcpy is not in the source standard; it is only in the binary standard.
  4713	
  4714	__rawmemchr
  4715	
  4716	Name
  4717	
  4718	__rawmemchr -- scan memory
  4719	
  4720	Synopsis
  4721	
  4722	#include <string.h>
  4723	
  4724	extern ptr_t __rawmemchr(const ptr_t s, int c);
  4725	
  4726	Description
  4727	
  4728	__rawmemchr searches in s for c.
  4729	
  4730	This is a weak alias to rawmemchr. It is similar to memchr, but there is no
  4731	length limit.
  4732	
  4733	__rawmemchr is not in the source standard; it is only in the binary standard.
  4734	
  4735	__secure_getenv
  4736	
  4737	Name
  4738	
  4739	__secure_getenv -- get an environment variable
  4740	
  4741	Synopsis
  4742	
  4743	char *__secure_getenv(__const char *name);
  4744	
  4745	Description
  4746	
  4747	__secure_getenv(name) has the same specification as getenv(name) with the
  4748	exception that if the program is running SUID or SGID enabled, the result is
  4749	always NULL.
  4750	
  4751	__sigpause
  4752	
  4753	Name
  4754	
  4755	__sigpause -- atomically release blocked signals and wait for interrupt
  4756	
  4757	Synopsis
  4758	
  4759	int __sigpause(int sig_or_mask, int is_sig);
  4760	
  4761	Description
  4762	
  4763	__sigpause(sig_or_mask, is_sig) has the same behavior as sigpause(sig_or_mask,
  4764	is_sig) as specified by X/Open.
  4765	
  4766	__sigpause is not in the source standard; it is only in the binary standard.
  4767	
  4768	__sigsetjmp
  4769	
  4770	Name
  4771	
  4772	__sigsetjmp -- save stack context for non-local goto
  4773	
  4774	Synopsis
  4775	
  4776	int __sigsetjmp(jmp_buf env, int savemask);
  4777	
  4778	Description
  4779	
  4780	__sigsetjmp(env, savemask) has the same behavior as sigsetjmp(env, savemask) as
  4781	specified by POSIX.
  4782	
  4783	__sigsetjmp is not in the source standard; it is only in the binary standard.
  4784	
  4785	__stpcpy
  4786	
  4787	Name
  4788	
  4789	__stpcpy -- copy a string returning a pointer to its end
  4790	
  4791	Synopsis
  4792	
  4793	#include <string.h>
  4794	
  4795	char * __stpcpy(char *dest, const char *src);
  4796	
  4797	Description
  4798	
  4799	The __stpcpy() function copies the string pointed to by src (including the
  4800	terminating /0 character) to the array pointed to by dest. The strings may not
  4801	overlap, and the destination string dest must be large enough to receive the
  4802	copy.
  4803	
  4804	Return Value
  4805	
  4806	__stpcpy() returns a pointer to the end of the string dest (that is, the
  4807	address of the terminating null character) rather than the beginning.
  4808	
  4809	__stpcpy() has the same specification as stpcpy().
  4810	
  4811	__stpcpy is not in the source standard; it is only in the binary standard.
  4812	
  4813	__strdup
  4814	
  4815	Name
  4816	
  4817	__strdup -- mangle of strdup
  4818	
  4819	Synopsis
  4820	
  4821	char *__strdup(__const char *string);
  4822	
  4823	Description
  4824	
  4825	__strdup(string) has the same specification as strdup(string).
  4826	
  4827	__strdup is not in the source standard; it is only in the binary standard.
  4828	
  4829	__strtod_internal
  4830	
  4831	Name
  4832	
  4833	__strtod_internal -- alias for strtod
  4834	
  4835	Synopsis
  4836	
  4837	double __strtod_internal(const char *__nptr,
  4838	                         char **__endptr,
  4839	                         int __group);
  4840	
  4841	Description
  4842	
  4843	The __GROUP argument must be 0 or the behavior is undefined.
  4844	
  4845	__strtod_internal(__nptr, __endptr, __group) has the same specification as
  4846	strtod(__nptr, __endptr).
  4847	
  4848	__strtod_internal is not in the source standard; it is only in the binary
  4849	standard.
  4850	
  4851	__strtof_internal
  4852	
  4853	Name
  4854	
  4855	__strtof_internal -- mangle of strtof
  4856	
  4857	Synopsis
  4858	
  4859	float __strtof_internal (const char *__nptr,
  4860	                         char **__endptr, int __group);
  4861	
  4862	Description
  4863	
  4864	__GROUP must be 0 or the behavior is undefined. Otherwise the same as strtof
  4865	(__nptr, __endptr). Only in the binary standard, not the source standard.
  4866	
  4867	__strtok_r
  4868	
  4869	Name
  4870	
  4871	__strtok_r -- mangle of strtok_r
  4872	
  4873	Synopsis
  4874	
  4875	char *__strtok_r(char *__restrict s,
  4876	                __const char *__restrict delim,
  4877	                char **__restrict save_ptr);
  4878	
  4879	Description
  4880	
  4881	__strtok_r(s, delim, save_ptr) has the same specification as strtok_r(s, delim,
  4882	save_ptr).
  4883	
  4884	__strtok_r is not in the source standard; it is only in the binary standard.
  4885	
  4886	__strtol_internal
  4887	
  4888	Name
  4889	
  4890	__strtol_internal -- alias for strtol
  4891	
  4892	Synopsis
  4893	
  4894	long int __strtol_internal(const char *__nptr, char **__endptr,
  4895	                           int __base, int __group);
  4896	
  4897	Description
  4898	
  4899	__GROUP must be 0 or the behavior is undefined.
  4900	
  4901	__strtol_internal(__nptr, __endptr, __base, __group) has the same specification
  4902	as strtol(__nptr, __endptr, __base).
  4903	
  4904	__strtol_internal is not in the source standard; it is only in the binary
  4905	standard.
  4906	
  4907	__strtold_internal
  4908	
  4909	Name
  4910	
  4911	__strtold_internal -- What is this?
  4912	
  4913	Synopsis
  4914	
  4915	return_type __strtold_internal(parameters) 
  4916	
  4917	Description
  4918	
  4919	__strtoll_internal
  4920	
  4921	Name
  4922	
  4923	__strtoll_internal -- What is this?
  4924	
  4925	Synopsis
  4926	
  4927	return_type __strtoll_internal(parameters) 
  4928	
  4929	Description
  4930	
  4931	__strtoul_internal
  4932	
  4933	Name
  4934	
  4935	__strtoul_internal -- mangle of strtoul
  4936	
  4937	Synopsis
  4938	
  4939	unsigned long int __strtoul_internal (const char *__nptr,
  4940	                                      char **__endptr, int __base,
  4941	                                      int __group));
  4942	
  4943	Description
  4944	
  4945	__GROUP must be 0 or the behavior is undefined. Otherwise the same as strtoul
  4946	(__nptr, __endptr, __base). Only in the binary standard, not the source
  4947	standard.
  4948	
  4949	__strtoull_internal
  4950	
  4951	Name
  4952	
  4953	__strtoull_internal -- What is this?
  4954	
  4955	Synopsis
  4956	
  4957	return_type __strtoull_internal(parameters) 
  4958	
  4959	Description
  4960	
  4961	__sysconf
  4962	
  4963	Name
  4964	
  4965	__sysconf -- get configuration information at runtime
  4966	
  4967	Synopsis
  4968	
  4969	#include <unistd.h>
  4970	
  4971	long __sysconf(int name);
  4972	
  4973	Description
  4974	
  4975	Get configuration information at runtime.
  4976	
  4977	This is weak alias to sysconf.
  4978	
  4979	__sysconf(name) has the same specification as sysconf(name).
  4980	
  4981	__sysconf is not in the source standard; it is only in the binary standard.
  4982	
  4983	__sysv_signal
  4984	
  4985	Name
  4986	
  4987	__sysv_signal -- signal handling
  4988	
  4989	Synopsis
  4990	
  4991	__sighandler_t __sysv_signal(int sig, __sighandler_t handler);
  4992	
  4993	Description
  4994	
  4995	__sysv_signal(sig, handler) has the same behavior as signal(sig, handler) as
  4996	specified by X/Open.
  4997	
  4998	__sysv_signal is not in the source standard; it is only in the binary standard.
  4999	
  5000	__timezone
  5001	
  5002	Name
  5003	
  5004	 -- global variable containing timezone
  5005	
  5006	Synopsis
  5007	
  5008	long int __timezone;
  5009	
  5010	Description
  5011	
  5012	The specification for "__timezone" is as specified in the SUSv2.
  5013	
  5014	ERRORS
  5015	
  5016	__tzname
  5017	
  5018	Name
  5019	
  5020	 -- global variable containing the timezone
  5021	
  5022	Synopsis
  5023	
  5024	char *__tzname[2];
  5025	
  5026	Description
  5027	
  5028	The specification for "__tzname" is similar as specified in the SUSv2, but with
  5029	an array of size two.
  5030	
  5031	ERRORS
  5032	
  5033	__wcstod_internal
  5034	
  5035	Name
  5036	
  5037	__wcstod_internal -- What is this?
  5038	
  5039	Synopsis
  5040	
  5041	return_type __wcstod_internal(parameters) 
  5042	
  5043	Description
  5044	
  5045	__wcstof_internal
  5046	
  5047	Name
  5048	
  5049	__wcstof_internal -- What is this?
  5050	
  5051	Synopsis
  5052	
  5053	return_type __wcstof_internal(parameters) 
  5054	
  5055	Description
  5056	
  5057	__wcstol_internal
  5058	
  5059	Name
  5060	
  5061	__wcstol_internal -- What is this?
  5062	
  5063	Synopsis
  5064	
  5065	return_type __wcstol_internal(parameters) 
  5066	
  5067	Description
  5068	
  5069	__wcstold_internal
  5070	
  5071	Name
  5072	
  5073	__wcstold_internal -- What is this?
  5074	
  5075	Synopsis
  5076	
  5077	return_type __wcstold_internal(parameters) 
  5078	
  5079	Description
  5080	
  5081	__wcstoll_internal
  5082	
  5083	Name
  5084	
  5085	__wcstoll_internal -- What is this?
  5086	
  5087	Synopsis
  5088	
  5089	return_type __wcstoll_internal(parameters) 
  5090	
  5091	Description
  5092	
  5093	__wcstoul_internal
  5094	
  5095	Name
  5096	
  5097	__wcstoul_internal -- What is this?
  5098	
  5099	Synopsis
  5100	
  5101	return_type __wcstoul_internal(parameters) 
  5102	
  5103	Description
  5104	
  5105	__wcstoull_internal
  5106	
  5107	Name
  5108	
  5109	__wcstoull_internal -- What is this?
  5110	
  5111	Synopsis
  5112	
  5113	return_type __wcstoull_internal(parameters) 
  5114	
  5115	Description
  5116	
  5117	__xmknod
  5118	
  5119	Name
  5120	
  5121	__xmknod -- make block or character special file
  5122	
  5123	Synopsis
  5124	
  5125	int __xmknod(int ver,
  5126	            __const char *path,
  5127	            __mode_t mode,
  5128	            __dev_t *dev);
  5129	
  5130	Description
  5131	
  5132	ver must be 1 or the behavior is undefined.
  5133	
  5134	__xmknod(1, path, mode, dev) has the same specification as mknod(path, mode,
  5135	dev).
  5136	
  5137	Note that the format of dev_t is not the same as the argument that the kernel
  5138	syscall uses.
  5139	
  5140	__xmknod is not in the source standard; it is only in the binary standard.
  5141	
  5142	__xstat
  5143	
  5144	Name
  5145	
  5146	__xstat -- provide inode information
  5147	
  5148	Synopsis
  5149	
  5150	#include <sys/stat.h>
  5151	#include <unistd.h>
  5152	
  5153	int __xstat (int __ver,
  5154	             const char *__filename,
  5155	             struct stat *__stat_buf)
  5156	
  5157	int __lxstat (int __ver,
  5158	              const char *__filename,
  5159	              struct stat *__stat_buf)
  5160	
  5161	int __fxstat (int __ver,
  5162	              int __filedesc,
  5163	              struct stat *__stat_buf)
  5164	
  5165	Inputs
  5166	
  5167	__ver
  5168	   
  5169	    Must be 3 or the behavior is undefined.
  5170	   
  5171	__filename
  5172	   
  5173	    As in POSIX.
  5174	   
  5175	__filedesc
  5176	   
  5177	    As in POSIX.
  5178	   
  5179	__stat_buf
  5180	   
  5181	    As in POSIX.
  5182	   
  5183	Description
  5184	
  5185	__xstat() has the same behavior as stat (__filename, __stat_buf) as specified
  5186	by POSIX.
  5187	
  5188	__lxstat() has the same behavior as lstat (__filename, __stat_buf) as specified
  5189	by POSIX.
  5190	
  5191	__fxstat() has the same behavior as fstat (__filedesc, __stat_buf) as specified
  5192	by POSIX.
  5193	
  5194	Note that the struct stat used by these functions is not the one that the
  5195	kernel uses.
  5196	
  5197	Usage
  5198	
  5199	__xstat, __lxstat, and __fxstat are not in the source standard; stat, lstat,
  5200	and fstat are not in the binary standard.
  5201	
  5202	__xstat64
  5203	
  5204	Name
  5205	
  5206	__xstat64 -- provide inode information
  5207	
  5208	Synopsis
  5209	
  5210	#define _LARGEFILE_SOURCE 1
  5211	#include <sys/stat.h>
  5212	#include <unistd.h>
  5213	
  5214	int __xstat64 (int __ver,
  5215	             const char *__filename,
  5216	             struct stat64 *__stat_buf)
  5217	
  5218	int __lxstat64 (int __ver,
  5219	              const char *__filename,
  5220	              struct stat64 *__stat_buf)
  5221	
  5222	int __fxstat64 (int __ver,
  5223	              int __filedesc,
  5224	              struct stat64 *__stat_buf)
  5225	
  5226	Inputs
  5227	
  5228	__ver
  5229	   
  5230	    Must be 3 or the behavior is undefined.
  5231	   
  5232	__filename
  5233	   
  5234	    As in Large File Summit.
  5235	   
  5236	__filedesc
  5237	   
  5238	    As in Large File Summit.
  5239	   
  5240	__stat_buf
  5241	   
  5242	    As in Large File Summit.
  5243	   
  5244	Description
  5245	
  5246	__xstat64() has the same behavior as stat64 (__filename, __stat_buf) as
  5247	specified by Large File Summit.
  5248	
  5249	__lxstat64() has the same behavior as lstat64 (__filename, __stat_buf) as
  5250	specified by Large File Summit.
  5251	
  5252	__fxstat64() has the same behavior as fstat64 (__filedesc, __stat_buf) as
  5253	specified by Large File Summit.
  5254	
  5255	Usage
  5256	
  5257	__xstat64, __lxstat64, and __fxstat64 are not in the source standard; stat64,
  5258	lstat64, and fstat64 are not in the binary standard.
  5259	
  5260	_environ
  5261	
  5262	Name
  5263	
  5264	_environ -- alias for environ - user environment
  5265	
  5266	Synopsis
  5267	
  5268	extern char **_environ;
  5269	
  5270	Description
  5271	
  5272	Alias for environ - user environment.
  5273	
  5274	_nl_msg_cat_cntr
  5275	
  5276	Name
  5277	
  5278	_nl_msg_cat_cntr -- variable defined in loadmsgcat.c which gets incremented
  5279	every time a new catalog is loaded
  5280	
  5281	Synopsis
  5282	
  5283	#include <libintl.h>
  5284	
  5285	extern int _nl_msg_cat_cntr;
  5286	
  5287	Description
  5288	
  5289	Used by Message catalogs for internationalization. A variable defined which
  5290	gets incremented every time a new catalog is loaded.
  5291	
  5292	_obstack_begin
  5293	
  5294	Name
  5295	
  5296	_obstack_begin -- initialize an obstack for use
  5297	
  5298	Synopsis
  5299	
  5300	#include <obstack.h>
  5301	
  5302	extern int _obstack_begin(struct obstack *, int, int,
  5303	                          void *(*) (long), void (*) (void *));
  5304	
  5305	Description
  5306	
  5307	Initialize an obstack for use.
  5308	
  5309	_obstack_newchunk
  5310	
  5311	Name
  5312	
  5313	_obstack_newchunk -- allocate a new current chunk of memory for the obstack
  5314	
  5315	Synopsis
  5316	
  5317	#include <obstack.h>
  5318	
  5319	extern void _obstack_newchunk(struct obstack *, int);
  5320	
  5321	Description
  5322	
  5323	Allocate a new current chunk of memory for the obstack.
  5324	
  5325	_sys_errlist
  5326	
  5327	Name
  5328	
  5329	_sys_errlist -- array containing the "C" locale strings used by strerror()
  5330	
  5331	Synopsis
  5332	
  5333	#include <stdio.h>
  5334	
  5335	extern const char *const _sys_errlist[];
  5336	
  5337	Description
  5338	
  5339	An array containing the "C" locale strings used by strerror(). This normally
  5340	should not be used directly. The strerror function provides all the needed
  5341	functionality.
  5342	
  5343	_sys_siglist
  5344	
  5345	Name
  5346	
  5347	_sys_siglist -- array containing the names of the signal names
  5348	
  5349	Synopsis
  5350	
  5351	#include <signal.h>
  5352	
  5353	extern const char *const _sys_siglist[NSIG];
  5354	
  5355	Description
  5356	
  5357	An array containing the names of the signal names.
  5358	
  5359	This exists only for compatibility. Use strsignal instead (see <string.h>).
  5360	
  5361	acct
  5362	
  5363	Name
  5364	
  5365	acct -- switch process accounting on or off
  5366	
  5367	Synopsis
  5368	
  5369	#include <dirent.h>
  5370	
  5371	int acct(const char *filename);
  5372	
  5373	Description
  5374	
  5375	When called with the name of an existing file as argument, accounting is turned
  5376	on and records for each terminating process are appended to filename as it
  5377	terminates. An argument of NULL causes accounting to be turned off.
  5378	
  5379	Return Value
  5380	
  5381	On success, zero is returned. On error, -1 is returned, and errno is set
  5382	appropriately.
  5383	
  5384	Errors
  5385	
  5386	ENOSYS
  5387	   
  5388	    BSD process accounting has not been enabled when the operating system
  5389	    kernel was compiled. The kernel configuration parameter controlling this
  5390	    feature is CONFIG_BSD_PROCESS_ACCT.
  5391	   
  5392	ENOMEM
  5393	   
  5394	    Out of memory.
  5395	   
  5396	EPERM
  5397	   
  5398	    The calling process has no permission to enable process accounting.
  5399	   
  5400	EACCES
  5401	   
  5402	    The argument filename is not a regular file.
  5403	   
  5404	EIO
  5405	   
  5406	    Error writing to the file filename.
  5407	   
  5408	EUSERS
  5409	   
  5410	    There are no more free file structures or we run out of memory.
  5411	   
  5412	adjtime
  5413	
  5414	Name
  5415	
  5416	adjtime -- correct the time to allow synchronization of the system clock
  5417	
  5418	Synopsis
  5419	
  5420	#include <time.h>
  5421	
  5422	int adjtime(const struct timeval *delta, struct timeval *olddelta);
  5423	
  5424	Description
  5425	
  5426	Adjtime() makes small adjustments to the system time, as returned by
  5427	gettimeofday(2), advancing or retarding it by the time specified by the timeval
  5428	delta. If delta is negative, the clock is slowed down by incrementing it more
  5429	slowly than normal until the correction is complete. If delta is positive, a
  5430	larger increment than normal is used. The skew used to perform the correction
  5431	is generally a fraction of one percent. Thus, the time is always a
  5432	monotonically increasing function. A time correction from an earlier call to
  5433	adjtime() may not be finished when adjtime() is called again. If olddelta is
  5434	non-nil, the structure pointed to will contain, upon return, the number of
  5435	microseconds still to be corrected from the earlier call.
  5436	
  5437	This call may be used by time servers that synchronize the clocks of computers
  5438	in a local area network. Such time servers would slow down the clocks of some
  5439	machines and speed up the clocks of others to bring them to the average network
  5440	time.
  5441	
  5442	The call adjtime() is restricted to the super-user.
  5443	
  5444	Return Value
  5445	
  5446	On success, zero is returned. On error, -1 is returned, and errno is set
  5447	appropriately.
  5448	
  5449	ERRORS
  5450	
  5451	EFAULT
  5452	   
  5453	    An argument points outside the process's allocated address space.
  5454	   
  5455	EPERM
  5456	   
  5457	    The process's effective user ID is not that of the super-user.
  5458	   
  5459	adjtimex
  5460	
  5461	Name
  5462	
  5463	adjtimex -- tune kernel clock
  5464	
  5465	Synopsis
  5466	
  5467	#include <sys/timex.h>
  5468	
  5469	int adjtimex(struct timex *buf);
  5470	
  5471	Description
  5472	
  5473	Linux uses David L. Mills' clock adjustment algorithm (see RFC 1305). The
  5474	system call adjtimex reads and optionally sets adjustment parameters for this
  5475	algorithm. It takes a pointer to a timex structure, updates kernel parameters
  5476	from field values, and returns the same structure with current kernel values.
  5477	This structure is declared as follows:
  5478	
  5479	struct timex {
  5480	   
  5481	    int modes; /* mode selector */
  5482	   
  5483	    long offset; /* time offset (usec) */
  5484	   
  5485	    long freq; /* frequency offset (scaled ppm) */
  5486	   
  5487	    long maxerror; /* maximum error (usec) */
  5488	   
  5489	    long esterror; /* estimated error (usec) */
  5490	   
  5491	    int status; /* clock command/status */
  5492	   
  5493	    long constant; /* pll time constant */
  5494	   
  5495	    long precision; /* clock precision (usec) (read only) */
  5496	   
  5497	    long tolerance; /* clock frequency tolerance (ppm) (read only) */
  5498	   
  5499	    struct timeval time; /* current time (read only) */
  5500	   
  5501	    long tick; /* usecs between clock ticks */
  5502	   
  5503	    };
  5504	   
  5505	The modes field determines which parameters, if any, to set. It may contain a
  5506	bitwise-or combination of zero or more of the following bits:
  5507	
  5508	#define ADJ_OFFSET 0x0001 /* time offset */
  5509	
  5510	#define ADJ_FREQUENCY 0x0002 /* frequency offset */
  5511	
  5512	#define ADJ_MAXERROR 0x0004 /* maximum time error */
  5513	
  5514	#define ADJ_ESTERROR 0x0008 /* estimated time error */
  5515	
  5516	#define ADJ_STATUS 0x0010 /* clock status */
  5517	
  5518	#define ADJ_TIMECONST 0x0020 /* pll time constant */
  5519	
  5520	#define ADJ_TICK 0x4000 /* tick value */
  5521	
  5522	#define ADJ_OFFSET_SINGLESHOT 0x8001 /* old-fashioned adjtime */
  5523	
  5524	Ordinary users are restricted to a zero value for mode. Only the superuser may
  5525	set any parameters.
  5526	
  5527	Return Value
  5528	
  5529	On success, adjtimex returns the clock state:
  5530	
  5531	  #define TIME_OK 0 /* clock synchronized */
  5532	
  5533	#define TIME_INS 1 /* insert leap second */
  5534	
  5535	#define TIME_DEL 2 /* delete leap second */
  5536	
  5537	#define TIME_OOP 3 /* leap second in progress */
  5538	
  5539	#define TIME_WAIT 4 /* leap second has occurred */
  5540	
  5541	#define TIME_BAD 5 /* clock not synchronized */
  5542	
  5543	 On error, -1 is returned, and errno is set appropriately.
  5544	
  5545	Errors
  5546	
  5547	EFAULT
  5548	   
  5549	    buf does not point to writable memory.
  5550	   
  5551	EPERM
  5552	   
  5553	    buf.mode is non-zero and the user is not super-user.
  5554	   
  5555	EINVAL
  5556	   
  5557	    An attempt is made to set buf.offset to a value outside the range -131071
  5558	    to +131071, or to set buf.status to a value other than those listed above,
  5559	    or to set buf.tick to a value outside the range 900000/HZ to 1100000/HZ,
  5560	    where HZ is the system timer interrupt frequency.
  5561	   
  5562	alphasort
  5563	
  5564	Name
  5565	
  5566	alphasort -- scan a directory for matching entries
  5567	
  5568	Synopsis
  5569	
  5570	#include <dirent.h>
  5571	
  5572	int alphasort(const struct dirent **a, const struct dirent **b);
  5573	
  5574	Description
  5575	
  5576	The alphasort() function can be used as the comparison function for the scandir
  5577	() function to sort the directory entries into alphabetical order. Its
  5578	parameters are the two directory entries, a and b, to compare.
  5579	
  5580	Return Value
  5581	
  5582	The alphasort() function returns an integer less than, equal to, or greater
  5583	than zero if the first argument is considered to be respectively less than,
  5584	equal to, or greater than the second.
  5585	
  5586	Errors
  5587	
  5588	ENOMEM
  5589	   
  5590	    Insufficient memory to complete the operation.
  5591	   
  5592	alphasort64
  5593	
  5594	Name
  5595	
  5596	alphasort64 -- compare two struct dirents alphabetically
  5597	
  5598	Synopsis
  5599	
  5600	#include <dirent.h>
  5601	
  5602	int alphasort64(const struct dirent **a, const struct dirent **b);
  5603	
  5604	Description
  5605	
  5606	Function to compare two struct dirents alphabetically. This function is like
  5607	alphasort but it uses the 64bit dirent structure.
  5608	
  5609	bindtextdomain
  5610	
  5611	Name
  5612	
  5613	bindtextdomain -- specify that the DOMAINNAME message catalog will be found in
  5614	DIRNAME rather than in the system locale data base
  5615	
  5616	Synopsis
  5617	
  5618	#include <unistd.h>
  5619	
  5620	extern char *bindtextdomain(const char *domainname,
  5621	                            const char *dirname);
  5622	
  5623	Description
  5624	
  5625	Specify that the DOMAINNAME message catalog will be found in DIRNAME rather
  5626	than in the system locale data base.
  5627	
  5628	cfmakeraw
  5629	
  5630	Name
  5631	
  5632	cfmakeraw -- get and set terminal attributes
  5633	
  5634	Synopsis
  5635	
  5636	#include <termios.h>
  5637	
  5638	int cfmakeraw(struct termios *termios_p);
  5639	
  5640	Description
  5641	
  5642	cfmakeraw sets the terminal attributes as follows:
  5643	   
  5644	    termios_p->c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP |INLCR|IGNCR|ICRNL|
  5645	    IXON);
  5646	   
  5647	    termios_p->c_oflag &= ~OPOST;
  5648	   
  5649	    termios_p->c_lflag &= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);
  5650	   
  5651	    termios_p->c_cflag &= ~(CSIZE|PARENB);
  5652	   
  5653	    termios_p->c_cflag |= CS8;
  5654	   
  5655	termios_p is a pointer to a termios structure. This structure contains the
  5656	following members:
  5657	
  5658	tcflag_t c_iflag; /* input modes */
  5659	
  5660	tcflag_t c_oflag; /* output modes */
  5661	
  5662	tcflag_t c_cflag; /* control modes */
  5663	
  5664	tcflag_t c_lflag; /* local modes */
  5665	
  5666	cc_t c_cc[NCCS]; /* control chars */
  5667	
  5668	Return Value
  5669	
  5670	On success, zero is returned. On failure, -1 is returned, and errno is set
  5671	appropriately.
  5672	
  5673	cfsetspeed
  5674	
  5675	Name
  5676	
  5677	cfsetspeed -- manipulate the termios structure
  5678	
  5679	Synopsis
  5680	
  5681	#include <termios.h>
  5682	
  5683	int cfsetspeed(struct termios *t, speedt speed);
  5684	
  5685	Description
  5686	
  5687	The cfsetspeed function is provided for setting the baud rate values in the
  5688	termios structure. The effects of the function on the terminal as described
  5689	below do not become effective, nor are all errors detected, until the tcsetattr
  5690	function is called. Certain values for baud rates set in the termios structure
  5691	and passed to tcsetattr have special meanings.
  5692	
  5693	Getting and Setting the Baud Rate
  5694	
  5695	The input and output baud rates are found in the termios structure. The
  5696	unsigned integer speed_t is typdef'd in the include file <termios.h>. The value
  5697	of the integer corresponds directly to the baud rate being represented,
  5698	however, the following symbolic values are defined.
  5699	
  5700	#define B0 0
  5701	
  5702	#define B50 50
  5703	
  5704	#define B75 75
  5705	
  5706	#define B110 110
  5707	
  5708	#define B134 134
  5709	
  5710	#define B150 150
  5711	
  5712	#define B200 200
  5713	
  5714	#define B300 300
  5715	
  5716	#define B600 600
  5717	
  5718	#define B1200 1200
  5719	
  5720	#define B1800 1800
  5721	
  5722	#define B2400 2400
  5723	
  5724	#define B4800 4800
  5725	
  5726	#define B9600 9600
  5727	
  5728	#define B19200 19200
  5729	
  5730	#define B38400 38400
  5731	
  5732	#ifndef _POSIX_SOURCE
  5733	
  5734	#define EXTA 19200
  5735	
  5736	#define EXTB 38400
  5737	
  5738	#endif /*_POSIX_SOURCE */
  5739	
  5740	The cfsetspeed function sets both the input and output baud rate in the termios
  5741	structure referenced by t to speed.
  5742	
  5743	Return Value
  5744	
  5745	On success, zero is returned. On error, -1 is returned, and errno is set
  5746	appropriately.
  5747	
  5748	daemon
  5749	
  5750	Name
  5751	
  5752	daemon -- run in the background
  5753	
  5754	Synopsis
  5755	
  5756	#include <unistd.h>
  5757	
  5758	int daemon(int nochdir, int noclose);
  5759	
  5760	Description
  5761	
  5762	The daemon() function is for programs wishing to detach themselves from the
  5763	controlling terminal and run in the background as system daemons. Unless the
  5764	argument nochdir is non-zero, daemon() changes the current working directory to
  5765	the root (`/'). Unless the argument noclose is non-zero, daemon() will redirect
  5766	standard input, standard output and standard error to /dev/null.
  5767	
  5768	Errors
  5769	
  5770	On error, -1 is returned, and errno is set to any of the errors specified for
  5771	the library functions fork(2) and setsid(2).
  5772	
  5773	dcgettext
  5774	
  5775	Name
  5776	
  5777	dcgettext -- look up the MSGID in the DOMAINNAME message catalog for the
  5778	current CATEGORY locale
  5779	
  5780	Synopsis
  5781	
  5782	#include <libintl.h>
  5783	
  5784	extern char *dcgettext(const char *domainname,
  5785	                       const char *msgid, int category);
  5786	
  5787	Description
  5788	
  5789	Used to look up the MSGID in the DOMAINNAME message catalog for the current
  5790	CATEGORY locale.
  5791	
  5792	err
  5793	
  5794	Name
  5795	
  5796	err -- display formatted error messages
  5797	
  5798	Synopsis
  5799	
  5800	#include <err.h>
  5801	
  5802	void err(int eval, const char *fmt, ...);
  5803	
  5804	Description
  5805	
  5806	The err() function displays a formatted error message on the standard error
  5807	output. The last component of the program name, a colon character, and a space
  5808	are output. If the fmt argument is not NULL, the formatted error message, a
  5809	colon character, and a space are output. The error message string affiliated
  5810	with the current value of the global variable errno is output. The output is
  5811	followed by a newline character.
  5812	
  5813	The err() function does not return, but exits with the value of the argument
  5814	eval.
  5815	
  5816	error
  5817	
  5818	Name
  5819	
  5820	error -- analyze and disperse compiler error messages
  5821	
  5822	Synopsis
  5823	
  5824	error [-n] [-s] [-q] [-v] [-t suffixlist] [-I ignorefile] [name]
  5825	
  5826	Description
  5827	
  5828	Error analyzes and optionally disperses the diagnostic error messages produced
  5829	by a number of compilers and language processors to the source file and line
  5830	where the errors occurred. It can replace the painful, traditional methods of
  5831	scribbling abbreviations of errors on paper, and permits error messages and
  5832	source code to be viewed simultaneously without machinations of multiple
  5833	windows in a screen editor.
  5834	
  5835	Options are:
  5836	
  5837	-n
  5838	   
  5839	    Do not touch any files; all error messages are sent to the standard output
  5840	   
  5841	-q
  5842	   
  5843	    The user is queried whether s/he wants to touch the file. A `y' or `n' to
  5844	    the question is necessary to continue. Absence of the -q option implies
  5845	    that all referenced files (except those referring to discarded error
  5846	    messages) are to be touched.
  5847	   
  5848	-v
  5849	   
  5850	    After all files have been touched, overlay the visual editor vi(1) with it
  5851	    set up to edit all files touched, and positioned in the first touched file
  5852	    at the first error. If vi(1) can't be found, try ex(1) or ed(1) from
  5853	    standard places.
  5854	   
  5855	-t
  5856	   
  5857	    Take the following argument as a suffix list. Files whose suffixes do not
  5858	    appear in the suffix list are not touched. The suffix list is dot
  5859	    separated, and `*' wildcards work. Thus the suffix list:
  5860	   
  5861	    .c.y.foo*.h
  5862	   
  5863	    allows error to touch files ending with `.c', `.y', `.foo*' and `.y'.
  5864	   
  5865	-s
  5866	   
  5867	    Print out statistics regarding the error categorization. Not too useful.
  5868	   
  5869	Error looks at the error messages, either from the specified file name or from
  5870	the standard input, and:
  5871	
  5872	  * attempts to determine which language processor produced each error message
  5873	   
  5874	  * determines the source file and line number to which the error message
  5875	    refers
  5876	   
  5877	  * determines if the error message is to be ignored or not
  5878	   
  5879	  * inserts the (possibly slightly modified) error message into the source file
  5880	    as a comment on the line preceding to which the line the error message
  5881	    refers.
  5882	   
  5883	Error messages that can't be categorized by language processor or content are
  5884	not inserted into any file, but are sent to the standard output. Error touches
  5885	source files only after all input has been read.
  5886	
  5887	Error is intended to be run with its standard input connected via a pipe to the
  5888	error message source. Some language processors put error messages on their
  5889	standard error file; others put their messages on the standard output. Hence,
  5890	both error sources should be piped together into error. For example, when using
  5891	the csh(1) syntax,
  5892	
  5893	make -s lint | error -q -v
  5894	
  5895	will analyze all the error messages produced by whatever programs make(1) runs
  5896	when making lint.
  5897	
  5898	Error knows about the error messages produced by: make(1), cc(1), cpp(1), ccom
  5899	(1), as(1), ld(1), lint(1), pi(1), pc(1), f77(1), and DEC Western Research
  5900	Modula-2. Error knows a standard format for error messages produced by the
  5901	language processors, so is sensitive to changes in these formats. For all
  5902	languages except Pascal, error messages are restricted to be on one line. Some
  5903	error messages refer to more than one line in more than one files; error will
  5904	duplicate the error message and insert it at all of the places referenced.
  5905	
  5906	Error will do one of six things with error messages.
  5907	
  5908	synchronize
  5909	   
  5910	    Some language processors produce short errors describing which file it is
  5911	    processing. Error uses these to determine the file name for languages that
  5912	    don't include the file name in each error message. These synchronization
  5913	    messages are consumed entirely by error.
  5914	   
  5915	discard
  5916	   
  5917	    Error messages from lint(1) that refer to one of the two lint(1) libraries,
  5918	    /usr/libdata/lint/llib-lc and /usr/libdata/lint/llib-port are discarded, to
  5919	    prevent accidently touching these libraries. Again, these error messages
  5920	    are consumed entirely by error.
  5921	   
  5922	nullify
  5923	   
  5924	    Error messages from lint(1) can be nullified if they refer to a specific
  5925	    function, which is known to generate diagnostics which are not interesting.
  5926	    Nullified error messages are not inserted into the source file, but are
  5927	    written to the standard output. The names of functions to ignore are taken
  5928	    from either the file named .errorrc in the users's home directory, or from
  5929	    the file named by the -I option. If the file does not exist, no error
  5930	    messages are nullified. If the file does exist, there must be one function
  5931	    name per line.
  5932	   
  5933	not file specific
  5934	   
  5935	    Error messages that can't be intuited are grouped together, and written to
  5936	    the standard output before any files are touched. They will not be inserted
  5937	    into any source file.
  5938	   
  5939	file specific
  5940	   
  5941	    Error message that refer to a specific file, but to no specific line, are
  5942	    written to the standard output when that file is touched.
  5943	   
  5944	true errors
  5945	   
  5946	    Error messages that can be intuited are candidates for insertion into the
  5947	    file to which they refer.
  5948	   
  5949	Only true error messages are candidates for inserting into the file they refer
  5950	to. Other error messages are consumed entirely by error or are written to the
  5951	standard output. Error inserts the error messages into the source file on the
  5952	line preceding the line the language processor found in error. Each error
  5953	message is turned into a one line comment for the language, and is internally
  5954	flagged with the string `###' at the beginning of the error, and `%%%' at the
  5955	end of the error. This makes pattern searching for errors easier with an
  5956	editor, and allows the messages to be easily removed. In addition, each error
  5957	message contains the source line number for the line the message refers to. A
  5958	reasonably formatted source program can be recompiled with the error messages
  5959	still in it, without having the error messages themselves cause future errors.
  5960	For poorly formatted source programs in free format languages, such as C or
  5961	Pascal, it is possible to insert a comment into another comment, which can
  5962	wreak havoc with a future compilation. To avoid this, programs with comments
  5963	and source on the same line should be formatted so that language statements
  5964	appear before comments.
  5965	
  5966	Error catches interrupt and terminate signals, and if in the insertion phase,
  5967	will orderly terminate what it is doing.
  5968	
  5969	Files
  5970	
  5971	~/.errorrc function names to ignore for lint(1) error messages
  5972	
  5973	/dev/tty user's teletype
  5974	
  5975	Bugs
  5976	
  5977	Opens the teletype directly to do user querying.
  5978	
  5979	Source files with links make a new copy of the file with only one link to it.
  5980	
  5981	Changing a language processor's format of error messages may cause error to not
  5982	understand the error message.
  5983	
  5984	Error, since it is purely mechanical, will not filter out subsequent errors
  5985	caused by floodgating initiated by one syntactically trivial error. Humans are
  5986	still much better at discarding these related errors.
  5987	
  5988	Pascal error messages belong after the lines affected (error puts them before).
  5989	The alignment of the \ marking the point of error is also disturbed by error.
  5990	
  5991	Error was designed for work on CRT's at reasonably high speed. It is less
  5992	pleasant on slow speed terminals, and has never been used on hardcopy
  5993	terminals.
  5994	
  5995	errx
  5996	
  5997	Name
  5998	
  5999	errx -- format error messages
  6000	
  6001	Synopsis
  6002	
  6003	#include <err.h>
  6004	
  6005	void errx(int eval, const char *fmt, ...);
  6006	
  6007	Description
  6008	
  6009	The errx() function displays a formatted error message on the standard error
  6010	output. The last component of the program name, a colon character, and a space
  6011	are output. If the fmt argument is not NULL, the formatted error message, a
  6012	colon character, and a space are output. The output is followed by a newline
  6013	character.
  6014	
  6015	The errx() function does not return, but exits with the value of the argument
  6016	eval.
  6017	
  6018	flock
  6019	
  6020	Name
  6021	
  6022	flock -- apply or remove an advisory lock on an open file
  6023	
  6024	Synopsis
  6025	
  6026	int flock(int fd, int operation);
  6027	
  6028	Description
  6029	
  6030	Apply or remove an advisory lock on an open file. The file is specified by fd.
  6031	Valid operations are given below:
  6032	
  6033	LOCK_SH
  6034	   
  6035	    Shared lock. More than one process may hold a shared lock for a given file
  6036	    at a given time.
  6037	   
  6038	LOCK_EX
  6039	   
  6040	    Exclusive lock. Only one process may hold an exclusive lock for a given
  6041	    file at a given time.
  6042	   
  6043	LOCK_UN
  6044	   
  6045	    Unlock.
  6046	   
  6047	LOCK_NB
  6048	   
  6049	    Don't block when locking. May be specified (by or'ing) along with one of
  6050	    the other operations.
  6051	   
  6052	A single file may not simultaneously have both shared and exclusive locks.
  6053	
  6054	Return Value
  6055	
  6056	On success, zero is returned. On error, -1 is returned, and errno is set
  6057	appropriately.
  6058	
  6059	Errors
  6060	
  6061	EWOULDBLOCK
  6062	   
  6063	    The file is locked and the LOCK_NB flag was selected.
  6064	   
  6065	fstatfs
  6066	
  6067	Name
  6068	
  6069	fstatfs -- get file system statistics
  6070	
  6071	Synopsis
  6072	
  6073	#include <sys/vfs.h>
  6074	
  6075	int fstatfs(int fd, struct statfs *buf);
  6076	
  6077	Description
  6078	
  6079	fstatfs returns information about a mounted file system. fd is the open file
  6080	descriptor of any file within the mounted filesystem. buf is a pointer to a
  6081	statfs structure defined as follows:
  6082	
  6083	struct statfs {
  6084	   
  6085	    long f_type; /* type of filesystem (see below) */
  6086	   
  6087	    long f_bsize; /* optimal transfer block size */
  6088	   
  6089	    long f_blocks; /* total data blocks in file system */
  6090	   
  6091	    long f_bfree; /* free blocks in fs */
  6092	   
  6093	    long f_bavail; /* free blocks avail to non-superuser */
  6094	   
  6095	    long f_files; /* total file nodes in file system */
  6096	   
  6097	    long f_ffree; /* free file nodes in fs */
  6098	   
  6099	    fsid_t f_fsid; /* file system id */
  6100	   
  6101	    long f_namelen; /* maximum length of filenames */
  6102	   
  6103	    long f_spare[6]; /* spare for later */
  6104	   
  6105	    };
  6106	   
  6107	Fields that are undefined for a particular file system are set to 0.
  6108	
  6109	Return Value
  6110	
  6111	On success, zero is returned. On error, -1 is returned, and errno is set
  6112	appropriately.
  6113	
  6114	Errors
  6115	
  6116	EBADF
  6117	   
  6118	    fd is not a valid open file descriptor.
  6119	   
  6120	EFAULT
  6121	   
  6122	    buf points to an invalid address.
  6123	   
  6124	EIO
  6125	   
  6126	    An I/O error occurred while reading from or writing to the file system.
  6127	   
  6128	ENOSYS
  6129	   
  6130	    The filesystem fd is open on does not support statfs.
  6131	   
  6132	fwprintf
  6133	
  6134	Name
  6135	
  6136	fwprintf -- formatted wide character output conversion
  6137	
  6138	Synopsis
  6139	
  6140	int fwprintf(FILE* stream, const wchar_t* format, ...);
  6141	
  6142	Description
  6143	
  6144	The specification for "fwprintf" is as specified in the SUSv2 but with the
  6145	following differences as listed below.
  6146	
  6147	Wide-character Conversion:
  6148	
  6149	The following wide-character are not specified in GNU:
  6150	
  6151	d, i, o, u, x, X, f, e, E , g, G , c, s, p, n, C, S, %
  6152	
  6153	Errors
  6154	
  6155	The following error types are not specified in GNU:
  6156	
  6157	EILSEQ
  6158	
  6159	EINVAL
  6160	
  6161	ENOMEM
  6162	
  6163	gethostbyname
  6164	
  6165	Name
  6166	
  6167	gethostbyname -- get network host entry
  6168	
  6169	Synopsis
  6170	
  6171	#include <netdb.h>
  6172	extern int h_errno;
  6173	
  6174	struct hostent *gethostbyname(const char *name);
  6175	
  6176	Description
  6177	
  6178	The gethostbyname() function returns a structure of type hostent for the given
  6179	host name. Here name is either a host name, or an IPv4 address in standard dot
  6180	notation, or an IPv6 address in colon (and possibly dot) notation. (See RFC
  6181	1884 for the description of IPv6 addresses.) If name is an IPv4 or IPv6
  6182	address, no lookup is performed and gethostbyname() simply copies name into the
  6183	h_name field and its struct in_addr equivalent into the h_addr_list[0] field of
  6184	the returned hostent structure. If name doesn't end in a dot and the
  6185	environment variable HOSTALIASES is set, the alias file pointed to by
  6186	HOSTALIASES will first be searched for name (see hostname(7) for the file
  6187	format). The current domain and its parents are searched unless name ends in a
  6188	dot.
  6189	
  6190	The domain name queries carried out by gethostbyname() use a combination of any
  6191	or all of the name server named(8), a broken out line from /etc/hosts, and the
  6192	Network Information Service (NIS or YP), depending upon the contents of the
  6193	order line in /etc/host.conf. (See resolv+(8)). The default action is to query
  6194	named(8), followed by /etc/hosts.
  6195	
  6196	The hostent structure is defined in <netdb.h> as follows:
  6197	
  6198	struct hostent {
  6199	   
  6200	    char *h_name; /* official name of host */
  6201	   
  6202	    char **h_aliases; /* alias list */
  6203	   
  6204	    int h_addrtype; /* host address type */
  6205	   
  6206	    int h_length; /* length of address */
  6207	   
  6208	    char **h_addr_list; /* list of addresses */
  6209	   
  6210	    }
  6211	   
  6212	#define h_addr h_addr_list[0] /* for backward compatibility */
  6213	
  6214	Return Value
  6215	
  6216	The gethostbyname()) functions return the hostent structure or a NULL pointer
  6217	if an error occurs. On error, the h_errno variable holds an error number.
  6218	
  6219	Errors
  6220	
  6221	ENOMEM
  6222	   
  6223	    Insufficient memory to complete the operation.
  6224	   
  6225	getloadavg
  6226	
  6227	Name
  6228	
  6229	getloadavg -- get system load averages
  6230	
  6231	Synopsis
  6232	
  6233	#include <stdlib.h>
  6234	
  6235	int getloadavg(double loadavg[], int nelem);
  6236	
  6237	Description
  6238	
  6239	The getloadavg() function returns the number of processes in the system run
  6240	queue averaged over various periods of time. Up to nelem samples are retrieved
  6241	and assigned to successive elements of loadavg[]. The system imposes a maximum
  6242	of 3 samples, representing averages over the last 1, 5, and 15 minutes,
  6243	respectively.
  6244	
  6245	getopt
  6246	
  6247	Name
  6248	
  6249	getopt -- parse command line options
  6250	
  6251	Synopsis
  6252	
  6253	int getopt(int argc, char * const argv[], const char *optstring);
  6254	extern char *optarg;
  6255	extern int optind, opterr, optopt;
  6256	
  6257	GNU supports the following extensions of getopt:
  6258	
  6259	int getopt_long(int argc, char * const argv[],
  6260	               const char *optstring,
  6261	               const struct option *longopts, int *longindex);
  6262	
  6263	int getopt_long_only(int argc, char * const argv[],
  6264	                    const char *optstring,
  6265	                    const struct option *longopts, int *longindex);
  6266	
  6267	Description
  6268	
  6269	The getopt() function parses command line arguments. GNU and POSIX
  6270	specifications for this function vary in the following areas.
  6271	
  6272	Option Characteristics
  6273	
  6274	GNU specifies that:
  6275	
  6276	  * an element of argv that starts with "-" (and is not exactly "-" or "--") is
  6277	    an option element.
  6278	   
  6279	  * characters of an option element, aside from the initial "-", are option
  6280	    characters.
  6281	   
  6282	POSIX specifies that:
  6283	
  6284	  * applications using getopt() must obey the following syntax guidelines:
  6285	   
  6286	      + option name is a single alphanumeric character from the portable
  6287	        character set
  6288	       
  6289	      + option is preceded by the "-" delimiter character
  6290	       
  6291	      + options without option-arguments should be accepted when grouped behind
  6292	        one "-" delimiter
  6293	       
  6294	      + each option and option-argument is a separate argument
  6295	       
  6296	      + option-arguments are not optional
  6297	       
  6298	      + all options should precede operands on the command line
  6299	       
  6300	      + the argument "--" is accepted as a delimiter indicating the end of
  6301	        options and the consideration of subsequent arguments, if any, as
  6302	        operands
  6303	       
  6304	  * historical implementations of getopt() support other characters as options
  6305	    as an allowed extension, but applications that use extensions are not
  6306	    maximally portable.
  6307	   
  6308	  * support for multi-byte option characters is only possible when such
  6309	    characters can be represented as type int.
  6310	   
  6311	  * applications that call any utility with a first operand starting with "-"
  6312	    should usually specify "--" to mark the end of the options. Standard
  6313	    utilities that do not support this guideline indicate that fact in the
  6314	    OPTIONS section of the utility description.
  6315	   
  6316	Extensions
  6317	
  6318	GNU specifies that:
  6319	
  6320	  * if a character is followed by two colons, the option takes an optional arg;
  6321	    if there is text in the current argv-element, it is returned in optarg,
  6322	    otherwise optarg is set to zero.
  6323	   
  6324	  * if optstring contains W followed by a semi-colon, then -W foo is treated as
  6325	    the long option --foo. (Not available with libraries before GNU libc 2.)
  6326	   
  6327	  * getopt_long() works like getopt() except that it also accepts "long
  6328	    options", or, options that are preface with two dashes instead of one.
  6329	   
  6330	  * long option names may be abbreviated if the abbreviation is unique or an
  6331	    exact match for some defined option.
  6332	   
  6333	  * a long option may take a parameter, of the form --arg=param or --arg param.
  6334	   
  6335	  * getopt_long_only() works like getopt_long(), except that both "-" and "--"
  6336	    indicate long option. If an option that starts with "-" (not "--") doesn't
  6337	    match a long option, but does match a short option, it is parsed instead as
  6338	    a short option.
  6339	   
  6340	POSIX specifies that:
  6341	
  6342	  * the -W option is reserved for implementation extensions.
  6343	   
  6344	Return Values
  6345	
  6346	GNU specifies the following getopt() return values:
  6347	
  6348	  * the next option character is returned, if found successfully.
  6349	   
  6350	  * colon character (":") is returned if a parameter is missing for one of the
  6351	    options.
  6352	   
  6353	  * question mark ("?") is returned if an unknown option character is
  6354	    encountered.
  6355	   
  6356	  * "-1" is returned for the end of the option list.
  6357	   
  6358	GNU specifies the following getopt_long() and getopt_long_only() return values:
  6359	
  6360	  * when short option is recognized, the option character is returned.
  6361	   
  6362	  * when long option is recognized, val is returned if flag is NULL, otherwise,
  6363	    0 is returned.
  6364	   
  6365	  * error and -1 returns are the same as for getopt().
  6366	   
  6367	  * question mark ("?") is returned for an ambiguous match or an extraneous
  6368	    parameter.
  6369	   
  6370	POSIX specifies the following getopt() return values:
  6371	
  6372	  * the next option character is returned, if found successfully.
  6373	   
  6374	  * colon character (":") is returned if a parameter is missing for one of the
  6375	    options and the first character of opstring is ":".
  6376	   
  6377	  * question mark ("?") is returned if an unknown option character not in
  6378	    optstring is encountered, or if getopt() detects a missing argument and the
  6379	    first character of optstring is not ":".
  6380	   
  6381	  * "-1" is returned for the end of the option list.
  6382	   
  6383	Environmental Variables
  6384	
  6385	GNU specifies that:
  6386	
  6387	  * if the variable POSIXLY_CORRECT is set, option processing stops as soon as
  6388	    a non-option argument is encountered.
  6389	   
  6390	  * if POSIXLY_CORRECT is set, GNU getopt() conforms to POSIX.2.
  6391	   
  6392	  * the variable _[PID]_GNU_nonoption_argv_flags_ was used by bash 2.0 to
  6393	    communicate to GNU libc which arguments resulted from wildcard expansion
  6394	    and so should not be considered as options. This behavior was removed in
  6395	    bash version 2.01, but the support remains in GNU libc.
  6396	   
  6397	Environmental Variables
  6398	
  6399	POSIX.2 Interpretation 150 reports a technical error in the function of getopt
  6400	(). GNU implements the correct behavior of getopt().
  6401	
  6402	getopt_long
  6403	
  6404	Name
  6405	
  6406	getopt_long -- parse command line options
  6407	
  6408	Synopsis
  6409	
  6410	#define _GNU_SOURCE
  6411	#include <getopt.h>
  6412	
  6413	int getopt_long(int argc, char * const argv[],
  6414	           const char *optstring,
  6415	           const struct option *longopts, int *longindex);
  6416	
  6417	Description
  6418	
  6419	The getopt_long() function works like getopt() except that it also accepts long
  6420	options, started out by two dashes. Long option names may be abbreviated if the
  6421	abbreviation is unique or is an exact match for some defined option. A long
  6422	option may take a parameter, of the form --arg=param or --arg param.
  6423	
  6424	longopts is a pointer to the first element of an array of struct option
  6425	declared in <getopt.h> as
  6426	
  6427	struct option {
  6428	   
  6429	    const char *name;
  6430	   
  6431	    int *flag;
  6432	   
  6433	    int has_arg;
  6434	   
  6435	    int val;
  6436	   
  6437	    };
  6438	   
  6439	Return Value
  6440	
  6441	The getopt_long() function returns the option character if the option was found
  6442	successfully, : if there was a missing parameter for one of the options, ? for
  6443	an unknown option character, or -1 for the end of the option list.
  6444	
  6445	getopt_long() also returns the option character when a short option is
  6446	recognized. For a long option, they return val if flag is NULL, and 0
  6447	otherwise. Error and -1 returns are the same as for getopt(), plus ? for an
  6448	ambiguous match or an extraneous parameter.
  6449	
  6450	getopt_long_only
  6451	
  6452	Name
  6453	
  6454	getopt_long_only -- parse command line options
  6455	
  6456	Synopsis
  6457	
  6458	#define _GNU_SOURCE
  6459	#include <getopt.h>
  6460	
  6461	int getopt_long_only(int argc, char * const argv[],
  6462	           const char *optstring,
  6463	           const struct option *longopts, int *longindex);
  6464	
  6465	Description
  6466	
  6467	getopt_long_only() is like getopt_long(), but - as well as -- can indicate a
  6468	long option. If an option that starts with - (not --) doesn't match a long
  6469	option, but does match a short option, it is parsed as a short option instead.
  6470	
  6471	Return Value
  6472	
  6473	The function getopt_long_only() returns the option character if the option was
  6474	found successfully, : if there was a missing parameter for one of the options,
  6475	? for an unknown option character, or -1 for the end of the option list.
  6476	getopt_long_only() also returns the option character when a short option is
  6477	recognized. For a long option, they return val if flag is NULL, and 0
  6478	otherwise. Error and -1 returns are the same as for getopt(), plus ? for an
  6479	ambiguous match or an extraneous parameter.
  6480	
  6481	getprotobyname
  6482	
  6483	Name
  6484	
  6485	getprotobyname -- get protocol entry
  6486	
  6487	Synopsis
  6488	
  6489	struct protoent *getprotobynumber(int proto);
  6490	
  6491	Description
  6492	
  6493	The getprotobyname() function returns a protoent structure for the line from /
  6494	etc/protocols that matches the protocol name name.
  6495	
  6496	The protoent structure is defined in <netdb.h> as follows:
  6497	
  6498	struct protoent {
  6499	   
  6500	    char *p_name; /* official protocol name */
  6501	   
  6502	    char **p_aliases; /* alias list */
  6503	   
  6504	    int p_proto; /* protocol number */
  6505	   
  6506	    }
  6507	   
  6508	Return Value
  6509	
  6510	The getprotobyname() function returns the protoent structure, or a NULL pointer
  6511	if an error occurs or the end of the file is reached.
  6512	
  6513	Files
  6514	
  6515	/etc/protocols protocol database file
  6516	
  6517	getprotoent
  6518	
  6519	Name
  6520	
  6521	getprotoent -- get protocol entry
  6522	
  6523	Synopsis
  6524	
  6525	struct protoent *getprotoent(void);
  6526	
  6527	Description
  6528	
  6529	The getprotoent() function reads the next line from the file /etc/protocols and
  6530	returns a structure protoent containing the broken out fields from the line.
  6531	The /etc/protocols file is opened if necessary.
  6532	
  6533	The protoent structure is defined in <netdb.h> as follows:
  6534	
  6535	struct protoent {
  6536	   
  6537	    char *p_name; /* official protocol name */
  6538	   
  6539	    char **p_aliases; /* alias list */
  6540	   
  6541	    int p_proto; /* protocol number */
  6542	   
  6543	    }
  6544	   
  6545	Return Value
  6546	
  6547	The getprotoent() function returns the protoent structure, or a NULL pointer if
  6548	an error occurs or the end of the file is reached.
  6549	
  6550	Files
  6551	
  6552	/etc/protocols protocol database file
  6553	
  6554	getservbyname
  6555	
  6556	Name
  6557	
  6558	getservbyname -- get service entry
  6559	
  6560	Synopsis
  6561	
  6562	#include <netdb.h>
  6563	
  6564	struct servent *getservbyname(const char *name, const char *proto);
  6565	
  6566	Description
  6567	
  6568	The getservbyname() function returns a servent structure for the line from /etc
  6569	/services that matches the service name using protocol proto.
  6570	
  6571	The servent structure is defined in <netdb.h> as follows:
  6572	
  6573	struct servent {
  6574	   
  6575	    char *s_name; /* official service name */
  6576	   
  6577	    char **s_aliases; /* alias list */
  6578	   
  6579	    int s_port; /* port number */
  6580	   
  6581	    char *s_proto; /* protocol to use */
  6582	   
  6583	    }
  6584	   
  6585	Return Value
  6586	
  6587	getservbyname() returns the servent structure, or a NULL pointer if an error
  6588	occurs or the end of the file is reached.
  6589	
  6590	Files
  6591	
  6592	/etc/services services database file
  6593	
  6594	getservent
  6595	
  6596	Name
  6597	
  6598	getservent -- get service entry
  6599	
  6600	Synopsis
  6601	
  6602	#include <netdb.h>
  6603	
  6604	struct servent *getservent(void);
  6605	
  6606	Description
  6607	
  6608	The getservent() function reads the next line from the file /etc/services and
  6609	returns a structure servent containing the broken out fields from the line. The
  6610	/etc/services file is opened if necessary.
  6611	
  6612	The servent structure is defined in <netdb.h> as follows:
  6613	
  6614	struct servent {
  6615	   
  6616	    char *s_name; /* official service name */
  6617	   
  6618	    char **s_aliases; /* alias list */
  6619	   
  6620	    int s_port; /* port number */
  6621	   
  6622	    char *s_proto; /* protocol to use */
  6623	   
  6624	    }
  6625	   
  6626	Return Value
  6627	
  6628	getservent() returns the servent structure, or a NULL pointer if an error
  6629	occurs or the end of the file is reached.
  6630	
  6631	Files
  6632	
  6633	/etc/services services database file
  6634	
  6635	gettext
  6636	
  6637	Name
  6638	
  6639	gettext -- look up MSGID in the current default message catalog for the current
  6640	LC_MESSAGES locale
  6641	
  6642	Synopsis
  6643	
  6644	#include <libintl.h>
  6645	
  6646	extern char *gettext((const char *msgid));
  6647	
  6648	Description
  6649	
  6650	Used to look up the MSGID in the DOMAINNAME message catalog for the current
  6651	CATEGORY locale. If not found, returns MSGID itself (the default text).
  6652	
  6653	getutent
  6654	
  6655	Name
  6656	
  6657	getutent -- access utmp file entries
  6658	
  6659	Synopsis
  6660	
  6661	#include <utmp.h>
  6662	
  6663	struct utmp *getutent(void);
  6664	
  6665	Description
  6666	
  6667	getutent() reads a line from the current file position in the utmp file. It
  6668	returns a pointer to a structure containing the fields of the line.
  6669	
  6670	Return Value
  6671	
  6672	getutent() returns a pointer to a static struct utmp.
  6673	
  6674	Errors
  6675	
  6676	On error, (struct utmp*)0 will be returned.
  6677	
  6678	Files
  6679	
  6680	/var/run/utmp database of currently logged-in users
  6681	
  6682	/var/log/wtmp database of past user logins
  6683	
  6684	glob64
  6685	
  6686	Name
  6687	
  6688	glob64 -- find pathnames matching a pattern (Large File Support)
  6689	
  6690	Synopsis
  6691	
  6692	#include <glob.h>
  6693	int glob64((const char *pattern, int flags,
  6694	            int (*errfunc) (const char *, int),
  6695	            glob64_t *pglob));
  6696	
  6697	Description
  6698	
  6699	The glob64() function searches for all the pathnames matching pattern according
  6700	to the rules used by the shell (see glob(7)). No tilde expansion or parameter
  6701	substitution is done; if you want these, use wordexp(3). The results of a
  6702	glob64() call are stored in the structure pointed to by pglob, which is a
  6703	glob64_t which is declared in <glob.h> and includes the following elements
  6704	defined by POSIX.2 (more may be present as an extension): 
  6705	
  6706	The glob64() function is a 64-bit version of glob.
  6707	
  6708	Return Value
  6709	
  6710	On successful completion, glob64() returns zero. Other possible returns are:
  6711	GLOB_NOSPACE for running out of memory, GLOB_ABORTED for a read error, and
  6712	GLOB_NOMATCH for no found matches.
  6713	
  6714	globfree64
  6715	
  6716	Name
  6717	
  6718	globfree64 -- free memory from glob64() (Large File Support)
  6719	
  6720	Synopsis
  6721	
  6722	#include <glob.h>
  6723	
  6724	void globfree64(glob64_t *pglob);
  6725	
  6726	Description
  6727	
  6728	The globfree64() function frees the dynamically allocate storage from an
  6729	earlier call to glob64().
  6730	
  6731	The globfree64 function is a 64-bit version of globfree.
  6732	
  6733	initgroups
  6734	
  6735	Name
  6736	
  6737	initgroups -- initialize the supplementary group access list
  6738	
  6739	Synopsis
  6740	
  6741	#include <grp.h>
  6742	#include <sys/types.h>
  6743	
  6744	int initgroups(const char *user, gid_t group);
  6745	
  6746	Description
  6747	
  6748	The initgroups() function initializes the group access list by reading the
  6749	group database /etc/group and using all groups of which user is a member. The
  6750	additional group group is also added to the list.
  6751	
  6752	Return Value
  6753	
  6754	On success, zero is returned. On error, -1 is returned, and errno is set
  6755	appropriately.
  6756	
  6757	Errors
  6758	
  6759	EPERM
  6760	   
  6761	    The calling process does not have sufficient privileges.
  6762	   
  6763	ENOMEM
  6764	   
  6765	    Insufficient memory to allocate group information structure.
  6766	   
  6767	Files
  6768	
  6769	/etc/group group database file
  6770	
  6771	isblank
  6772	
  6773	Name
  6774	
  6775	isblank -- character classification routine
  6776	
  6777	Synopsis
  6778	
  6779	#include <ctype.h>
  6780	
  6781	int isblank(int c);
  6782	
  6783	Description
  6784	
  6785	This functions checks whether c, which must have the value of an unsigned char
  6786	or EOF, falls into a certain character class according to the current locale.
  6787	
  6788	isblank() checks for a blank character; that is, a space or a tab. This
  6789	function is a GNU extension.
  6790	
  6791	Return Value
  6792	
  6793	The values returned are nonzero if the character c falls into the tested class,
  6794	and a zero value if not.
  6795	
  6796	Notes
  6797	
  6798	The details of what characters belong into which class depend on the current
  6799	locale. For example, isupper() will not recognize an A - umlaut as an uppercase
  6800	letter in the default C locale.
  6801	
  6802	iswblank
  6803	
  6804	Name
  6805	
  6806	iswblank -- test for whitespace wide character
  6807	
  6808	Synopsis
  6809	
  6810	#include <wctype.h>
  6811	
  6812	int iswblank(wint_t wc);
  6813	
  6814	Description
  6815	
  6816	The iswblank function is the wide-character equivalent of the isblank function.
  6817	It tests whether wc is a wide character belonging to the wide character class
  6818	"blank".
  6819	
  6820	The wide character class "blank" is a subclass of the wide character class
  6821	"space".
  6822	
  6823	Being a subclass of the wide character class "space", the wide character class
  6824	"blank" is disjoint from the wide character class "graph" and therefore also
  6825	disjoint from its subclasses "alnum", "alpha", "upper", "lower", "digit",
  6826	"xdigit", "punct".
  6827	
  6828	The wide character class "blank" always contains at least the space character
  6829	and the control character '\t'.
  6830	
  6831	Return Value
  6832	
  6833	The iswblank function returns non-zero if wc is a wide character belonging to
  6834	the wide character class "blank". Otherwise it returns zero.
  6835	
  6836	Notes
  6837	
  6838	The behavior of iswblank depends on the LC_CTYPE category of the current
  6839	locale.
  6840	
  6841	iswctype
  6842	
  6843	Name
  6844	
  6845	iswctype -- wide character classification
  6846	
  6847	Synopsis
  6848	
  6849	#include <wctype.h>
  6850	
  6851	int iswctype(wint_t wc, wctype_t desc);
  6852	
  6853	Description
  6854	
  6855	If wc is a wide character having the character property designated by desc (or
  6856	in other words: belongs to the character class designated by desc), the
  6857	iswctype function returns non-zero. Otherwise it returns zero. If wc is WEOF,
  6858	zero is returned.
  6859	
  6860	desc must be a character property descriptor returned by the wctype function.
  6861	
  6862	Return Value
  6863	
  6864	iswctype returns non-zero if the wc has the designated property. Otherwise it
  6865	returns 0.
  6866	
  6867	Notes
  6868	
  6869	The behavior of iswctype depends on the LC_CTYPE category of the current
  6870	locale.
  6871	
  6872	kill
  6873	
  6874	Name
  6875	
  6876	kill -- send a signal
  6877	
  6878	Synopsis
  6879	
  6880	int kill(pid_t pid, int sig);
  6881	
  6882	Description
  6883	
  6884	The specification for "kill" is as specified in the SUSv2 but with the
  6885	following differences as listed below.
  6886	
  6887	Process ID -1 doesn't affect calling process
  6888	
  6889	If pid is specified as -1, sig shall not be sent to the calling process. Other
  6890	than this, the rules in the SUSv2 apply.
  6891	
  6892	Rationale: Linux users/programs expect to exclude the calling process, which is
  6893	the historic Linux behavior. After an experiment with including the calling
  6894	process in 2.5.1 Linus has decided to go back to the traditional Linux
  6895	behavior. Affected programs include killall5 and some versions of shutdown.
  6896	Another example is the shell command "kill -KILL -1" which is expected to not
  6897	kill the shell from which it is run. See "What does it mean to signal
  6898	everybody?", Linux Weekly News, 20 December 2001 ( http://lwn.net/2001/1220/
  6899	kernel.php3 ).
  6900	
  6901	mbsnrtowcs
  6902	
  6903	Name
  6904	
  6905	mbsnrtowcs -- convert a multibyte string to a wide character string
  6906	
  6907	Synopsis
  6908	
  6909	#include <wchar.h>
  6910	
  6911	size_t mbsnrtowcs(wchar_t *dest, const char **src,
  6912	                  size_t nms, size_t len, mbstate_t *ps);
  6913	
  6914	Description
  6915	
  6916	The mbsnrtowcs function is like the mbsrtowcs function, except that the number
  6917	of bytes to be converted, starting at *src, is limited to nms.
  6918	
  6919	If dest is not a NULL pointer, the mbsnrtowcs function converts at most nms
  6920	bytes from the multibyte string *src to a wide-character string starting at
  6921	dest. At most len wide characters are written to dest. The state *ps is
  6922	updated. The conversion is effectively performed by repeatedly calling mbrtowc
  6923	(dest,*src,n,ps) where n is some positive number, as long as this call
  6924	succeeds, and then incrementing dest by one and *src by the number of bytes
  6925	consumed. The conversion can stop for three reasons:
  6926	
  6927	1. An invalid multibyte sequence has been encountered. In this case *src is
  6928	left pointing to the invalid multibyte sequence, (size_t)(-1) is returned, and
  6929	errno is set to EILSEQ.
  6930	
  6931	2. The nms limit forces a stop, or len non-L'\0' wide characters have been
  6932	stored at dest. In this case *src is left pointing to the next multibyte
  6933	sequence to be converted, and the number of wide characters written to dest is
  6934	returned.
  6935	
  6936	3. The multibyte string has been completely converted, including the
  6937	terminating '\0' (which has the side effect of bringing back *ps to the initial
  6938	state). In this case *src is set to NULL, and the number of wide characters
  6939	written to dest, excluding the terminating L'\0' character, is returned.
  6940	
  6941	If dest is NULL, len is ignored, and the conversion proceeds as above, except
  6942	that the converted wide characters are not written out to memory, and that no
  6943	destination length limit exists.
  6944	
  6945	In both of the above cases, if ps is a NULL pointer, a static anonymous state
  6946	only known to the mbsnrtowcs function is used instead.
  6947	
  6948	The programmer must ensure that there is room for at least len wide characters
  6949	at dest.
  6950	
  6951	Return Value
  6952	
  6953	The mbsnrtowcs function returns the number of wide characters that make up the
  6954	converted part of the wide character string, not including the terminating null
  6955	wide character. If an invalid multibyte sequence was encountered, (size_t)(-1)
  6956	is returned, and errno set to EILSEQ.
  6957	
  6958	Notes
  6959	
  6960	The behavior of mbsnrtowcs depends on the LC_CTYPE category of the current
  6961	locale.
  6962	
  6963	Passing NULL as ps is not multi-thread safe.
  6964	
  6965	memmem
  6966	
  6967	Name
  6968	
  6969	memmem -- locate a substring
  6970	
  6971	Synopsis
  6972	
  6973	#define _GNU_SOURCE
  6974	#include <string.h>
  6975	
  6976	void *memmem(const void *haystack, size_t haystacklen,
  6977	             const void *needle, size_t needlelen);
  6978	
  6979	Description
  6980	
  6981	The memmem() function finds the start of the first occurrence of the substring
  6982	needle of length needlelen in the memory area haystack of length haystacklen.
  6983	
  6984	Return Value
  6985	
  6986	The memmem() function returns a pointer to the beginning of the substring, or
  6987	NULL if the substring is not found.
  6988	
  6989	Notes
  6990	
  6991	This function was broken in Linux libraries up to and including libc 5.0.9;
  6992	there the needle and haystack arguments were interchanged, and a pointer to the
  6993	end of the first occurrence of needle was returned. Since libc 5.0.9 is still
  6994	widely used, this is a dangerous function to use.
  6995	
  6996	Both old and new libc's have the bug that if needle is empty haystack-1
  6997	(instead of haystack) is returned. And glibc 2.0 makes it worse, and returns a
  6998	pointer to the last byte of haystack. This is fixed in glibc 2.1.
  6999	
  7000	memrchr
  7001	
  7002	Name
  7003	
  7004	memrchr -- scan memory for a character
  7005	
  7006	Synopsis
  7007	
  7008	#include <string.h>
  7009	
  7010	void *memrchr(const void *s, int c, size_t n);
  7011	
  7012	Description
  7013	
  7014	memrchr() returns a pointer to the last occurrence of the character represented
  7015	by c in the first n characters of the string represented by s.
  7016	
  7017	obstack_free
  7018	
  7019	Name
  7020	
  7021	obstack_free -- free an object in the obstack
  7022	
  7023	Synopsis
  7024	
  7025	#include <obstack.h>
  7026	
  7027	void obstack_free(struct obstack *obstack, void *block);
  7028	
  7029	Description
  7030	
  7031	Free an object in the obstack.
  7032	
  7033	opterr
  7034	
  7035	Name
  7036	
  7037	opterr -- external variable used in getopt()
  7038	
  7039	Synopsis
  7040	
  7041	extern int opterr;
  7042	
  7043	Description
  7044	
  7045	opterr is used as a flag to suppress error message generated by getopt(). When
  7046	opterr is set to 0; it suppresses the error message generated by getopt() when
  7047	getopt() does not recognize an option character.
  7048	
  7049	optind
  7050	
  7051	Name
  7052	
  7053	optind -- external variable used in getopt()
  7054	
  7055	Synopsis
  7056	
  7057	extern int optind;
  7058	
  7059	Description
  7060	
  7061	optind holds the current index of the array argr[] which contains the command
  7062	line options being parsed by getopt().
  7063	
  7064	optopt
  7065	
  7066	Name
  7067	
  7068	optopt -- external variable used in getopt()
  7069	
  7070	Synopsis
  7071	
  7072	extern int optopt;
  7073	
  7074	Description
  7075	
  7076	optopt holds the unknown option character when that option character is not
  7077	recognized by getopt()
  7078	
  7079	psignal
  7080	
  7081	Name
  7082	
  7083	psignal -- print signal message
  7084	
  7085	Synopsis
  7086	
  7087	#include <signal.h>
  7088	
  7089	void psignal(int sig, const char *s);
  7090	
  7091	extern const char *const sys_siglist[]
  7092	
  7093	Description
  7094	
  7095	The psignal() function displays a message on stderr consisting of the string s,
  7096	a colon, a space, and a string describing the signal number sig. If sig is
  7097	invalid, the message displayed will indicate an unknown signal.
  7098	
  7099	The array sys_siglist holds the signal description strings indexed by signal
  7100	number.
  7101	
  7102	Return Value
  7103	
  7104	psignal() returns no value.
  7105	
  7106	setbuffer
  7107	
  7108	Name
  7109	
  7110	setbuffer -- stream buffering operation
  7111	
  7112	Synopsis
  7113	
  7114	#include <stdio.h>
  7115	
  7116	void setbuffer(FILE *stream, char *buf, size_tsize);
  7117	
  7118	Description
  7119	
  7120	setbuffer is an alias for call to setvbuf. It works the same, except that the
  7121	size of the buffer is up to the caller, rather than being determined by the
  7122	default BUFSIZ.
  7123	
  7124	setegid
  7125	
  7126	Name
  7127	
  7128	setegid -- set real and / or effective group ID
  7129	
  7130	Synopsis
  7131	
  7132	#include <sys/types.h>
  7133	#include <unistd.h>
  7134	
  7135	int setegid(gid_t egid);
  7136	
  7137	Description
  7138	
  7139	setegid sets real and effective group ID's of the current process. Unprivileged
  7140	users may change the real group ID to the effective group ID and vice-versa. 
  7141	
  7142	Prior to Linux 1.1.38, the saved ID paradigm, when used with setegid was
  7143	broken. Starting at 1.1.38, it is also possible to set the effective group ID
  7144	from the saved group ID.
  7145	
  7146	Only the super-user may make other changes.
  7147	
  7148	Supplying a value of -1 for either the real or effective group ID forces the
  7149	system to leave that ID unchanged.
  7150	
  7151	Currently (libc-4.x.x), setegid(egid) is functionally equivalent to setregid
  7152	(-1, egid).
  7153	
  7154	If the real group ID is changed or the effective group ID is set to a value not
  7155	equal to the previous real group ID, the saved group ID will be set to the new
  7156	effective group ID.
  7157	
  7158	Return Value
  7159	
  7160	On success, zero is returned. On error, -1 is returned, and errno is set
  7161	appropriately.
  7162	
  7163	Errors
  7164	
  7165	EPERM
  7166	   
  7167	    The current process is not the super-user and changes other than (i)
  7168	    swapping the effective group ID with the real group ID or (ii) setting one
  7169	    to the value of the other or (iii) setting the effective group ID to the
  7170	    value of the saved group ID was specified.
  7171	   
  7172	seteuid
  7173	
  7174	Name
  7175	
  7176	seteuid -- set real and/or effective user ID
  7177	
  7178	Synopsis
  7179	
  7180	#include <sys/types.h>
  7181	#include <unistd.h>
  7182	
  7183	int seteuid(uid_t euid);
  7184	
  7185	Description
  7186	
  7187	seteuid sets real and effective user ID's of the current process. Un-privileged
  7188	users may change the real user ID to the effective user ID and vice-versa.
  7189	
  7190	Prior to Linux 1.1.37, the saved ID paradigm, when used with seteuid was
  7191	broken.
  7192	
  7193	Starting at 1.1.37, it is also possible to set the effective user ID from the
  7194	saved user ID.
  7195	
  7196	Only the super-user may make other changes.
  7197	
  7198	Supplying a value of -1 for either the real or effective user ID forces the
  7199	system to leave that ID unchanged.
  7200	
  7201	Currently seteuid(euid) is functionally equivalent to setreuid(-1, euid).
  7202	
  7203	If the real user ID is changed or the effective user ID is set to a value not
  7204	equal to the previous real user ID, the saved user ID will be set to the new
  7205	effective user ID.
  7206	
  7207	Return Value
  7208	
  7209	On success, zero is returned. On error, -1 is returned, and errno is set
  7210	appropriately.
  7211	
  7212	Errors
  7213	
  7214	EPERM
  7215	
  7216	    The current process is not the super-user and changes other than (i)
  7217	    swapping the effective user ID with the real user ID or (ii) setting one to
  7218	    the value of the other or (iii) setting the effective user ID to the value
  7219	    of the saved user ID was specified.
  7220	   
  7221	setgroups
  7222	
  7223	Name
  7224	
  7225	setgroups -- set list of supplementary group IDs
  7226	
  7227	Synopsis
  7228	
  7229	#define __USE_BSD
  7230	#include <grp.h>
  7231	
  7232	int setgroups(size_t size, const gid_t *list);
  7233	
  7234	Description
  7235	
  7236	Sets the supplementary groups for the process. Only the super-user may use this
  7237	function.
  7238	
  7239	Return Value
  7240	
  7241	On success, zero is returned. On error, -1 is returned, and errno is set
  7242	appropriately.
  7243	
  7244	Errors
  7245	
  7246	EFAULT
  7247	   
  7248	    list has an invalid address.
  7249	   
  7250	EPERM
  7251	   
  7252	    The user is not the super-user.
  7253	   
  7254	EINVA
  7255	   
  7256	    Size is greater than NGROUPS (32 for Linux 2.0.32).
  7257	   
  7258	Bugs
  7259	
  7260	The __USE_BSD flag probably shouldn't be required for setgroups.
  7261	
  7262	sethostid
  7263	
  7264	Name
  7265	
  7266	sethostid -- set the unique identifier of the current host
  7267	
  7268	Synopsis
  7269	
  7270	#include <unistd.h>
  7271	
  7272	int sethostid(long int hostid);
  7273	
  7274	Description
  7275	
  7276	Set a unique 32-bit identifier for the current machine. The 32-bit identifier
  7277	is intended to be unique among all UNIX systems in existence. This normally
  7278	resembles the Internet address for the local machine, as returned by
  7279	gethostbyname(3), and thus usually never needs to be set.
  7280	
  7281	The sethostid call is restricted to the superuser.
  7282	
  7283	The hostid argument is stored in the file /etc/hostid.
  7284	
  7285	Return Value
  7286	
  7287	gethostid returns the 32-bit identifier for the current host as set by
  7288	sethostid(2).
  7289	
  7290	Files
  7291	
  7292	/etc/hostid
  7293	
  7294	sethostname
  7295	
  7296	Name
  7297	
  7298	sethostname -- set host name
  7299	
  7300	Synopsis
  7301	
  7302	#include <unistd.h>
  7303	
  7304	int sethostname(const char *name, size_t len);
  7305	
  7306	Description
  7307	
  7308	This function is used to change the host name of the current processor.
  7309	
  7310	Return Value
  7311	
  7312	On success, zero is returned. On error, -1 is returned, and errno is set
  7313	appropriately.
  7314	
  7315	Errors
  7316	
  7317	EINVAL
  7318	   
  7319	    len is negative or len is larger than the maximum allowed size.
  7320	   
  7321	EPERM
  7322	   
  7323	    the caller was not the superuser.
  7324	   
  7325	EFAULT
  7326	   
  7327	    name is an invalid address.
  7328	   
  7329	Notes
  7330	
  7331	SUSv2 guarantees that Host names are limited to 255 bytes.
  7332	
  7333	setmntent
  7334	
  7335	Name
  7336	
  7337	setmntent -- get file system descriptor file entry
  7338	
  7339	Synopsis
  7340	
  7341	#include <stdio.h>
  7342	#include <mntent.h>
  7343	
  7344	FILE *setmntent(const char *filename, const char *type);
  7345	
  7346	Description
  7347	
  7348	This routine is used to access the file system description file /etc/fstab and
  7349	the mounted file system description file /etc/mtab.
  7350	
  7351	The setmntent() function opens the file system description file filep and
  7352	returns a file pointer which can be used by getmntent(). The argument type is
  7353	the type of access required and can take the same values as the mode argument
  7354	of fopen(3).
  7355	
  7356	The mntent structure is defined in <mntent.h> as follows:
  7357	
  7358	struct mntent {
  7359	   
  7360	    char *mnt_fsname; /* name of mounted file system */
  7361	   
  7362	    char *mnt_dir; /* file system path prefix */
  7363	   
  7364	    char *mnt_type; /* mount type (see mntent.h) */
  7365	   
  7366	    char *mnt_opts; /* mount options (see mntent.h) */
  7367	   
  7368	    int mnt_freq; /* dump frequency in days */
  7369	   
  7370	    int mnt_passno; /* pass number on parallel fsck */
  7371	   
  7372	    };
  7373	   
  7374	Files
  7375	
  7376	/etc/fstab file system description file /etc/mtab mounted file system
  7377	description file
  7378	
  7379	setutent
  7380	
  7381	Name
  7382	
  7383	setutent -- access utmp file entries
  7384	
  7385	Synopsis
  7386	
  7387	#include <utmp.h>
  7388	
  7389	void setutent(void);
  7390	
  7391	Description
  7392	
  7393	setutent() rewinds the file pointer to the beginning of the utmp file. It is
  7394	generally a Good Idea to call it before any of the other functions.
  7395	
  7396	Errors
  7397	
  7398	On error, (struct utmp*)0 will be returned.
  7399	
  7400	Files
  7401	
  7402	/var/run/utmp database of currently logged-in users /var/log/wtmp database of
  7403	past user logins
  7404	
  7405	sigandset
  7406	
  7407	Name
  7408	
  7409	sigandset -- build a new signal set by combining the two input sets using
  7410	logical AND
  7411	
  7412	Synopsis
  7413	
  7414	#include <signal.h>
  7415	
  7416	extern int sigandset(sigset_t *set, const sigset_t *left,
  7417	                     const sigset_t *right);
  7418	
  7419	Description
  7420	
  7421	A signal function that builds a new signal set by combining the two input sets
  7422	using logical AND.
  7423	
  7424	sigblock
  7425	
  7426	Name
  7427	
  7428	sigblock -- manipulate the signal mask
  7429	
  7430	Synopsis
  7431	
  7432	#include <signal.h>
  7433	
  7434	int sigblock(int mask);
  7435	
  7436	Description
  7437	
  7438	This interface is made obsolete by sigprocmask(2).
  7439	
  7440	The sigblock system call adds the signals specified in mask to the set of
  7441	signals currently being blocked from delivery.
  7442	
  7443	Notes
  7444	
  7445	Prototype for this function is only available if _BSD_SOURCE is defined before
  7446	the inclusion of any system.
  7447	
  7448	siggetmask
  7449	
  7450	Name
  7451	
  7452	siggetmask -- manipulate the signal mask
  7453	
  7454	Synopsis
  7455	
  7456	#include <signal.h>
  7457	
  7458	int siggetmask(void);
  7459	
  7460	Description
  7461	
  7462	This interface is made obsolete by sigprocmask(2).
  7463	
  7464	siggetmask returns the current set of masked signals.
  7465	
  7466	Notes
  7467	
  7468	Prototype for this function is only available if _BSD_SOURCE is defined before
  7469	the inclusion of any system header file.
  7470	
  7471	sigisemptyset
  7472	
  7473	Name
  7474	
  7475	sigisemptyset -- signal function - check for empty SET
  7476	
  7477	Synopsis
  7478	
  7479	#include <signal.h>
  7480	
  7481	extern int sigisemptyset(const sigset_t *set);
  7482	
  7483	Description
  7484	
  7485	Signal function - Check for empty SET. Returns non-empty value if SET is not
  7486	empty.
  7487	
  7488	sigorset
  7489	
  7490	Name
  7491	
  7492	sigorset -- build a new signal set by combining the two input sets using
  7493	logical OR
  7494	
  7495	Synopsis
  7496	
  7497	#include <:signal.h>
  7498	
  7499	extern int sigorset((sigset_t *set, const sigset_t *left,
  7500	                     const sigset_t *right));
  7501	
  7502	Description
  7503	
  7504	A signal function that builds a new signal set by combining the two input sets
  7505	using logical OR.
  7506	
  7507	sigreturn
  7508	
  7509	Name
  7510	
  7511	sigreturn -- return from signal handler and cleanup stack frame
  7512	
  7513	Synopsis
  7514	
  7515	int sigreturn(unsigned long __unused);
  7516	
  7517	Description
  7518	
  7519	When the Linux kernel creates the stack frame for a signal handler, a call to
  7520	sigreturn is inserted into the stack frame so that the the signal handler will
  7521	call sigreturn upon return. This inserted call to sigreturn cleans up the stack
  7522	so that the process can restart from where it was interrupted by the signal.
  7523	
  7524	Return Value
  7525	
  7526	sigreturn never returns.
  7527	
  7528	Warning
  7529	
  7530	sigreturn call is used by the kernel to implement signal handlers. It should
  7531	never be called directly. Better yet, the specific use of the __unused argument
  7532	varies depending on the architecture.
  7533	
  7534	Files
  7535	
  7536	/usr/src/linux/arch/i386/kernel/signal.c
  7537	
  7538	/usr/src/linux/arch/alpha/kernel/entry.s
  7539	
  7540	statfs
  7541	
  7542	Name
  7543	
  7544	statfs -- get file system statistics
  7545	
  7546	Synopsis
  7547	
  7548	#include <sys/vfs.h>
  7549	
  7550	int statfs(const char *path, struct statfs *buf);
  7551	
  7552	Description
  7553	
  7554	statfs returns information about a mounted file system. path is the path name
  7555	of any file within the mounted filesystem.
  7556	
  7557	buf is a pointer to a statfs structure defined as follow:
  7558	
  7559	struct statfs {
  7560	   
  7561	    long f_type; /* type of filesystem (see below) */
  7562	   
  7563	    long f_bsize; /* optimal transfer block size */
  7564	   
  7565	    long f_blocks; /* total data blocks in file system */
  7566	   
  7567	    long f_bfree; /* free blocks in fs */
  7568	   
  7569	    long f_bavail; /* free blocks avail to non-superuser */
  7570	   
  7571	    long f_files; /* total file nodes in file system */
  7572	   
  7573	    long f_ffree; /* free file nodes in fs */
  7574	   
  7575	    long f_ffree; /* free file nodes in fs */
  7576	   
  7577	    fsid_t f_fsid; /* file system id */
  7578	   
  7579	    long f_namelen; /* maximum length of filenames */
  7580	   
  7581	    long f_spare[6]; /* spare for later */
  7582	   
  7583	    };
  7584	   
  7585	Fields that are undefined for a particular file system are set to 0.
  7586	
  7587	Return Value
  7588	
  7589	On success, zero is returned. On error, -1 is returned, and errno is set
  7590	appropriately.
  7591	
  7592	Errors
  7593	
  7594	ENOTDIR
  7595	   
  7596	    A component of the path prefix of path is not a directory.
  7597	   
  7598	ENAMETOOLONG
  7599	   
  7600	    path is too long.
  7601	   
  7602	ENOENT
  7603	   
  7604	    The file referred to by path does not exist.
  7605	   
  7606	EACCES
  7607	   
  7608	    Search permission is denied for a component of the path prefix of path.
  7609	   
  7610	ELOOP
  7611	   
  7612	    Too many symbolic links were encountered in translating path.
  7613	   
  7614	EFAULT
  7615	   
  7616	    Buf or path points to an invalid address.
  7617	   
  7618	EIO
  7619	   
  7620	    An I/O error occurred while reading from or writing to the file system.
  7621	   
  7622	ENOMEM
  7623	   
  7624	    Insufficient kernel memory was available.
  7625	   
  7626	ENOSYS
  7627	   
  7628	    The filesystem path is on does not support statfs.
  7629	   
  7630	stime
  7631	
  7632	Name
  7633	
  7634	stime -- set time
  7635	
  7636	Synopsis
  7637	
  7638	#define _SVID_SOURCE /* glibc2 needs this */
  7639	#include <time.h>
  7640	
  7641	int stime(time_t *t);
  7642	
  7643	Description
  7644	
  7645	stime sets the system's idea of the time and date. Time, pointed to by t, is
  7646	measured in seconds from 00:00:00 GMT January 1, 1970. stime() may only be
  7647	executed by the super user.
  7648	
  7649	Return Value
  7650	
  7651	On success, zero is returned. On error, -1 is returned, and errno is set
  7652	appropriately.
  7653	
  7654	Errors
  7655	
  7656	EPERM
  7657	   
  7658	    The caller is not the super-user.
  7659	   
  7660	Notes
  7661	
  7662	Under glibc2, <time.h> only provides a prototype when _SVID_SOURCE is defined.
  7663	
  7664	stpcpy
  7665	
  7666	Name
  7667	
  7668	stpcpy -- copy a string returning a pointer to its end
  7669	
  7670	Synopsis
  7671	
  7672	#include <string.h>
  7673	
  7674	char *stpcpy(char *dest, const char *src);
  7675	
  7676	Description
  7677	
  7678	The stpcpy() function copies the string pointed to by src (including the
  7679	terminating \0 character) to the array pointed to by dest. The strings may not
  7680	overlap, and the destination string dest must be large enough to receive the
  7681	copy.
  7682	
  7683	Return Value
  7684	
  7685	stpcpy() returns a pointer to the end of the string dest (that is, the address
  7686	of the terminating null character) rather than the beginning.
  7687	
  7688	Example
  7689	
  7690	For example, this program uses stpcpy to concatenate foo and bar to produce
  7691	foobar, which it then prints.
  7692	
  7693	#include <string.h>
  7694	
  7695	int main (void) { char *to = buffer; to = stpcpy (to, "foo"); to = stpcpy (to,
  7696	"bar"); printf ("%s\n", buffer); }
  7697	
  7698	stpncpy
  7699	
  7700	Name
  7701	
  7702	stpncpy -- copy a fixed-size string, returning a pointer to its end
  7703	
  7704	Synopsis
  7705	
  7706	#include <string.h>
  7707	
  7708	char *stpncpy (char *dest, const char *src, size_t n);
  7709	
  7710	Description
  7711	
  7712	The stpncpy function copies at most n characters from the string pointed to by
  7713	src, including the terminating '\0' character, to the array pointed to by dest.
  7714	Exactly n characters are written at dest. If the length strlen(src) is smaller
  7715	than n, the remaining characters in the array pointed to by dest are filled
  7716	with '\0' characters. If the length strlen(src) is greater or equal to n, the
  7717	string pointed to by dest will not be '\0' terminated. The strings may not
  7718	overlap. The programmer must ensure that there is room for at least n
  7719	characters at dest.
  7720	
  7721	Return Value
  7722	
  7723	stpncpy returns a pointer to the terminating null in dest, or, if dest is not
  7724	null-terminated, dest + n.
  7725	
  7726	strcasestr
  7727	
  7728	Name
  7729	
  7730	strcasestr -- locate a substring - ignores the case of both strings
  7731	
  7732	Synopsis
  7733	
  7734	#include <string.h>
  7735	
  7736	char *strcasestr(const char *haystack, const char *needle);
  7737	
  7738	Description
  7739	
  7740	Similar to strstr but this function ignores the case of both strings.
  7741	
  7742	strerror_r
  7743	
  7744	Name
  7745	
  7746	strerror_r -- reentrant version of strerror
  7747	
  7748	Synopsis
  7749	
  7750	#include <string.h>
  7751	
  7752	extern char *strerror_r(int errnum, char *buf, size_t buflen);
  7753	
  7754	Description
  7755	
  7756	Reentrant version of strerror. If a temporary buffer is required, at most
  7757	BUFLEN bytes of BUF will be used.
  7758	
  7759	strfry
  7760	
  7761	Name
  7762	
  7763	strfry -- randomize a string
  7764	
  7765	Synopsis
  7766	
  7767	#include <string.h>
  7768	
  7769	char *strfry(char *string);
  7770	
  7771	Description
  7772	
  7773	The strfry() function randomizes the contents of string by using rand(3) to
  7774	randomly swap characters in the string. The result is an anagram of string.
  7775	
  7776	Return Value
  7777	
  7778	The strfry() functions returns a pointer to the randomized string.
  7779	
  7780	strndup
  7781	
  7782	Name
  7783	
  7784	strndup -- return a malloc'd copy of at most the specified number of bytes of a
  7785	string
  7786	
  7787	Synopsis
  7788	
  7789	#include <string.h>
  7790	
  7791	extern char *strndup(const char *string, size_t n);
  7792	
  7793	Description
  7794	
  7795	Return a malloc'd copy of at most n bytes of string. The resultant string is
  7796	terminated even if no null terminator appears before STRING[N].
  7797	
  7798	strnlen
  7799	
  7800	Name
  7801	
  7802	strnlen -- determine the length of a fixed-size string
  7803	
  7804	Synopsis
  7805	
  7806	#include <string.h>
  7807	
  7808	size_t strnlen(const char *s, size_t maxlen);
  7809	
  7810	Description
  7811	
  7812	The strnlen function returns the number of characters in the string pointed to
  7813	by s, not including the terminating '\0' character, but at most maxlen. In
  7814	doing this, strnlen looks only at the first maxlen characters at s and never
  7815	beyond s+maxlen.
  7816	
  7817	Return Value
  7818	
  7819	The strnlen function returns strlen(s), if that is less than maxlen, or maxlen
  7820	if there is no '\0' character among the first maxlen characters pointed to by
  7821	s.
  7822	
  7823	strsep
  7824	
  7825	Name
  7826	
  7827	strsep -- extract token from string
  7828	
  7829	Synopsis
  7830	
  7831	#include <string.h>
  7832	
  7833	char *strsep(char **stringp, const char *delim);
  7834	
  7835	Description
  7836	
  7837	If *stringp is NULL, the strsep() function returns NULL and does nothing else.
  7838	Otherwise, this function finds the first token in the string *stringp, where
  7839	tokens are delimited by symbols in the string delim. This token is terminated
  7840	with a \0 character (by overwriting the delimiter) and *stringp is updated to
  7841	point past the token. In case no delimiter was found, the token is taken to be
  7842	the entire string *stringp, and *stringp is made NULL.
  7843	
  7844	Return Value
  7845	
  7846	The strsep() function returns a pointer to the token, that is, it returns the
  7847	original value of *stringp.
  7848	
  7849	Notes
  7850	
  7851	The strsep() function was introduced as a replacement for strtok(), since the
  7852	latter cannot handle empty fields. However, strtok() conforms to ANSI-C and
  7853	hence is more portable.
  7854	
  7855	Bugs
  7856	
  7857	This function suffers from the same problems as strtok(). In particular, it
  7858	modifies the original string. Avoid it.
  7859	
  7860	strsignal
  7861	
  7862	Name
  7863	
  7864	strsignal -- return string describing signal
  7865	
  7866	Synopsis
  7867	
  7868	#define _GNU_SOURCE
  7869	#include <string.h>
  7870	
  7871	char *strsignal(int sig);
  7872	
  7873	extern const char * const sys_siglist[];
  7874	
  7875	Description
  7876	
  7877	The strsignal() function returns a string describing the signal number passed
  7878	in the argument sig. The string can only be used until the next call to
  7879	strsignal().
  7880	
  7881	The array sys_siglist holds the signal description strings indexed by signal
  7882	number. The strsignal() function should be used if possible instead of this
  7883	array.
  7884	
  7885	Return Value
  7886	
  7887	The strsignal() function returns the appropriate description string, or an
  7888	unknown signal message if the signal number is invalid. On some systems (but
  7889	not on Linux), a NULL pointer may be returned instead for an invalid signal
  7890	number.
  7891	
  7892	strtok_r
  7893	
  7894	Name
  7895	
  7896	strtok_r -- extract tokens from strings
  7897	
  7898	Synopsis
  7899	
  7900	#include <string.h>
  7901	
  7902	char *strtok_r(char *s, const char *delim, char **ptrptr);
  7903	
  7904	Description
  7905	
  7906	A token is a nonempty string of characters not occurring in the string delim,
  7907	followed by \0 or by a character occurring in delim.
  7908	
  7909	The strtok_r() function can be used to parse the string s into tokens. The
  7910	first call to strtok_r() should have s as its first argument. Subsequent calls
  7911	should have the first argument set to NULL. Each call returns a pointer to the
  7912	next token, or NULL when no more tokens are found.
  7913	
  7914	If a token ends with a delimiter, this delimiting character is overwritten with
  7915	a \0 and a pointer to the next character is saved for the next call to strtok_r
  7916	(). The delimiter string delim may be different for each call.
  7917	
  7918	ptrptr is a user allocated char* pointer. It must be the same while parsing the
  7919	same string.
  7920	
  7921	Bugs
  7922	
  7923	Never use this function. Note that:
  7924	
  7925	  * It modifies its first argument.
  7926	   
  7927	  * The identity of the delimiting character is lost.
  7928	   
  7929	  * This function cannot be used on constant strings.
  7930	   
  7931	Return Value
  7932	
  7933	The strtok_r() function returns a pointer to the next token, or NULL if there
  7934	are no more tokens.
  7935	
  7936	strtoq
  7937	
  7938	Name
  7939	
  7940	strtoq -- convert string value to a long or quad_t integer
  7941	
  7942	Synopsis
  7943	
  7944	#include <sys/types.h>
  7945	#include <stdlib.h>
  7946	#include <limits.h>
  7947	
  7948	quadt strtoq(const char *nptr, char **endptr, int base);
  7949	
  7950	Description
  7951	
  7952	The strtoq() function converts the string in nptr to a quadt value. The
  7953	conversion is done according to the given base, which must be between 2 and 36
  7954	inclusive, or be the special value 0.
  7955	
  7956	The string may begin with an arbitrary amount of white space (as determine by
  7957	isspace(3)) followed by a single optional + or - sign. If base is zero or 16,
  7958	the string may then include a 0x prefix, and the number will be read in base
  7959	16; otherwise, a zero base is taken as 10 (decimal) unless the next character
  7960	is 0, in which case it is taken as 8 (octal).
  7961	
  7962	The remainder of the string is converted to a long value in the obvious manner,
  7963	stopping at the first character which is not a valid digit in the given base.
  7964	(In bases above 10, the letter A in either upper or lower case represents 10, B
  7965	represents 11, and so forth, with Z representing 35.)
  7966	
  7967	Return Value
  7968	
  7969	strtoq() function returns the result of the conversion, unless the value would
  7970	underflow or overflow. If an underflow occurs, strtoq() returns QUAD_MIN. If an
  7971	overflow occurs, strtoq() returns QUAD_MAX. In both cases, errno is set to
  7972	ERANGE.
  7973	
  7974	Errors
  7975	
  7976	ERANGE
  7977	   
  7978	    The given string was out of range; the value converted has been clamped.
  7979	   
  7980	strtouq
  7981	
  7982	Name
  7983	
  7984	strtouq -- convert a string to an uquad_t
  7985	
  7986	Synopsis
  7987	
  7988	#include <sys/types.h>
  7989	#include <stdlib.h>
  7990	#include <limits.h>
  7991	
  7992	uquadt strtouq(const char *nptr, char **endptr, int base);
  7993	
  7994	Description
  7995	
  7996	The strtouq() function converts the string in nptr to a uquadt value. The
  7997	conversion is done according to the given base, which must be between 2 and 36
  7998	inclusive, or be the special value 0.
  7999	
  8000	The string may begin with an arbitrary amount of white space (as determined by
  8001	isspace(3)) followed by a single optional + or - sign. If base is zero or 16,
  8002	the string may then include a 0x prefix, and the number will be read in base
  8003	16; otherwise, a zero base is taken as 10 (decimal) unless the next character
  8004	is 0, in which case it is taken as 8 (octal).
  8005	
  8006	The remainder of the string is converted to an unsigned long value in the
  8007	obvious manner, stopping at the end of the string or at the first character
  8008	that does not produce a valid digit in the given base. (In bases above 10, the
  8009	letter A in either upper or lower case represents 10, B represents 11, and so
  8010	forth, with Z representing 35.)
  8011	
  8012	Return Value
  8013	
  8014	Upon success the strtouq() function returns either the result of the conversion
  8015	or, if there was a leading minus sign, the negation of the result of the
  8016	conversion, unless the original (non-negated) value would overflow. In the case
  8017	of an overflow the function returns UQUAD_MAX and the global variable errno is
  8018	set to ERANGE.
  8019	
  8020	Errors
  8021	
  8022	ERANGE
  8023	   
  8024	    The given string was out of range; the value converted has been clamped.
  8025	   
  8026	strverscmp
  8027	
  8028	Name
  8029	
  8030	strverscmp -- compare strings holding name and indices/version numbers
  8031	
  8032	Synopsis
  8033	
  8034	#include <string.h>
  8035	
  8036	extern int strverscmp(const char *s1, const char *s2);
  8037	
  8038	Description
  8039	
  8040	Compare s1 and s2 as strings holding name and indices/version numbers.
  8041	
  8042	system
  8043	
  8044	Name
  8045	
  8046	system -- execute a shell command
  8047	
  8048	Synopsis
  8049	
  8050	#include <stdlib.h>
  8051	
  8052	int system (const char * string);
  8053	
  8054	Description
  8055	
  8056	system() executes a command specified in string by calling /bin/sh -c string,
  8057	and returns after the command has been completed. During execution of the
  8058	command, SIGCHLD will be blocked, and SIGINT and SIGQUIT will be ignored.
  8059	
  8060	Return Value
  8061	
  8062	The value returned is 127 if the execve() call for /bin/sh fails, -1 if there
  8063	was another error and the return code of the command otherwise.
  8064	
  8065	If the value of string is NULL, system() returns nonzero if the shell is
  8066	available, and zero if not.
  8067	
  8068	system() does not affect the wait status of any other children.
  8069	
  8070	Notes
  8071	
  8072	The fact that system() ignores interrupts is often not what a program wants.
  8073	The Single Unix Spec describes some of the consequences - one additional one is
  8074	that a program which calls system() from a loop can not reliably be
  8075	interrupted. Many programs will want to use the exec(3) family of functions
  8076	instead.
  8077	
  8078	Do not use system() from a program with suid or sgid privileges, because
  8079	strange values for some environment variables might be used to subvert system
  8080	integrity. Use the exec(3) family of functions instead, but not execlp(3) or
  8081	execvp(3). system() will not, in fact, work properly from programs with suid or
  8082	sgid privileges on systems on which /bin/sh is bash version 2, since bash 2
  8083	drops privileges on startup. (Debian uses a modified bash which does not do
  8084	this when invoked as sh.)
  8085	
  8086	The check for the availability of /bin/sh is not actually performed; it is
  8087	always assumed to be available. ISO C specifies the check, but POSIX.2
  8088	specifies that the return shall always be non-zero, since a system without the
  8089	shell is not conforming, and it is this that is implemented.
  8090	
  8091	It is possible for the shell command to return 127, so that code is not a sure
  8092	indication that the execve() call failed; check errno to make sure.
  8093	
  8094	textdomain
  8095	
  8096	Name
  8097	
  8098	textdomain -- set the current default message catalog to DOMAINNAME
  8099	
  8100	Synopsis
  8101	
  8102	#include <libintl.h>
  8103	
  8104	extern char *textdomain(const char *domainname);
  8105	
  8106	Description
  8107	
  8108	Set the current default message catalog to DOMAINNAME.
  8109	
  8110	If DOMAINNAME is null, return the current default.
  8111	
  8112	If DOMAINNAME is "", reset to the default of "messages".
  8113	
  8114	vasprintf
  8115	
  8116	Name
  8117	
  8118	vasprintf -- write formatted output to a string dynamically allocated with
  8119	malloc and store the address of the string
  8120	
  8121	Synopsis
  8122	
  8123	#include <stdio.h>
  8124	
  8125	extern int vasprintf(char **restrict ptr, const char *restrict f,
  8126	                     G_va_list arg);
  8127	
  8128	Description
  8129	
  8130	Write formatted output to a string dynamically allocated with malloc.
  8131	
  8132	Store the address of the string in *ptr.
  8133	
  8134	vdprintf
  8135	
  8136	Name
  8137	
  8138	vdprintf -- write formatted output to a file descriptor
  8139	
  8140	Synopsis
  8141	
  8142	#include <stdio.h>
  8143	
  8144	extern int vdprintf(int fd, const char *restrict fmt,
  8145	                    G_va_list arg);
  8146	
  8147	Description
  8148	
  8149	Write formatted output to a file descriptor.
  8150	
  8151	verrx
  8152	
  8153	Name
  8154	
  8155	verrx -- display formatted error messages
  8156	
  8157	Synopsis
  8158	
  8159	#include <err.h>
  8160	
  8161	void verrx(int eval, const char *fmt, valist args);
  8162	
  8163	Description
  8164	
  8165	The verrx() function displays a formatted error message on the standard error
  8166	output. The last component of the program name, a colon character, and a space
  8167	are output. If the fmt argument is not NULL, the formatted error message, a
  8168	colon character, and a space are output. The output is followed by a newline
  8169	character.
  8170	
  8171	The verrx() function does not return, but exits with the value of the argument
  8172	eval.
  8173	
  8174	wait4
  8175	
  8176	Name
  8177	
  8178	wait4 -- wait for process termination, BSD style
  8179	
  8180	Synopsis
  8181	
  8182	#define _USE_BSD
  8183	#include <sys/types.h>
  8184	#include <sys/resource.h>
  8185	#include <sys/wait.h>
  8186	
  8187	pid_t wait4(pid_t pid, int *status, int options,
  8188	            struct rusage *rusage);
  8189	
  8190	Description
  8191	
  8192	The wait4 function suspends execution of the current process until a child as
  8193	specified by the pid argument has exited, or until a signal is delivered whose
  8194	action is to terminate the current process or to call a signal handling
  8195	function. If a child as requested by pid has already exited by the time of the
  8196	call (a so-called "zombie" process), the function returns immediately. Any
  8197	system resources used by the child are freed.
  8198	
  8199	The value of pid can be one of:
  8200	
  8201	< -1
  8202	   
  8203	    wait for any child process whose process group ID is equal to the absolute
  8204	    value of pid.
  8205	   
  8206	-1
  8207	   
  8208	    wait for any child process; this is equivalent to calling wait3.
  8209	   
  8210	0
  8211	   
  8212	    wait for any child process whose process group ID is equal to that of the
  8213	    calling process.
  8214	   
  8215	> 0
  8216	   
  8217	    wait for the child whose process ID is equal to the value of pid.
  8218	   
  8219	The value of options is a bitwise OR of zero or more of the following
  8220	constants:
  8221	
  8222	WNOHANG
  8223	   
  8224	    return immediately if no child is there to be waited for.
  8225	   
  8226	WUNTRACED
  8227	   
  8228	    return for children which are stopped, and whose status has not been
  8229	    reported.
  8230	   
  8231	If status is not NULL, wait4 stores status information in the location pointed
  8232	to by status.
  8233	
  8234	This status can be evaluated with the following macros (these macros take the
  8235	stat buffer (an int) as an argument -- not a pointer to the buffer!):
  8236	
  8237	WIFEXITED(status)
  8238	   
  8239	    is non-zero if the child exited normally.
  8240	   
  8241	WEXITSTATUS(status)
  8242	   
  8243	    evaluates to the least significant eight bits of the return code of the
  8244	    child which terminated, which may have been set as the argument to a call
  8245	    to exit() or as the argument for a return statement in the main program.
  8246	    This macro can only be evaluated if WIFEXITED returned non-zero.
  8247	   
  8248	WIFSIGNALED(status)
  8249	   
  8250	    returns true if the child process exited because of a signal which was not
  8251	    caught.
  8252	   
  8253	WTERMSIG(status)
  8254	   
  8255	    returns the number of the signal that caused the child process to
  8256	    terminate. This macro can only be evaluated if WIFSIGNALED returned
  8257	    non-zero.
  8258	   
  8259	WIFSTOPPED(status)
  8260	   
  8261	    returns true if the child process which caused the return is currently
  8262	    stopped; this is only possible if the call was done using WUNTRACED.
  8263	   
  8264	WSTOPSIG(status)
  8265	   
  8266	    returns the number of the signal which caused the child to stop. This macro
  8267	    can only be evaluated if WIFSTOPPED returned non-zero.
  8268	   
  8269	If rusage is not NULL, the struct rusage as defined in <sys/resource.h> it
  8270	points to will be filled with accounting information. See getrusage(2) for
  8271	details.
  8272	
  8273	Return Value
  8274	
  8275	The process ID of the child which exited, -1 on error (in particular, when no
  8276	unwaited-for child processes of the specified kind exist) or zero if WNOHANG
  8277	was used and no child was available yet. In the latter two cases errno will be
  8278	set appropriately.
  8279	
  8280	Errors
  8281	
  8282	ECHILD
  8283	   
  8284	    No unwaited-for child process as specified does exist.
  8285	   
  8286	ERESTARTSYS
  8287	   
  8288	    If WNOHANG was not set and an unblocked signal or a SIGCHLD was caught.
  8289	    This error is returned by the system call. The library interface is not
  8290	    allowed to return ERESTARTSYS, but will return EINTR.
  8291	   
  8292	warn
  8293	
  8294	Name
  8295	
  8296	warn -- formatted error messages
  8297	
  8298	Synopsis
  8299	
  8300	#include <err.h>
  8301	
  8302	void warn(const char *fmt, ...);
  8303	
  8304	Description
  8305	
  8306	The warn() function displays a formatted error message on the standard error
  8307	output. The last component of the program name, a colon character, and a space
  8308	are output. If the fmt argument is not NULL, the formatted error message, a
  8309	colon character, and a space are output. The error message string affiliated
  8310	with the current value of the global variable errno is output. The output is
  8311	followed by a newline character.
  8312	
  8313	warnx
  8314	
  8315	Name
  8316	
  8317	warnx -- formatted error messages
  8318	
  8319	Synopsis
  8320	
  8321	#include <err.h>
  8322	
  8323	void warnx(const char *fmt, ...);
  8324	
  8325	Description
  8326	
  8327	The warnx() function displays a formatted error message on the standard error
  8328	output. The last component of the program name, a colon character, and a space
  8329	are output. If the fmt argument is not NULL, the formatted error message, a
  8330	colon character, and a space are output. The output is followed by a newline
  8331	character.
  8332	
  8333	wcpcpy
  8334	
  8335	Name
  8336	
  8337	wcpcpy -- copy a wide character string, returning a pointer to its end
  8338	
  8339	Synopsis
  8340	
  8341	#include <wchar.h>
  8342	
  8343	wchar_t *wcpcpy(wchar_t *dest, const wchar_t *src);
  8344	
  8345	Description
  8346	
  8347	The wcpcpy function is the wide-character equivalent of the stpcpy function. It
  8348	copies the wide character string pointed to by src, including the terminating
  8349	L'\0' character, to the array pointed to by dest.
  8350	
  8351	The strings may not overlap.
  8352	
  8353	The programmer must ensure that there is room for at least wcslen(src)+1 wide
  8354	characters at dest.
  8355	
  8356	Return Value
  8357	
  8358	wcpcpy returns a pointer to the end of the wide-character string dest, that is,
  8359	a pointer to the terminating L'\0' character.
  8360	
  8361	wcpncpy
  8362	
  8363	Name
  8364	
  8365	wcpncpy -- copy a fixed-size string of wide characters, returning a pointer to
  8366	its end
  8367	
  8368	Synopsis
  8369	
  8370	#include <wchar.h>
  8371	
  8372	wchar_t *wcpncpy(wchar_t *dest, const wchar_t *src, size_t n);
  8373	
  8374	Description
  8375	
  8376	The wcpncpy function is the wide-character equivalent of the stpncpy function.
  8377	It copies at most n wide characters from the wide-character string pointed to
  8378	by src, including the terminating L'\0' character, to the array pointed to by
  8379	dest. Exactly n wide characters are written at dest. If the length wcslen(src)
  8380	is smaller than n, the remaining wide characters in the array pointed to by
  8381	dest are filled with L'\0' characters. If the length wcslen(src) is greater or
  8382	equal to n, the string pointed to by dest will not be L'\0' terminated.
  8383	
  8384	The strings may not overlap.
  8385	
  8386	The programmer must ensure that there is room for at least n wide characters at
  8387	dest.
  8388	
  8389	Return Value
  8390	
  8391	wcpncpy returns a pointer to the last wide character written, i.e. dest + n -
  8392	1.
  8393	
  8394	wcscasecmp
  8395	
  8396	Name
  8397	
  8398	wcscasecmp -- compare two wide-character strings, ignoring case
  8399	
  8400	Synopsis
  8401	
  8402	#include <wchar.h>
  8403	
  8404	int wcscasecmp(const wchar_t *s1, const wchar_t *s2);
  8405	
  8406	Description
  8407	
  8408	The wcscasecmp function is the wide-character equivalent of the strcasecmp
  8409	function. It compares the wide-character string pointed to by s1 and the
  8410	wide-character string pointed to by s2, ignoring case differences (towupper,
  8411	towlower).
  8412	
  8413	Return Value
  8414	
  8415	The wcscasecmp function returns zero if the wide-character strings at s1 and s2
  8416	are equal except for case distinctions. It returns a positive integer if s1 is
  8417	greater than s2, ignoring case. It returns a negative integer if s1 is smaller
  8418	than s2, ignoring case.
  8419	
  8420	Notes
  8421	
  8422	The behavior of wcscasecmp depends on the LC_CTYPE category of the current
  8423	locale.
  8424	
  8425	wcsdup
  8426	
  8427	Name
  8428	
  8429	wcsdup -- duplicate a wide-character string
  8430	
  8431	Synopsis
  8432	
  8433	#include <wchar.h>
  8434	
  8435	wchar_t *wcsdup(const wchar_t *s);
  8436	
  8437	Description
  8438	
  8439	The wcsdup function is the wide-character equivalent of the strdup function. It
  8440	allocates and returns a new wide-character string whose initial contents is a
  8441	duplicate of the wide-character string pointed to by s.
  8442	
  8443	Memory for the new wide-character string is obtained with malloc(3), and can be
  8444	freed with free(3).
  8445	
  8446	Return Value
  8447	
  8448	The wcsdup function returns a pointer to the new wide-character string, or NULL
  8449	if sufficient memory was not available.
  8450	
  8451	wcsncasecmp
  8452	
  8453	Name
  8454	
  8455	wcsncasecmp -- compare two fixed-size wide-character strings, ignoring case
  8456	
  8457	Synopsis
  8458	
  8459	#include <wchar.h>
  8460	
  8461	int wcsncasecmp(const wchar_t *s1, const wchar_t *s2, size_t n);
  8462	
  8463	Description
  8464	
  8465	The wcsncasecmp function is the wide-character equivalent of the strncasecmp
  8466	function. It compares the wide-character string pointed to by s1 and the
  8467	wide-character string pointed to by s2, but at most n wide characters from each
  8468	string, ignoring case differences (towupper, towlower).
  8469	
  8470	Return Value
  8471	
  8472	The wcsncasecmp function returns zero if the wide-character strings at s1 and
  8473	s2, truncated to at most length n, are equal except for case distinctions. It
  8474	returns a positive integer if truncated s1 is greater than truncated s2,
  8475	ignoring case. It returns a negative integer if truncated s1 is smaller than
  8476	truncated s2, ignoring case.
  8477	
  8478	Notes
  8479	
  8480	The behavior of wcsncasecmp depends on the LC_CTYPE category of the current
  8481	locale.
  8482	
  8483	wcsnlen
  8484	
  8485	Name
  8486	
  8487	wcsnlen -- determine the length of a fixed-size wide-character string
  8488	
  8489	Synopsis
  8490	
  8491	#include <wchar.h>
  8492	
  8493	size_t wcsnlen(const wchar_t *s, size_t maxlen);
  8494	
  8495	Description
  8496	
  8497	The wcsnlen function is the wide-character equivalent of the strnlen function.
  8498	It returns the number of wide-characters in the string pointed to by s, not
  8499	including the terminating L'\0' character, but at most maxlen. In doing this,
  8500	wcsnlen looks only at the first maxlen wide-characters at s and never beyond
  8501	s+maxlen.
  8502	
  8503	Return Value
  8504	
  8505	The wcsnlen function returns wcslen(s), if that is less than maxlen, or maxlen
  8506	if there is no L'\0' character among the first maxlen wide characters pointed
  8507	to by s.
  8508	
  8509	Notes
  8510	
  8511	The behavior of wcsncasecmp depends on the LC_CTYPE category of the current
  8512	locale.
  8513	
  8514	wcsnrtombs
  8515	
  8516	Name
  8517	
  8518	wcsnrtombs -- convert a wide character string to a multi-byte string
  8519	
  8520	Synopsis
  8521	
  8522	#include <wchar.h>
  8523	
  8524	size_t wcsnrtombs(char *dest, const wchar_t **src, size_t nwc,
  8525	                  size_t len, mbstate_t *ps);
  8526	
  8527	Description
  8528	
  8529	The wcsnrtombs function is like the wcsrtombs function, except that the number
  8530	of wide characters to be converted, starting at *src, is limited to nwc.
  8531	
  8532	If dest is not a NULL pointer, the wcsnrtombs function converts at most nwc
  8533	wide characters from the wide-character string *src to a multibyte string
  8534	starting at dest. At most len bytes are written to dest. The state *ps is
  8535	updated. The conversion is effectively performed by repeatedly calling wcrtomb
  8536	(dest,*src,ps), as long as this call succeeds, and then incrementing dest by
  8537	the number of bytes written and *src by one. The conversion can stop for three
  8538	reasons:
  8539	
  8540	1. A wide character has been encountered that can not be represented as a
  8541	multibyte sequence (according to the current locale). In this case *src is left
  8542	pointing to the invalid wide character, (size_t)(-1) is returned, and errno is
  8543	set to EILSEQ.
  8544	
  8545	2. nwc wide characters have been converted without encountering a L'\0', or the
  8546	length limit forces a stop. In this case *src is left pointing to the next wide
  8547	character to be converted, and the number of bytes written to dest is returned.
  8548	
  8549	3. The wide-character string has been completely converted, including the
  8550	terminating L'\0' (which has the side effect of bringing back *ps to the
  8551	initial state). In this case *src is set to NULL, and the number of bytes
  8552	written to dest, excluding the terminating '\0' byte, is returned.
  8553	
  8554	If dest is NULL, len is ignored, and the conversion proceeds as above, except
  8555	that the converted bytes are not written out to memory, and that no destination
  8556	length limit exists.
  8557	
  8558	In both of the above cases, if ps is a NULL pointer, a static anonymous state
  8559	only known to the wcsnrtombs function is used instead.
  8560	
  8561	The programmer must ensure that there is room for at least len bytes at dest.
  8562	
  8563	Return Value
  8564	
  8565	The wcsnrtombs function returns the number of bytes that make up the converted
  8566	part of multibyte sequence, not including the terminating null byte. If a wide
  8567	character was encountered which could not be converted, (size_t)(-1) is
  8568	returned, and errno set to EILSEQ.
  8569	
  8570	Notes
  8571	
  8572	The behavior of wcsnrtombs depends on the LC_CTYPE category of the current
  8573	locale.
  8574	
  8575	Passing NULL as ps is not multi-thread safe.
  8576	
  8577	wcstoq
  8578	
  8579	Name
  8580	
  8581	wcstoq -- convert initial portion of wide string NPTR to long int
  8582	representation
  8583	
  8584	Synopsis
  8585	
  8586	#include <wchar.h>
  8587	
  8588	extern long long int wcstoq(const wchar_t *restrict nptr,
  8589	                            wchar_t **restrict endptr, int base);
  8590	
  8591	Description
  8592	
  8593	Convert initial portion of wide string NPTR to long int representation.
  8594	
  8595	wcstouq
  8596	
  8597	Name
  8598	
  8599	wcstouq -- convert initial portion of wide string NPTR to unsigned long long
  8600	int representation
  8601	
  8602	Synopsis
  8603	
  8604	#include <wchar.h>
  8605	
  8606	extern unsigned long long int wcstouq(const wchar_t *restrict nptr,
  8607	                           wchar_t **restrict endptr,int base);
  8608	
  8609	Description
  8610	
  8611	Convert initial portion of wide string NPTR to unsigned long long int
  8612	representation.
  8613	
  8614	-------------------------------------------------------------------------------
  8615	
  8616	Interfaces for libm
  8617	
  8618	The behavior of the interfaces in this library is specified by the following
  8619	standards.
  8620	
  8621	ISO/IEC 9899: 1999, Programming Languages --C[11]                              
  8622	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  8623	(ISBN: 1-85912-181-0, C606)[12]                                                
  8624	
  8625	-------------------------------------------------------------------------------
  8626	
  8627	Math
  8628	
  8629	Table 10-28. libm - Math Function Interfaces
  8630	
  8631	+-----------------------------------------------------------------------------+
  8632	|acos        |ceilf         |erff(GLIBC_2.0)  |j1f(GLIBC_2.0) |remquo         |
  8633	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |[11]           |(GLIBC_2.0)[11]|
  8634	|[12]        |[11]          |                 |               |               |
  8635	|------------+--------------+-----------------+---------------+---------------|
  8636	|acosf       |ceill         |erfl(GLIBC_2.0)  |j1l(GLIBC_2.0) |remquof        |
  8637	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |[11]           |(GLIBC_2.0)[11]|
  8638	|[11]        |[11]          |                 |               |               |
  8639	|------------+--------------+-----------------+---------------+---------------|
  8640	|acosh       |cexp          |exp(GLIBC_2.0)   |jn(GLIBC_2.0)  |remquol        |
  8641	|(GLIBC_2.0) |(GLIBC_2.0)   |[12]             |[12]           |(GLIBC_2.0)[11]|
  8642	|[12]        |[11]          |                 |               |               |
  8643	|------------+--------------+-----------------+---------------+---------------|
  8644	|acoshf      |cexpf         |expm1(GLIBC_2.0) |jnf(GLIBC_2.0) |rint(GLIBC_2.0)|
  8645	|(GLIBC_2.0) |(GLIBC_2.0)   |[12]             |[11]           |[12]           |
  8646	|[11]        |[11]          |                 |               |               |
  8647	|------------+--------------+-----------------+---------------+---------------|
  8648	|acoshl      |cexpl         |fabs(GLIBC_2.0)  |jnl(GLIBC_2.0) |rintf          |
  8649	|(GLIBC_2.0) |(GLIBC_2.0)   |[12]             |[11]           |(GLIBC_2.0)[11]|
  8650	|[11]        |[11]          |                 |               |               |
  8651	|------------+--------------+-----------------+---------------+---------------|
  8652	|acosl       |cimag         |fabsf(GLIBC_2.0) |ldexp          |rintl          |
  8653	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[12]|(GLIBC_2.0)[11]|
  8654	|[11]        |[11]          |                 |               |               |
  8655	|------------+--------------+-----------------+---------------+---------------|
  8656	|asin        |cimagf        |fabsl(GLIBC_2.0) |ldexpf         |round          |
  8657	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8658	|[12]        |[11]          |                 |               |               |
  8659	|------------+--------------+-----------------+---------------+---------------|
  8660	|asinf       |cimagl        |fdim(GLIBC_2.0)  |ldexpl         |roundf         |
  8661	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8662	|[11]        |[11]          |                 |               |               |
  8663	|------------+--------------+-----------------+---------------+---------------|
  8664	|asinh       |clog          |fdimf(GLIBC_2.0) |lgamma         |roundl         |
  8665	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[12]|(GLIBC_2.0)[11]|
  8666	|[12]        |[11]          |                 |               |               |
  8667	|------------+--------------+-----------------+---------------+---------------|
  8668	|asinhf      |clog10        |fdiml(GLIBC_2.0) |lgamma_r       |scalb          |
  8669	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[11]|(GLIBC_2.0)[12]|
  8670	|[11]        |[11]          |                 |               |               |
  8671	|------------+--------------+-----------------+---------------+---------------|
  8672	|asinhl      |clog10f       |feclearexcept    |lgammaf        |scalbf         |
  8673	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8674	|[11]        |[11]          |                 |               |               |
  8675	|------------+--------------+-----------------+---------------+---------------|
  8676	|asinl       |clog10l       |fegetenv         |lgammaf_r      |scalbl         |
  8677	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8678	|[11]        |[11]          |                 |               |               |
  8679	|------------+--------------+-----------------+---------------+---------------|
  8680	|atan        |clogf         |fegetexceptflag  |lgammal        |scalbln        |
  8681	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8682	|[12]        |[11]          |                 |               |               |
  8683	|------------+--------------+-----------------+---------------+---------------|
  8684	|atan2       |clogl         |fegetround       |lgammal_r      |scalblnf       |
  8685	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8686	|[12]        |[11]          |                 |               |               |
  8687	|------------+--------------+-----------------+---------------+---------------|
  8688	|atan2f      |conj          |feholdexcept     |llrint         |scalblnl       |
  8689	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8690	|[11]        |[11]          |                 |               |               |
  8691	|------------+--------------+-----------------+---------------+---------------|
  8692	|atan2l      |conjf         |feraiseexcept    |llrintf        |scalbn         |
  8693	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8694	|[11]        |[11]          |                 |               |               |
  8695	|------------+--------------+-----------------+---------------+---------------|
  8696	|atanf       |conjl         |fesetenv         |llrintl        |scalbnf        |
  8697	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8698	|[11]        |[11]          |                 |               |               |
  8699	|------------+--------------+-----------------+---------------+---------------|
  8700	|atanh       |copysign      |fesetexceptflag  |llround        |scalbnl        |
  8701	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8702	|[12]        |[11]          |                 |               |               |
  8703	|------------+--------------+-----------------+---------------+---------------|
  8704	|atanhf      |copysignf     |fesetround       |llroundf       |significand    |
  8705	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8706	|[11]        |[11]          |                 |               |               |
  8707	|------------+--------------+-----------------+---------------+---------------|
  8708	|atanhl      |copysignl     |fetestexcept     |llroundl       |significandf   |
  8709	|(GLIBC_2.0) |(GLIBC_2.0)   |(GLIBC_2.0)[11]  |(GLIBC_2.0)[11]|(GLIBC_2.0)[11]|
  8710	|[11]        |[11]          |                 |               |               |
  8711	|------------+--------------+-----------------+---------------+---------------|
  8712	|atanl       |cos(GLIBC_2.0)|feupdateenv      |log(GLIBC_2.0) |significandl   |
  8713	|(GLIBC_2.0) |[12]          |(GLIBC_2.0)[11]  |[12]           |(GLIBC_2.0)[11]|
  8714	|[11]        |              |                 |               |               |
  8715	|------------+--------------+-----------------+---------------+---------------|
  8716	|cabs        |cosf          |finite(GLIBC_2.1)|log10          |sin(GLIBC_2.1) |
  8717	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |(GLIBC_2.1)[12]|[12]           |
  8718	|[12]        |[11]          |                 |               |               |
  8719	|------------+--------------+-----------------+---------------+---------------|
  8720	|cabsf       |cosh          |finitef          |log1p          |sincos         |
  8721	|(GLIBC_2.1) |(GLIBC_2.1)   |(GLIBC_2.1)[11]  |(GLIBC_2.1)[12]|(GLIBC_2.1)[11]|
  8722	|[11]        |[12]          |                 |               |               |
  8723	|------------+--------------+-----------------+---------------+---------------|
  8724	|cabsl       |coshf         |finitel          |logb(GLIBC_2.1)|sincosf        |
  8725	|(GLIBC_2.1) |(GLIBC_2.1)   |(GLIBC_2.1)[11]  |[12]           |(GLIBC_2.1)[11]|
  8726	|[11]        |[11]          |                 |               |               |
  8727	|------------+--------------+-----------------+---------------+---------------|
  8728	|cacos       |coshl         |floor(GLIBC_2.1) |lrint          |sincosl        |
  8729	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8730	|[11]        |[11]          |                 |               |               |
  8731	|------------+--------------+-----------------+---------------+---------------|
  8732	|cacosf      |cosl          |floorf(GLIBC_2.1)|lrintf         |sinf(GLIBC_2.1)|
  8733	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[11]           |
  8734	|[11]        |[11]          |                 |               |               |
  8735	|------------+--------------+-----------------+---------------+---------------|
  8736	|cacosh      |cpow          |floorl(GLIBC_2.1)|lrintl         |sinh(GLIBC_2.1)|
  8737	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[12]           |
  8738	|[11]        |[11]          |                 |               |               |
  8739	|------------+--------------+-----------------+---------------+---------------|
  8740	|cacoshf     |cpowf         |fma(GLIBC_2.1)   |lround         |sinhf          |
  8741	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8742	|[11]        |[11]          |                 |               |               |
  8743	|------------+--------------+-----------------+---------------+---------------|
  8744	|cacoshl     |cpowl         |fmaf(GLIBC_2.1)  |lroundf        |sinhl          |
  8745	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8746	|[11]        |[11]          |                 |               |               |
  8747	|------------+--------------+-----------------+---------------+---------------|
  8748	|cacosl      |cproj         |fmal(GLIBC_2.1)  |lroundl        |sinl(GLIBC_2.1)|
  8749	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[11]           |
  8750	|[11]        |[11]          |                 |               |               |
  8751	|------------+--------------+-----------------+---------------+---------------|
  8752	|carg        |cprojf        |fmax(GLIBC_2.1)  |matherr        |sqrt(GLIBC_2.1)|
  8753	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[12]           |
  8754	|[11]        |[11]          |                 |               |               |
  8755	|------------+--------------+-----------------+---------------+---------------|
  8756	|cargf       |cprojl        |fmaxf(GLIBC_2.1) |modf(GLIBC_2.1)|sqrtf          |
  8757	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |[12]           |(GLIBC_2.1)[11]|
  8758	|[11]        |[11]          |                 |               |               |
  8759	|------------+--------------+-----------------+---------------+---------------|
  8760	|cargl       |creal         |fmaxl(GLIBC_2.1) |modff          |sqrtl          |
  8761	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8762	|[11]        |[11]          |                 |               |               |
  8763	|------------+--------------+-----------------+---------------+---------------|
  8764	|casin       |creall        |fmin(GLIBC_2.1)  |modfl          |tan(GLIBC_2.1) |
  8765	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[12]           |
  8766	|[11]        |[11]          |                 |               |               |
  8767	|------------+--------------+-----------------+---------------+---------------|
  8768	|casinf      |csin          |fminf(GLIBC_2.1) |nan(GLIBC_2.1) |tanf(GLIBC_2.1)|
  8769	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |[11]           |[11]           |
  8770	|[11]        |[11]          |                 |               |               |
  8771	|------------+--------------+-----------------+---------------+---------------|
  8772	|casinh      |csinf         |fminl(GLIBC_2.1) |nanf(GLIBC_2.1)|tanh(GLIBC_2.1)|
  8773	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |[11]           |[12]           |
  8774	|[11]        |[11]          |                 |               |               |
  8775	|------------+--------------+-----------------+---------------+---------------|
  8776	|casinhf     |csinh         |fmod(GLIBC_2.1)  |nanl(GLIBC_2.1)|tanhf          |
  8777	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |[11]           |(GLIBC_2.1)[11]|
  8778	|[11]        |[11]          |                 |               |               |
  8779	|------------+--------------+-----------------+---------------+---------------|
  8780	|casinhl     |csinhf        |fmodf(GLIBC_2.1) |nearbyint      |tanhl          |
  8781	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8782	|[11]        |[11]          |                 |               |               |
  8783	|------------+--------------+-----------------+---------------+---------------|
  8784	|casinl      |csinhl        |fmodl(GLIBC_2.1) |nearbyintf     |tanl(GLIBC_2.1)|
  8785	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[11]           |
  8786	|[11]        |[11]          |                 |               |               |
  8787	|------------+--------------+-----------------+---------------+---------------|
  8788	|catan       |csinl         |frexp(GLIBC_2.1) |nearbyintl     |tgamma         |
  8789	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8790	|[11]        |[11]          |                 |               |               |
  8791	|------------+--------------+-----------------+---------------+---------------|
  8792	|catanf      |csqrt         |frexpf(GLIBC_2.1)|nextafter      |tgammaf        |
  8793	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[12]|(GLIBC_2.1)[11]|
  8794	|[11]        |[11]          |                 |               |               |
  8795	|------------+--------------+-----------------+---------------+---------------|
  8796	|catanh      |csqrtf        |frexpl(GLIBC_2.1)|nextafterf     |tgammal        |
  8797	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8798	|[11]        |[11]          |                 |               |               |
  8799	|------------+--------------+-----------------+---------------+---------------|
  8800	|catanhf     |csqrtl        |gamma(GLIBC_2.1) |nextafterl     |trunc          |
  8801	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8802	|[11]        |[11]          |                 |               |               |
  8803	|------------+--------------+-----------------+---------------+---------------|
  8804	|catanhl     |ctan          |gammaf(GLIBC_2.1)|nexttoward     |truncf         |
  8805	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8806	|[11]        |[11]          |                 |               |               |
  8807	|------------+--------------+-----------------+---------------+---------------|
  8808	|catanl      |ctanf         |gammal(GLIBC_2.1)|nexttowardf    |truncl         |
  8809	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|(GLIBC_2.1)[11]|
  8810	|[11]        |[11]          |                 |               |               |
  8811	|------------+--------------+-----------------+---------------+---------------|
  8812	|cbrt        |ctanh         |hypot(GLIBC_2.0) |nexttowardl    |y0(GLIBC_2.0)  |
  8813	|(GLIBC_2.0) |(GLIBC_2.0)   |[12]             |(GLIBC_2.0)[11]|[12]           |
  8814	|[12]        |[11]          |                 |               |               |
  8815	|------------+--------------+-----------------+---------------+---------------|
  8816	|cbrtf       |ctanhf        |hypotf(GLIBC_2.0)|pow(GLIBC_2.0) |y0f(GLIBC_2.0) |
  8817	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |[12]           |[11]           |
  8818	|[11]        |[11]          |                 |               |               |
  8819	|------------+--------------+-----------------+---------------+---------------|
  8820	|cbrtl       |ctanhl        |hypotl(GLIBC_2.0)|pow10          |y0l(GLIBC_2.0) |
  8821	|(GLIBC_2.0) |(GLIBC_2.0)   |[11]             |(GLIBC_2.0)[11]|[11]           |
  8822	|[11]        |[11]          |                 |               |               |
  8823	|------------+--------------+-----------------+---------------+---------------|
  8824	|ccos        |ctanl         |ilogb(GLIBC_2.1) |pow10f         |y1(GLIBC_2.1)  |
  8825	|(GLIBC_2.1) |(GLIBC_2.1)   |[12]             |(GLIBC_2.1)[11]|[12]           |
  8826	|[11]        |[11]          |                 |               |               |
  8827	|------------+--------------+-----------------+---------------+---------------|
  8828	|ccosf       |dremf         |ilogbf(GLIBC_2.1)|pow10l         |y1f(GLIBC_2.1) |
  8829	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[11]           |
  8830	|[11]        |[11]          |                 |               |               |
  8831	|------------+--------------+-----------------+---------------+---------------|
  8832	|ccosh       |dreml         |ilogbl(GLIBC_2.1)|powf(GLIBC_2.1)|y1l(GLIBC_2.1) |
  8833	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |[11]           |[11]           |
  8834	|[11]        |[11]          |                 |               |               |
  8835	|------------+--------------+-----------------+---------------+---------------|
  8836	|ccoshf      |erf(GLIBC_2.1)|j0(GLIBC_2.1)[12]|powl(GLIBC_2.1)|yn(GLIBC_2.1)  |
  8837	|(GLIBC_2.1) |[12]          |                 |[11]           |[12]           |
  8838	|[11]        |              |                 |               |               |
  8839	|------------+--------------+-----------------+---------------+---------------|
  8840	|ccoshl      |erfc          |j0f(GLIBC_2.1)   |remainder      |ynf(GLIBC_2.1) |
  8841	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[12]|[11]           |
  8842	|[11]        |[12]          |                 |               |               |
  8843	|------------+--------------+-----------------+---------------+---------------|
  8844	|ccosl       |erfcf         |j0l(GLIBC_2.1)   |remainderf     |ynl(GLIBC_2.1) |
  8845	|(GLIBC_2.1) |(GLIBC_2.1)   |[11]             |(GLIBC_2.1)[11]|[11]           |
  8846	|[11]        |[11]          |                 |               |               |
  8847	|------------+--------------+-----------------+---------------+---------------|
  8848	|ceil        |erfcl         |j1(GLIBC_2.0)[12]|remainderl     |               |
  8849	|(GLIBC_2.0) |(GLIBC_2.0)   |                 |(GLIBC_2.0)[11]|               |
  8850	|[12]        |[11]          |                 |               |               |
  8851	+-----------------------------------------------------------------------------+
  8852	-------------------------------------------------------------------------------
  8853	
  8854	Data Symbols
  8855	
  8856	Table 10-29. libm - Math Data Interfaces
  8857	
  8858	+--------------------+
  8859	|signgam[12] | | | | |
  8860	+--------------------+
  8861	-------------------------------------------------------------------------------
  8862	
  8863	Data Definitions for libm
  8864	
  8865	-------------------------------------------------------------------------------
  8866	
  8867	math.h
  8868	
  8869	struct exception
  8870	{
  8871	  int type;
  8872	  char *name;
  8873	  double arg1;
  8874	  double arg2;
  8875	  double retval;
  8876	}
  8877	 ;
  8878	
  8879	#define HUGE_VAL        0x7FF00000UL
  8880	
  8881	#define M_1_PI  0.31830988618379067154
  8882	#define M_LOG10E        0.43429448190325182765
  8883	#define M_2_PI  0.63661977236758134308
  8884	#define M_LN2   0.69314718055994530942
  8885	#define M_SQRT1_2       0.70710678118654752440
  8886	#define M_PI_4  0.78539816339744830962
  8887	#define M_2_SQRTPI      1.12837916709551257390
  8888	#define M_SQRT2 1.41421356237309504880
  8889	#define M_LOG2E 1.4426950408889634074
  8890	#define M_PI_2  1.57079632679489661923
  8891	#define M_LN10  2.30258509299404568402
  8892	#define M_E     2.7182818284590452354
  8893	#define M_PI    3.14159265358979323846
  8894	-------------------------------------------------------------------------------
  8895	
  8896	Interfaces for libpthread
  8897	
  8898	LSB systems support POSIX threads with the following exceptions. This list is
  8899	intended to match the behavior of historical Linux implementations.
  8900	Applications should be written to deal with either POSIX threads or the thread
  8901	behaviors described here.
  8902	
  8903	  * POSIX specifies a concept of per-process rather than per-thread signals.
  8904	    The LSB does not require this behavior; traditional Linux implementations
  8905	    have had per-thread signals only. A related issue is that applications
  8906	    cannot rely on getpid() returning the same value in different threads.
  8907	   
  8908	  * Note: one implication of per-thread signals is that a core dump (for
  8909	    example) may not stop all threads in a given process. This may be an issue
  8910	    when designing ways to stop/start applications.
  8911	   
  8912	  * Applications which create child processes (using fork() and the like) must
  8913	    then wait for them (using waitpid() family of functions) in the same thread
  8914	    as they created them. Note that coding applications this way will work both
  8915	    with full POSIX threads and legacy Linux thread implementations.
  8916	   
  8917	  * POSIX specifies that changing the user or group id instantly affects the
  8918	    behavior of all threads. This behavior is not specified; applications must
  8919	    use their own lock if they need this behavior. Rationale: it seems
  8920	    unnecessary and it is a performance hit (an SMP kernel must lock the user
  8921	    id).
  8922	   
  8923	  * Although this standard doesn't have a way to list processes (/proc or "ps"
  8924	    command line isn't in, right?), it is our intention to not specify one way
  8925	    or the other whether multiple threads appear as separate processes or as a
  8926	    single process.
  8927	   
  8928	  * Applications cannot rely on resource limits (getrusage and setrusage) being
  8929	    maintained per-process rather than per-thread.
  8930	   
  8931	  * Applications must disconnect from the controlling tty before calling
  8932	    pthread_create.
  8933	   
  8934	  * times() doesn't account for all threads, just the caller.
  8935	   
  8936	  * Applications must not call pthread_cancel if they call any system libraries
  8937	    (most notably X Window System libraries), as system libraries are not
  8938	    guaranteed to be thread safe. Likewise, for such libraries, only one thread
  8939	    per process may call them.
  8940	   
  8941	  * Applications cannot rely on fcntl/lockf locks being visible per-process
  8942	    rather than per-thread. Likewise for mandatory file locks.
  8943	   
  8944	  * Threaded applications cannot use SIGUSR1 or SIGUSR2.
  8945	   
  8946	The behavior of the interfaces in this library is specified by the following
  8947	standards.
  8948	
  8949	Linux Standard Base[13]                                                        
  8950	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  8951	(ISBN: 1-85912-181-0, C606)[14]                                                
  8952	
  8953	-------------------------------------------------------------------------------
  8954	
  8955	Posix Threads
  8956	
  8957	Table 10-30. libpthread - Posix Threads Function Interfaces
  8958	
  8959	+-------------------------------------------------------------------------------------------------------------------------------------+
  8960	|pthread_attr_destroy        |pthread_attr_setstackaddr|pthread_getspecific         |pthread_once(GLIBC_2.0)[14]  |pthread_setspecific|
  8961	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |                             |(GLIBC_2.0)[14]    |
  8962	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8963	|pthread_attr_getdetachstate |pthread_attr_setstacksize|pthread_join(GLIBC_2.0)[14] |pthread_rwlock_destroy       |pthread_sigmask    |
  8964	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |                            |(GLIBC_2.0)[14]              |(GLIBC_2.0)[14]    |
  8965	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8966	|pthread_attr_getguardsize   |pthread_cancel(GLIBC_2.1)|pthread_key_create          |pthread_rwlock_init          |pthread_testcancel |
  8967	|(GLIBC_2.1)[14]             |[14]                     |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |(GLIBC_2.1)[14]    |
  8968	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8969	|pthread_attr_getinheritsched|pthread_cond_broadcast   |pthread_key_delete          |pthread_rwlock_rdlock        |sem_close          |
  8970	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |(GLIBC_2.0)[14]    |
  8971	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8972	|pthread_attr_getschedparam  |pthread_cond_destroy     |pthread_kill(GLIBC_2.0)[14] |pthread_rwlock_tryrdlock     |sem_destroy        |
  8973	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |                            |(GLIBC_2.0)[14]              |(GLIBC_2.0)[14]    |
  8974	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8975	|pthread_attr_getschedpolicy |pthread_cond_init        |pthread_mutex_destroy       |pthread_rwlock_trywrlock     |sem_getvalue       |
  8976	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |(GLIBC_2.0)[14]    |
  8977	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8978	|pthread_attr_getscope       |pthread_cond_signal      |pthread_mutex_init          |pthread_rwlock_unlock        |sem_init(GLIBC_2.0)|
  8979	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |[14]               |
  8980	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8981	|pthread_attr_getstackaddr   |pthread_cond_timedwait   |pthread_mutex_lock          |pthread_rwlock_wrlock        |sem_open(GLIBC_2.1)|
  8982	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]          |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |[14]               |
  8983	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8984	|pthread_attr_getstacksize   |pthread_cond_wait        |pthread_mutex_trylock       |pthread_rwlockattr_destroy   |sem_post(GLIBC_2.1)|
  8985	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]          |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |[14]               |
  8986	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8987	|pthread_attr_init(GLIBC_2.1)|pthread_condattr_destroy |pthread_mutex_unlock        |pthread_rwlockattr_getpshared|sem_timedwait      |
  8988	|[14]                        |(GLIBC_2.1)[14]          |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |(GLIBC_2.1)[13]    |
  8989	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8990	|pthread_attr_setdetachstate |pthread_condattr_init    |pthread_mutexattr_destroy   |pthread_rwlockattr_init      |sem_trywait        |
  8991	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |(GLIBC_2.0)[14]    |
  8992	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8993	|pthread_attr_setguardsize   |pthread_create(GLIBC_2.1)|pthread_mutexattr_getpshared|pthread_rwlockattr_setpshared|sem_unlink         |
  8994	|(GLIBC_2.1)[14]             |[14]                     |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |(GLIBC_2.1)[14]    |
  8995	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8996	|pthread_attr_setinheritsched|pthread_detach(GLIBC_2.0)|pthread_mutexattr_gettype   |pthread_self(GLIBC_2.0)[14]  |sem_wait(GLIBC_2.0)|
  8997	|(GLIBC_2.0)[14]             |[14]                     |(GLIBC_2.0)[14]             |                             |[14]               |
  8998	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  8999	|pthread_attr_setschedparam  |pthread_equal(GLIBC_2.0) |pthread_mutexattr_init      |pthread_setcancelstate       |                   |
  9000	|(GLIBC_2.0)[14]             |[14]                     |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |                   |
  9001	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  9002	|pthread_attr_setschedpolicy |pthread_exit(GLIBC_2.0)  |pthread_mutexattr_setpshared|pthread_setcanceltype        |                   |
  9003	|(GLIBC_2.0)[14]             |[14]                     |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |                   |
  9004	|----------------------------+-------------------------+----------------------------+-----------------------------+-------------------|
  9005	|pthread_attr_setscope       |pthread_getschedparam    |pthread_mutexattr_settype   |pthread_setschedparam        |                   |
  9006	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]          |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |                   |
  9007	+-------------------------------------------------------------------------------------------------------------------------------------+
  9008	-------------------------------------------------------------------------------
  9009	
  9010	Data Definitions for libpthread
  9011	
  9012	-------------------------------------------------------------------------------
  9013	
  9014	pthread.h
  9015	
  9016	typedef unsigned int pthread_key_t;
  9017	
  9018	typedef int pthread_once_t;
  9019	
  9020	struct _pthread_fastlock
  9021	{
  9022	  int __spinlock;
  9023	}
  9024	 ;
  9025	
  9026	
  9027	typedef unsigned long pthread_t;
  9028	
  9029	
  9030	typedef struct _pthread_descr_struct *_pthread_descr;
  9031	
  9032	struct _pthread_descr_struct;
  9033	
  9034	
  9035	typedef struct
  9036	{
  9037	  struct _pthread_fastlock lock;
  9038	  _pthread_descr owner;
  9039	  int kind;
  9040	  unsigned int count;
  9041	}
  9042	pthread_mutex_t;
  9043	
  9044	typedef struct
  9045	{
  9046	  int __mutexkind;
  9047	}
  9048	pthread_mutexattr_t;
  9049	
  9050	
  9051	typedef struct
  9052	{
  9053	  int __detachstate;
  9054	  int __schedpolicy;
  9055	  struct sched_param __schedparam;
  9056	  int __inheritsched;
  9057	  int __scope;
  9058	  void *__stackaddr;
  9059	  unsigned long __stacksize;
  9060	}
  9061	pthread_attr_t;
  9062	
  9063	
  9064	typedef struct
  9065	{
  9066	  struct _pthread_fastlock lock;
  9067	  _pthread_descr wait_chain;
  9068	}
  9069	pthread_cond_t;
  9070	
  9071	typedef void *pthread_condattr_t;
  9072	
  9073	
  9074	
  9075	#define PTHREAD_ONCE_INIT       0
  9076	#define PTHREAD_CREATE_DETACHED PTHREAD_CREATE_DETACHED
  9077	#define PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_JOINABLE
  9078	#define PTHREAD_EXPLICIT_SCHED  PTHREAD_EXPLICIT_SCHED
  9079	#define PTHREAD_INHERIT_SCHED   PTHREAD_INHERIT_SCHED
  9080	#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE
  9081	#define PTHREAD_PROCESS_SHARED  PTHREAD_PROCESS_SHARED
  9082	#define PTHREAD_SCOPE_PROCESS   PTHREAD_SCOPE_PROCESS
  9083	#define PTHREAD_SCOPE_SYSTEM    PTHREAD_SCOPE_SYSTEM
  9084	
  9085	#define PTHREAD_CANCELED        ((void*)-1)
  9086	#define PTHREAD_CANCEL_ASYNCHRONOUS     PTHREAD_CANCEL_ASYNCHRONOUS
  9087	#define PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED
  9088	#define PTHREAD_CANCEL_DISABLE  PTHREAD_CANCEL_DISABLE
  9089	#define PTHREAD_CANCEL_ENABLE   PTHREAD_CANCEL_ENABLE
  9090	-------------------------------------------------------------------------------
  9091	
  9092	semaphore.h
  9093	
  9094	
  9095	typedef struct
  9096	{
  9097	  long status;
  9098	  int spinlock;
  9099	}
  9100	sem_t;
  9101	
  9102	
  9103	#define SEM_FAILED      ((sem_t*)0)
  9104	
  9105	#define SEM_VALUE_MAX   ((int)((~0u)>>1))
  9106	-------------------------------------------------------------------------------
  9107	
  9108	Interfaces Definitions for libpthread
  9109	
  9110	Table of Contents
  9111	sem_timedwait -- operation on semaphore
  9112	
  9113	sem_timedwait
  9114	
  9115	Name
  9116	
  9117	sem_timedwait -- operation on semaphore
  9118	
  9119	Synopsis
  9120	
  9121	#include <semaphore.h>
  9122	int sem_timedwait(sem_t *__restrict __sem, 
  9123	                  __const struct timespec *__restrict __abstime);
  9124	
  9125	Description
  9126	
  9127	sem_timedwait() waits for semaphore object SEM being posted. It is a new
  9128	function from IEEE Std. 1003.1-200x that is similar to sem_wait but waits only
  9129	until ABSTIME.
  9130	
  9131	-------------------------------------------------------------------------------
  9132	
  9133	Interfaces for libdl
  9134	
  9135	Table 10-31. libdl Definition
  9136	
  9137	+--------------------+
  9138	|Library:|libdl      |
  9139	|--------+-----------|
  9140	|SONAME: |libdl.so.2 |
  9141	+--------------------+
  9142	
  9143	The behavior of the interfaces in this library is specified by the following
  9144	standards.
  9145	
  9146	Linux Standard Base[15]                                                        
  9147	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  9148	(ISBN: 1-85912-181-0, C606)[16]                                                
  9149	
  9150	-------------------------------------------------------------------------------
  9151	
  9152	Dynamic Loader
  9153	
  9154	Table 10-32. libdl - Dynamic Loader Function Interfaces
  9155	
  9156	+------------------------------------------------------------------------------+
  9157	|dladdr         |dlclose        |dlerror        |dlopen         |dlsym         |
  9158	|(GLIBC_2.0)[15]|(GLIBC_2.0)[16]|(GLIBC_2.0)[16]|(GLIBC_2.0)[16]|(GLIBC_2.0)   |
  9159	|               |               |               |               |[16]          |
  9160	+------------------------------------------------------------------------------+
  9161	-------------------------------------------------------------------------------
  9162	
  9163	Data Definitions for libdl
  9164	
  9165	-------------------------------------------------------------------------------
  9166	
  9167	dlfcn.h
  9168	
  9169	typedef struct
  9170	{
  9171	  char *dli_fname;
  9172	  void *dli_fbase;
  9173	  char *dli_sname;
  9174	  void *dli_saddr;
  9175	}
  9176	Dl_info;
  9177	
  9178	#define RTLD_LOCAL      0
  9179	#define RTLD_LAZY       0x00001
  9180	#define RTLD_NOW        0x00002
  9181	#define RTLD_GLOBAL     0x00100
  9182	-------------------------------------------------------------------------------
  9183	
  9184	Interfaces Definitions for libdl
  9185	
  9186	Table of Contents
  9187	dladdr -- library routine for dynamic linking of object files
  9188	
  9189	dladdr
  9190	
  9191	Name
  9192	
  9193	dladdr -- library routine for dynamic linking of object files
  9194	
  9195	Synopsis
  9196	
  9197	cc ... -ldl ...
  9198	
  9199	#include <dlfcn.h>
  9200	
  9201	typedef struct {
  9202	             const char      *dli_fname;
  9203	             void            *dli_fbase;
  9204	             const char      *dli_sname;
  9205	             void            *dli_saddr;
  9206	} Dl_info;
  9207	
  9208	int dladdr(void *address, Dlinfo *dlip);
  9209	
  9210	Description
  9211	
  9212	This function implements the System V dynamic linking routines.
  9213	
  9214	The dladdr() function is the inverse of the dlsym() function. If the given
  9215	address is successfully located inside a module, dladdr() returns nonzero,
  9216	otherwise 0. On a successful return, the fields of dlip are filled in as
  9217	follows:
  9218	
  9219	dli_fname
  9220	   
  9221	    the pathname of the module
  9222	   
  9223	dli_fbase
  9224	   
  9225	    the base address of the module
  9226	   
  9227	dli_sname
  9228	   
  9229	    the name of the highest addressed symbol whose address precedes the given
  9230	    address
  9231	   
  9232	dli_saddr
  9233	   
  9234	    the address of that symbol
  9235	   
  9236	Shared objects must be linked using the -shared option to the linker ld(1). The
  9237	linker flag -rpath may be used to add a directory to the default search path
  9238	for shared objects and shared libraries. The linker flag -E or the C compiler
  9239	flag -rdynamic should be used to cause the application to export its symbols to
  9240	the shared objects.
  9241	
  9242	Environment
  9243	
  9244	LD_LIBRARY_PATH
  9245	   
  9246	    directory search-path for object files
  9247	   
  9248	-------------------------------------------------------------------------------
  9249	
  9250	Interfaces for libcrypt
  9251	
  9252	Table 10-33. libcrypt Definition
  9253	
  9254	+-----------------------+
  9255	|Library:|libcrypt      |
  9256	|--------+--------------|
  9257	|SONAME: |libcrypt.so.1 |
  9258	+-----------------------+
  9259	
  9260	The behavior of the interfaces in this library is specified by the following
  9261	standards.
  9262	
  9263	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  9264	(ISBN: 1-85912-181-0, C606)[17]                                                
  9265	
  9266	-------------------------------------------------------------------------------
  9267	
  9268	Encryption
  9269	
  9270	Table 10-34. libcrypt - Encryption Function Interfaces
  9271	
  9272	+---------------------------------------------------------------------+
  9273	|crypt(GLIBC_2.0)[17]|encrypt(GLIBC_2.0)[17]|setkey(GLIBC_2.0)[17]| | |
  9274	+---------------------------------------------------------------------+
  9275	-------------------------------------------------------------------------------
  9276	
  9277	Data Definitions for libcrypt
  9278	
  9279	-------------------------------------------------------------------------------
  9280	
  9281	unistd.h
  9282	
  9283	typedef int ssize_t;
  9284	
  9285	typedef int pid_t;
  9286	
  9287	typedef int *intptr_t;
  9288	
  9289	#define SEEK_SET        0
  9290	#define STDIN_FILENO    0
  9291	#define STDOUT_FILENO   1
  9292	#define SEEK_CUR        1
  9293	#define _SC_CLK_TCK     2
  9294	#define SEEK_END        2
  9295	#define STDERR_FILENO   2
  9296	#define _SC_OPEN_MAX    4
  9297	
  9298	#define F_OK    0
  9299	#define X_OK    1
  9300	#define W_OK    2
  9301	#define R_OK    4
  9302	-------------------------------------------------------------------------------
  9303	
  9304	Interfaces for librt
  9305	
  9306	The behavior of the interfaces in this library is specified by the following
  9307	standards.
  9308	
  9309	Large File Support[18]                                                         
  9310	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
  9311	(ISBN: 1-85912-181-0, C606)[19]                                                
  9312	
  9313	-------------------------------------------------------------------------------
  9314	
  9315	Asynchronous I/O
  9316	
  9317	Table 10-35. librt - Asynchronous I/O Function Interfaces
  9318	
  9319	+-----------------------------------------------------------------------------+
  9320	|aio_cancel  |aio_read     |aio_write          |clock_settime|timer_delete    |
  9321	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[19]    |(GLIBC_2.1)  |(GLIBC_2.1)[19] |
  9322	|[19]        |[19]         |                   |[19]         |                |
  9323	|------------+-------------+-------------------+-------------+----------------|
  9324	|aio_cancel64|aio_read64   |aio_write64        |lio_listio   |timer_getoverrun|
  9325	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[18]    |(GLIBC_2.1)  |(GLIBC_2.1)[19] |
  9326	|[18]        |[18]         |                   |[19]         |                |
  9327	|------------+-------------+-------------------+-------------+----------------|
  9328	|aio_error   |aio_return   |clock_getcpuclockid|lio_listio64 |timer_gettime   |
  9329	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[19]    |(GLIBC_2.1)  |(GLIBC_2.1)[19] |
  9330	|[19]        |[19]         |                   |[18]         |                |
  9331	|------------+-------------+-------------------+-------------+----------------|
  9332	|aio_error64 |aio_return64 |clock_getres       |shm_open     |timer_settime   |
  9333	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[19]    |(GLIBC_2.1)  |(GLIBC_2.1)[19] |
  9334	|[18]        |[18]         |                   |[19]         |                |
  9335	|------------+-------------+-------------------+-------------+----------------|
  9336	|aio_fsync   |aio_suspend  |clock_gettime      |shm_unlink   |                |
  9337	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[19]    |(GLIBC_2.1)  |                |
  9338	|[19]        |[19]         |                   |[19]         |                |
  9339	|------------+-------------+-------------------+-------------+----------------|
  9340	|aio_fsync64 |aio_suspend64|clock_nanosleep    |timer_create |                |
  9341	|(GLIBC_2.1) |(GLIBC_2.1)  |(GLIBC_2.1)[19]    |(GLIBC_2.1)  |                |
  9342	|[18]        |[18]         |                   |[19]         |                |
  9343	+-----------------------------------------------------------------------------+
  9344	-------------------------------------------------------------------------------
  9345	
  9346	Data Definitions for librt
  9347	
  9348	-------------------------------------------------------------------------------
  9349	
  9350	aio.h
  9351	
  9352	
  9353	enum
  9354	{
  9355	  AIO_CANCELED,
  9356	  AIO_NOTCANCELED,
  9357	  AIO_ALLDONE
  9358	}
  9359	 ;
  9360	
  9361	#define AIO_ALLDONE     AIO_ALLDONE
  9362	#define AIO_CANCELED    AIO_CANCELED
  9363	#define AIO_NOTCANCELED AIO_NOTCANCELED
  9364	
  9365	enum
  9366	{
  9367	  LIO_READ,
  9368	  LIO_WRITE,
  9369	  LIO_NOP
  9370	}
  9371	 ;
  9372	
  9373	#define LIO_NOP LIO_NOP
  9374	#define LIO_READ        LIO_READ
  9375	#define LIO_WAIT        LIO_WAIT
  9376	
  9377	enum
  9378	{
  9379	  LIO_WAIT,
  9380	  LIO_NOWAIT
  9381	}
  9382	 ;
  9383	
  9384	#define LIO_NOWAIT      LIO_NOWAIT
  9385	#define LIO_WRITE       LIO_WRITE
  9386	
  9387	struct aiocb
  9388	{
  9389	  int aio_fildes;
  9390	  int aio_lio_opcode;
  9391	  int aio_reqprio;
  9392	  void *aio_buf;
  9393	  size_t aio_nbytes;
  9394	  Unknown Type:".." aio_sigevent;
  9395	  struct aiocb *__next_prio;
  9396	  int __abs_prio;
  9397	  int __policy;
  9398	  int __error_code;
  9399	  __ssize_t __return_value;
  9400	  __off_t aio_offset;
  9401	  char __pad[1];
  9402	  char __unused[1];
  9403	}
  9404	 ;
  9405	
  9406	struct aiocb64
  9407	{
  9408	  int aio_fildes;
  9409	  int aio_lio_opcode;
  9410	  int aio_reqprio;
  9411	  void *aio_buf;
  9412	  size_t aio_nbytes;
  9413	  Unknown Type:".." aio_sigevent;
  9414	  struct aiocb *__next_prio;
  9415	  int __abs_prio;
  9416	  int __policy;
  9417	  int __error_code;
  9418	  __ssize_t __return_value;
  9419	  __off64_t aio_offset;
  9420	  char __unused[1];
  9421	}
  9422	 ;
  9423	-------------------------------------------------------------------------------
  9424	
  9425	sys/time.h
  9426	
  9427	struct timezone
  9428	{
  9429	  int tz_minuteswest;
  9430	  int tz_dsttime;
  9431	}
  9432	 ;
  9433	
  9434	#define ITIMER_REAL     0
  9435	#define ITIMER_VIRTUAL  1
  9436	#define ITIMER_PROF     2
  9437	
  9438	
  9439	enum __itimer_which;
  9440	
  9441	typedef int __itimer_which_t;
  9442	
  9443	
  9444	struct timespec
  9445	{
  9446	  time_t tv_sec;
  9447	  long tv_nsec;
  9448	}
  9449	 ;
  9450	
  9451	
  9452	struct tm
  9453	{
  9454	  int tm_sec;
  9455	  int tm_min;
  9456	  int tm_hour;
  9457	  int tm_mday;
  9458	  int tm_mon;
  9459	  int tm_year;
  9460	  int tm_wday;
  9461	  int tm_yday;
  9462	  int tm_isdst;
  9463	  long tm_gmtoff;
  9464	  char *tm_zone;
  9465	}
  9466	 ;
  9467	
  9468	
  9469	struct timeval
  9470	{
  9471	  time_t tv_sec;
  9472	  suseconds_t tv_usec;
  9473	}
  9474	 ;
  9475	
  9476	
  9477	struct itimerval
  9478	{
  9479	  struct timeval it_interval;
  9480	  struct timeval it_value;
  9481	}
  9482	 ;
  9483	-------------------------------------------------------------------------------
  9484	
  9485	time.h
  9486	
  9487	#define CLOCK_REALTIME  0
  9488	#define TIMER_ABSTIME   1
  9489	#define CLOCKS_PER_SEC  1000000l
  9490	
  9491	typedef long __clock_t;
  9492	
  9493	
  9494	typedef __clock_t clock_t;
  9495	
  9496	V. Utility Libraries
  9497	
  9498	Table of Contents
  9499	11. Libraries
  9500	
  9501	-------------------------------------------------------------------------------
  9502	
  9503	Chapter 11. Libraries
  9504	
  9505	An LSB-conforming implementation may also support some utility libraries which
  9506	are built on top of the interfaces provided by the base libraries. These
  9507	libraries implement common functionality, and hide additional system dependent
  9508	information such as file formats and device names.
  9509	
  9510	-------------------------------------------------------------------------------
  9511	
  9512	Interfaces for libz
  9513	
  9514	Table 11-1. libz Definition
  9515	
  9516	+-------------------+
  9517	|Library:|libz      |
  9518	|--------+----------|
  9519	|SONAME: |libz.so.1 |
  9520	+-------------------+
  9521	
  9522	The behavior of the interfaces in this library is specified by the following
  9523	standards.
  9524	
  9525	zlib 1.1.3 Manual[20]
  9526	
  9527	-------------------------------------------------------------------------------
  9528	
  9529	Compression Library
  9530	
  9531	Table 11-2. libz - Compression Library Function Interfaces
  9532	
  9533	+-----------------------------------------------------------------------------+
  9534	|adler32[20]  |deflateInit_[20]    |gzerror  |gzread[20] |inflateInit2_[20]   |
  9535	|             |                    |[20]     |           |                    |
  9536	|-------------+--------------------+---------+-----------+--------------------|
  9537	|compress[20] |deflateParams[20]   |gzflush  |gzrewind   |inflateInit_[20]    |
  9538	|             |                    |[20]     |[20]       |                    |
  9539	|-------------+--------------------+---------+-----------+--------------------|
  9540	|compress2[20]|deflateReset[20]    |gzgetc   |gzseek[20] |inflateReset[20]    |
  9541	|             |                    |[20]     |           |                    |
  9542	|-------------+--------------------+---------+-----------+--------------------|
  9543	|crc32[20]    |deflateSetDictionary|gzgets   |gzsetparams|inflateSetDictionary|
  9544	|             |[20]                |[20]     |[20]       |[20]                |
  9545	|-------------+--------------------+---------+-----------+--------------------|
  9546	|deflate[20]  |get_crc_table[20]   |gzopen   |gztell[20] |inflateSync[20]     |
  9547	|             |                    |[20]     |           |                    |
  9548	|-------------+--------------------+---------+-----------+--------------------|
  9549	|deflateCopy  |gzclose[20]         |gzprintf |gzwrite[20]|inflateSyncPoint[20]|
  9550	|[20]         |                    |[20]     |           |                    |
  9551	|-------------+--------------------+---------+-----------+--------------------|
  9552	|deflateEnd   |gzdopen[20]         |gzputc   |inflate[20]|uncompress[20]      |
  9553	|[20]         |                    |[20]     |           |                    |
  9554	|-------------+--------------------+---------+-----------+--------------------|
  9555	|deflateInit2_|gzeof[20]           |gzputs   |inflateEnd |zError[20]          |
  9556	|[20]         |                    |[20]     |[20]       |                    |
  9557	+-----------------------------------------------------------------------------+
  9558	-------------------------------------------------------------------------------
  9559	
  9560	Data Definitions for libz
  9561	
  9562	-------------------------------------------------------------------------------
  9563	
  9564	zlib.h
  9565	
  9566	typedef z_stream *z_streamp;
  9567	
  9568	typedef voidp gzFile;
  9569	-------------------------------------------------------------------------------
  9570	
  9571	Interfaces for libncurses
  9572	
  9573	Table 11-3. libncurses Definition
  9574	
  9575	+-------------------------+
  9576	|Library:|libncurses      |
  9577	|--------+----------------|
  9578	|SONAME: |libncurses.so.5 |
  9579	+-------------------------+
  9580	
  9581	The behavior of the interfaces in this library is specified by the following
  9582	standards.
  9583	
  9584	CAE Specification, May 1996, X/Open Curses, Issue 4, Version 2 (ISBN:          
  9585	1-85912-171-3, C610), plus Corrigendum U018[21]                                
  9586	
  9587	-------------------------------------------------------------------------------
  9588	
  9589	Curses
  9590	
  9591	Table 11-4. libncurses - Curses Function Interfaces
  9592	
  9593	+-----------------------------------------------------------------------------+
  9594	|addch[21]       |has_ic[21]    |mvwaddch[21]    |scr_dump[21]   |waddchstr   |
  9595	|                |              |                |               |[21]        |
  9596	|----------------+--------------+----------------+---------------+------------|
  9597	|addchnstr[21]   |has_il[21]    |mvwaddchnstr[21]|scr_init[21]   |waddnstr[21]|
  9598	|----------------+--------------+----------------+---------------+------------|
  9599	|addchstr[21]    |hline[21]     |mvwaddchstr[21] |scr_restore[21]|waddstr[21] |
  9600	|----------------+--------------+----------------+---------------+------------|
  9601	|addnstr[21]     |idcok[21]     |mvwaddnstr[21]  |scr_set[21]    |wattr_get   |
  9602	|                |              |                |               |[21]        |
  9603	|----------------+--------------+----------------+---------------+------------|
  9604	|addstr[21]      |idlok[21]     |mvwaddstr[21]   |scrl[21]       |wattr_off   |
  9605	|                |              |                |               |[21]        |
  9606	|----------------+--------------+----------------+---------------+------------|
  9607	|attr_get[21]    |immedok[21]   |mvwchgat[21]    |scroll[21]     |wattr_on[21]|
  9608	|----------------+--------------+----------------+---------------+------------|
  9609	|attr_off[21]    |inch[21]      |mvwdelch[21]    |scrollok[21]   |wattr_set   |
  9610	|                |              |                |               |[21]        |
  9611	|----------------+--------------+----------------+---------------+------------|
  9612	|attr_on[21]     |inchnstr[21]  |mvwgetch[21]    |set_term[21]   |wattroff[21]|
  9613	|----------------+--------------+----------------+---------------+------------|
  9614	|attr_set[21]    |inchstr[21]   |mvwgetnstr[21]  |setscrreg[21]  |wattron[21] |
  9615	|----------------+--------------+----------------+---------------+------------|
  9616	|attroff[21]     |init_color[21]|mvwgetstr[21]   |slk_attr_set   |wattrset[21]|
  9617	|                |              |                |[21]           |            |
  9618	|----------------+--------------+----------------+---------------+------------|
  9619	|attron[21]      |init_pair[21] |mvwhline[21]    |slk_attroff[21]|wbkgd[21]   |
  9620	|----------------+--------------+----------------+---------------+------------|
  9621	|attrset[21]     |initscr[21]   |mvwin[21]       |slk_attron[21] |wbkgdset[21]|
  9622	|----------------+--------------+----------------+---------------+------------|
  9623	|baudrate[21]    |innstr[21]    |mvwinch[21]     |slk_attrset[21]|wborder[21] |
  9624	|----------------+--------------+----------------+---------------+------------|
  9625	|beep[21]        |insch[21]     |mvwinchnstr[21] |slk_clear[21]  |wchgat[21]  |
  9626	|----------------+--------------+----------------+---------------+------------|
  9627	|bkgd[21]        |insdelln[21]  |mvwinchstr[21]  |slk_color[21]  |wclear[21]  |
  9628	|----------------+--------------+----------------+---------------+------------|
  9629	|bkgdset[21]     |insertln[21]  |mvwinnstr[21]   |slk_init[21]   |wclrtobot   |
  9630	|                |              |                |               |[21]        |
  9631	|----------------+--------------+----------------+---------------+------------|
  9632	|border[21]      |insnstr[21]   |mvwinsch[21]    |slk_label[21]  |wclrtoeol   |
  9633	|                |              |                |               |[21]        |
  9634	|----------------+--------------+----------------+---------------+------------|
  9635	|box[21]         |insstr[21]    |mvwinsnstr[21]  |slk_noutrefresh|wcolor_set  |
  9636	|                |              |                |[21]           |[21]        |
  9637	|----------------+--------------+----------------+---------------+------------|
  9638	|can_change_color|instr[21]     |mvwinsstr[21]   |slk_refresh[21]|wcursyncup  |
  9639	|[21]            |              |                |               |[21]        |
  9640	|----------------+--------------+----------------+---------------+------------|
  9641	|cbreak[21]      |intrflush[21] |mvwinstr[21]    |slk_restore[21]|wdelch[21]  |
  9642	|----------------+--------------+----------------+---------------+------------|
  9643	|chgat[21]       |is_linetouched|mvwprintw[21]   |slk_set[21]    |wdeleteln   |
  9644	|                |[21]          |                |               |[21]        |
  9645	|----------------+--------------+----------------+---------------+------------|
  9646	|clear[21]       |is_wintouched |mvwscanw[21]    |slk_touch[21]  |wechochar   |
  9647	|                |[21]          |                |               |[21]        |
  9648	|----------------+--------------+----------------+---------------+------------|
  9649	|clearok[21]     |isendwin[21]  |mvwvline[21]    |standend[21]   |werase[21]  |
  9650	|----------------+--------------+----------------+---------------+------------|
  9651	|clrtobot[21]    |keyname[21]   |napms[21]       |standout[21]   |wgetch[21]  |
  9652	|----------------+--------------+----------------+---------------+------------|
  9653	|clrtoeol[21]    |keypad[21]    |newpad[21]      |start_color[21]|wgetnstr[21]|
  9654	|----------------+--------------+----------------+---------------+------------|
  9655	|color_content   |killchar[21]  |newterm[21]     |subpad[21]     |wgetstr[21] |
  9656	|[21]            |              |                |               |            |
  9657	|----------------+--------------+----------------+---------------+------------|
  9658	|color_set[21]   |leaveok[21]   |newwin[21]      |subwin[21]     |whline[21]  |
  9659	|----------------+--------------+----------------+---------------+------------|
  9660	|copywin[21]     |longname[21]  |nl[21]          |syncok[21]     |winch[21]   |
  9661	|----------------+--------------+----------------+---------------+------------|
  9662	|curs_set[21]    |meta[21]      |nocbreak[21]    |termattrs[21]  |winchnstr   |
  9663	|                |              |                |               |[21]        |
  9664	|----------------+--------------+----------------+---------------+------------|
  9665	|def_prog_mode   |move[21]      |nodelay[21]     |termname[21]   |winchstr[21]|
  9666	|[21]            |              |                |               |            |
  9667	|----------------+--------------+----------------+---------------+------------|
  9668	|def_shell_mode  |mvaddch[21]   |noecho[21]      |tgetent[21]    |winnstr[21] |
  9669	|[21]            |              |                |               |            |
  9670	|----------------+--------------+----------------+---------------+------------|
  9671	|delay_output[21]|mvaddchnstr   |nonl[21]        |tgetflag[21]   |winsch[21]  |
  9672	|                |[21]          |                |               |            |
  9673	|----------------+--------------+----------------+---------------+------------|
  9674	|delch[21]       |mvaddchstr[21]|noqiflush[21]   |tgetnum[21]    |winsdelln   |
  9675	|                |              |                |               |[21]        |
  9676	|----------------+--------------+----------------+---------------+------------|
  9677	|deleteln[21]    |mvaddnstr[21] |noraw[21]       |tgetstr[21]    |winsertln   |
  9678	|                |              |                |               |[21]        |
  9679	|----------------+--------------+----------------+---------------+------------|
  9680	|delscreen[21]   |mvaddstr[21]  |notimeout[21]   |tgoto[21]      |winsnstr[21]|
  9681	|----------------+--------------+----------------+---------------+------------|
  9682	|delwin[21]      |mvchgat[21]   |overlay[21]     |tigetflag[21]  |winsstr[21] |
  9683	|----------------+--------------+----------------+---------------+------------|
  9684	|derwin[21]      |mvcur[21]     |overwrite[21]   |tigetnum[21]   |winstr[21]  |
  9685	|----------------+--------------+----------------+---------------+------------|
  9686	|doupdate[21]    |mvdelch[21]   |pair_content[21]|tigetstr[21]   |wmove[21]   |
  9687	|----------------+--------------+----------------+---------------+------------|
  9688	|dupwin[21]      |mvderwin[21]  |pechochar[21]   |timeout[21]    |wnoutrefresh|
  9689	|                |              |                |               |[21]        |
  9690	|----------------+--------------+----------------+---------------+------------|
  9691	|echo[21]        |mvgetch[21]   |pnoutrefresh[21]|tparm[21]      |wprintw[21] |
  9692	|----------------+--------------+----------------+---------------+------------|
  9693	|echochar[21]    |mvgetnstr[21] |prefresh[21]    |tputs[21]      |wredrawln   |
  9694	|                |              |                |               |[21]        |
  9695	|----------------+--------------+----------------+---------------+------------|
  9696	|endwin[21]      |mvgetstr[21]  |printw[21]      |typeahead[21]  |wrefresh[21]|
  9697	|----------------+--------------+----------------+---------------+------------|
  9698	|erase[21]       |mvhline[21]   |putp[21]        |ungetch[21]    |wscanw[21]  |
  9699	|----------------+--------------+----------------+---------------+------------|
  9700	|erasechar[21]   |mvinch[21]    |putwin[21]      |untouchwin[21] |wscrl[21]   |
  9701	|----------------+--------------+----------------+---------------+------------|
  9702	|filter[21]      |mvinchnstr[21]|qiflush[21]     |use_env[21]    |wsetscrreg  |
  9703	|                |              |                |               |[21]        |
  9704	|----------------+--------------+----------------+---------------+------------|
  9705	|flash[21]       |mvinchstr[21] |raw[21]         |vidattr[21]    |wstandend   |
  9706	|                |              |                |               |[21]        |
  9707	|----------------+--------------+----------------+---------------+------------|
  9708	|flushinp[21]    |mvinnstr[21]  |redrawwin[21]   |vidputs[21]    |wstandout   |
  9709	|                |              |                |               |[21]        |
  9710	|----------------+--------------+----------------+---------------+------------|
  9711	|getbkgd[21]     |mvinsch[21]   |refresh[21]     |vline[21]      |wsyncdown   |
  9712	|                |              |                |               |[21]        |
  9713	|----------------+--------------+----------------+---------------+------------|
  9714	|getch[21]       |mvinsnstr[21] |reset_prog_mode |vw_printw[21]  |wsyncup[21] |
  9715	|                |              |[21]            |               |            |
  9716	|----------------+--------------+----------------+---------------+------------|
  9717	|getnstr[21]     |mvinsstr[21]  |reset_shell_mode|vw_scanw[21]   |wtimeout[21]|
  9718	|                |              |[21]            |               |            |
  9719	|----------------+--------------+----------------+---------------+------------|
  9720	|getstr[21]      |mvinstr[21]   |resetty[21]     |vwprintw[21]   |wtouchln[21]|
  9721	|----------------+--------------+----------------+---------------+------------|
  9722	|getwin[21]      |mvprintw[21]  |ripoffline[21]  |vwscanw[21]    |wvline[21]  |
  9723	|----------------+--------------+----------------+---------------+------------|
  9724	|halfdelay[21]   |mvscanw[21]   |savetty[21]     |waddch[21]     |            |
  9725	|----------------+--------------+----------------+---------------+------------|
  9726	|has_colors[21]  |mvvline[21]   |scanw[21]       |waddchnstr[21] |            |
  9727	+-----------------------------------------------------------------------------+
  9728	-------------------------------------------------------------------------------
  9729	
  9730	Data Symbols
  9731	
  9732	Table 11-5. libncurses - Curses Data Interfaces
  9733	
  9734	+------------------------------------------+
  9735	|COLS[21]|LINES[21]|curscr[21]|stdscr[21]| |
  9736	+------------------------------------------+
  9737	-------------------------------------------------------------------------------
  9738	
  9739	Data Definitions for libncurses
  9740	
  9741	-------------------------------------------------------------------------------
  9742	
  9743	curses.h
  9744	
  9745	
  9746	#define WA_ALTCHARSET   A_ALTCHARSET
  9747	#define WA_ATTRIBUTES   A_ATTRIBUTES
  9748	#define WA_BLINK        A_BLINK
  9749	#define WA_BOLD A_BOLD
  9750	#define WA_DIM  A_DIM
  9751	#define WA_HORIZONTAL   A_HORIZONTAL
  9752	#define WA_INVIS        A_INVIS
  9753	#define WA_LEFT A_LEFT
  9754	#define WA_LOW  A_LOW
  9755	#define WA_NORMAL       A_NORMAL
  9756	#define WA_PROTECT      A_PROTECT
  9757	#define WA_REVERSE      A_REVERSE
  9758	#define WA_RIGHT        A_RIGHT
  9759	#define WA_STANDOUT     A_STANDOUT
  9760	#define WA_TOP  A_TOP
  9761	#define WA_UNDERLINE    A_UNDERLINE
  9762	#define WA_VERTICAL     A_VERTICAL
  9763	
  9764	#define COLOR_BLACK     0
  9765	#define COLOR_RED       1
  9766	#define COLOR_GREEN     2
  9767	#define COLOR_YELLOW    3
  9768	#define COLOR_BLUE      4
  9769	#define COLOR_MAGENTA   5
  9770	#define COLOR_CYAN      6
  9771	#define COLOR_WHITE     7
  9772	
  9773	#define _SUBWIN 0x01
  9774	#define _ENDLINE        0x02
  9775	#define _FULLWIN        0x04
  9776	#define _ISPAD  0x10
  9777	#define _HASMOVED       0x20
  9778	#define TRACE_MAXIMUM   0xffff
  9779	
  9780	typedef unsigned long chtype;
  9781	
  9782	typedef char bool;
  9783	
  9784	typedef struct screen SCREEN;
  9785	
  9786	typedef struct _win_st
  9787	{
  9788	  short _cury;
  9789	  short _curx;
  9790	  short _maxy;
  9791	  short _maxx;
  9792	  short _begy;
  9793	  short _begx;
  9794	  short _flags;
  9795	  attr_t _attrs;
  9796	  chtype _bkgd;
  9797	  bool _notimeout;
  9798	  bool _clear;
  9799	  bool _leaveok;
  9800	  bool _scroll;
  9801	  bool _idlok;
  9802	  bool _idcok;
  9803	  bool _immed;
  9804	  bool _sync;
  9805	  bool _use_keypad;
  9806	  int _delay;
  9807	  struct ldat *_line;
  9808	  short _regtop;
  9809	  short _regbottom;
  9810	  int _parx;
  9811	  int _pary;
  9812	  WINDOW *_parent;
  9813	  struct pdat _pad;
  9814	  short _yoffset;
  9815	}
  9816	WINDOW;
  9817	
  9818	typedef chtype attr_t;
  9819	
  9820	
  9821	#define KEY_CODE_YES    0400
  9822	#define KEY_BREAK       0401
  9823	#define KEY_MIN 0401
  9824	#define KEY_DOWN        0402
  9825	#define KEY_UP  0403
  9826	#define KEY_LEFT        0404
  9827	#define KEY_RIGHT       0405
  9828	#define KEY_HOME        0406
  9829	#define KEY_BACKSPACE   0407
  9830	#define KEY_F0  0410
  9831	#define KEY_DL  0510
  9832	#define KEY_IL  0511
  9833	#define KEY_DC  0512
  9834	#define KEY_IC  0513
  9835	#define KEY_EIC 0514
  9836	#define KEY_CLEAR       0515
  9837	#define KEY_EOS 0516
  9838	#define KEY_EOL 0517
  9839	#define KEY_SF  0520
  9840	#define KEY_SR  0521
  9841	#define KEY_NPAGE       0522
  9842	#define KEY_PPAGE       0523
  9843	#define KEY_STAB        0524
  9844	#define KEY_CTAB        0525
  9845	#define KEY_CATAB       0526
  9846	#define KEY_ENTER       0527
  9847	#define KEY_SRESET      0530
  9848	#define KEY_RESET       0531
  9849	#define KEY_PRINT       0532
  9850	#define KEY_LL  0533
  9851	#define KEY_A1  0534
  9852	#define KEY_A3  0535
  9853	#define KEY_B2  0536
  9854	#define KEY_C1  0537
  9855	#define KEY_C3  0540
  9856	#define KEY_BTAB        0541
  9857	#define KEY_BEG 0542
  9858	#define KEY_CANCEL      0543
  9859	#define KEY_CLOSE       0544
  9860	#define KEY_COMMAND     0545
  9861	#define KEY_COPY        0546
  9862	#define KEY_CREATE      0547
  9863	#define KEY_END 0550
  9864	#define KEY_EXIT        0551
  9865	#define KEY_FIND        0552
  9866	#define KEY_HELP        0553
  9867	#define KEY_MARK        0554
  9868	#define KEY_MESSAGE     0555
  9869	#define KEY_MOVE        0556
  9870	#define KEY_NEXT        0557
  9871	#define KEY_OPEN        0560
  9872	#define KEY_OPTIONS     0561
  9873	#define KEY_PREVIOUS    0562
  9874	#define KEY_REDO        0563
  9875	#define KEY_REFERENCE   0564
  9876	#define KEY_REFRESH     0565
  9877	#define KEY_REPLACE     0566
  9878	#define KEY_RESTART     0567
  9879	#define KEY_RESUME      0570
  9880	#define KEY_SAVE        0571
  9881	#define KEY_SBEG        0572
  9882	#define KEY_SCANCEL     0573
  9883	#define KEY_SCOMMAND    0574
  9884	#define KEY_SCOPY       0575
  9885	#define KEY_SCREATE     0576
  9886	#define KEY_SDC 0577
  9887	#define KEY_SDL 0600
  9888	#define KEY_SELECT      0601
  9889	#define KEY_SEND        0602
  9890	#define KEY_SEOL        0603
  9891	#define KEY_SEXIT       0604
  9892	#define KEY_SFIND       0605
  9893	#define KEY_SHELP       0606
  9894	#define KEY_SHOME       0607
  9895	#define KEY_SIC 0610
  9896	#define KEY_SLEFT       0611
  9897	#define KEY_SMESSAGE    0612
  9898	#define KEY_SMOVE       0613
  9899	#define KEY_SNEXT       0614
  9900	#define KEY_SOPTIONS    0615
  9901	#define KEY_SPREVIOUS   0616
  9902	#define KEY_SPRINT      0617
  9903	#define KEY_SREDO       0620
  9904	#define KEY_SREPLACE    0621
  9905	#define KEY_SRIGHT      0622
  9906	#define KEY_SRSUME      0623
  9907	#define KEY_SSAVE       0624
  9908	#define KEY_SSUSPEND    0625
  9909	#define KEY_SUNDO       0626
  9910	#define KEY_SUSPEND     0627
  9911	#define KEY_UNDO        0630
  9912	#define KEY_MOUSE       0631
  9913	#define KEY_RESIZE      0632
  9914	#define KEY_MAX 0777
  9915	-------------------------------------------------------------------------------
  9916	
  9917	Interfaces for libutil
  9918	
  9919	The behavior of the interfaces in this library is specified by the following
  9920	standards.
  9921	
  9922	Linux Standard Base[22]
  9923	
  9924	-------------------------------------------------------------------------------
  9925	
  9926	Utility Functions
  9927	
  9928	Table 11-6. libutil - Utility Functions Function Interfaces
  9929	
  9930	+--------------------------------------------------------------------------+
  9931	|forkpty(GLIBC_2.0)[22]|login_tty(GLIBC_2.0)[22]|logwtmp(GLIBC_2.0)[22]| | |
  9932	|----------------------+------------------------+----------------------+-+-|
  9933	|login(GLIBC_2.0)[22]  |logout(GLIBC_2.0)[22]   |openpty(GLIBC_2.0)[22]| | |
  9934	+--------------------------------------------------------------------------+
  9935	-------------------------------------------------------------------------------
  9936	
  9937	Interfaces Definitions for libutil
  9938	
  9939	Table of Contents
  9940	forkpty -- find and open an available pseudo-tty
  9941	login -- login utility function
  9942	login_tty -- find and open an available pseudo-tty
  9943	logout -- logout utility function
  9944	logwtmp -- append an entry to the wtmp file
  9945	openpty -- find and open an available pseudo-tty
  9946	
  9947	forkpty
  9948	
  9949	Name
  9950	
  9951	forkpty -- find and open an available pseudo-tty
  9952	
  9953	Synopsis
  9954	
  9955	int forkpty(int *amaster, 
  9956	        char *name,
  9957	        struct termios *termp,
  9958	        struct winsize *winp);
  9959	
  9960	Description
  9961	
  9962	The forkpty() function joins openpty(), fork(), and login_tty() to create a new
  9963	process operating on a pseudo-tty. The file descriptor of the master side of
  9964	the pseudo-tty is returned in amaster, and null or the filename of the slave in
  9965	name. If non-null, the termp and winp parameters will determine the terminal
  9966	attributes and window size of the slave side of the pseudo-tty.
  9967	
  9968	Return Value
  9969	
  9970	On success of the child process, zero is returned. When the parent process
  9971	receives the PID of its child process, pid is returned. On error, -1 is
  9972	returned, and errno is set appropriately.
  9973	
  9974	login
  9975	
  9976	Name
  9977	
  9978	login -- login utility function
  9979	
  9980	Synopsis
  9981	
  9982	void login(struct utmp *ut);
  9983	
  9984	Description
  9985	
  9986	The login() function updates the /var/run/utmp and /var/log/wtmp files with
  9987	user information contained in ut.
  9988	
  9989	login_tty
  9990	
  9991	Name
  9992	
  9993	login_tty -- find and open an available pseudo-tty
  9994	
  9995	Synopsis
  9996	
  9997	int login_tty(int fdr);
  9998	
  9999	Description
 10000	
 10001	login_tty() sets up for a login on the tty referenced by the file descriptor
 10002	fdr. This function creates a new session, makes the tty for the current process
 10003	the controlling terminal, sets the standard input, output, and error streams of
 10004	the current process, and closes fdr.
 10005	
 10006	Return Value
 10007	
 10008	On success, zero is returned. On error, -1 is returned, and errno is set
 10009	appropriately.
 10010	
 10011	logout
 10012	
 10013	Name
 10014	
 10015	logout -- logout utility function
 10016	
 10017	Synopsis
 10018	
 10019	int logout(const char *line);
 10020	
 10021	Description
 10022	
 10023	Given the device line, the logout() function removes the entry from the
 10024	corresponding /var/run/utmp system file.
 10025	
 10026	Return Value
 10027	
 10028	Zero is returned if there was no entry to remove. A non-zero return value
 10029	indicates success.
 10030	
 10031	logwtmp
 10032	
 10033	Name
 10034	
 10035	logwtmp -- append an entry to the wtmp file
 10036	
 10037	Synopsis
 10038	
 10039	#include <utmp.h>
 10040	
 10041	void logwtmp(const char *line, const char *name, const char *host);
 10042	
 10043	Description
 10044	
 10045	logwtmp() constructs an utmp structure using line, name, host, current time and
 10046	current process id. Then it calls updwtmp() to append the structure to the utmp
 10047	file.
 10048	
 10049	Availability
 10050	
 10051	Both functions are available under glibc2, but not under libc5. However,
 10052	logwtmp occurs in the old libbsd.
 10053	
 10054	Files
 10055	
 10056	/var/log/wtmp database of past user logins
 10057	
 10058	openpty
 10059	
 10060	Name
 10061	
 10062	openpty -- find and open an available pseudo-tty
 10063	
 10064	Synopsis
 10065	
 10066	int openpty(int *amaster, 
 10067	        int *aslave, 
 10068	        char *name,
 10069	        struct termios *termp,
 10070	        struct winsize *winp);
 10071	
 10072	Description
 10073	
 10074	The openpty() function finds an available pseudo-tty and returns file
 10075	descriptors for the amaster and aslave. The filename of the slave is returned
 10076	in name, otherwise a null. The terminal parameters of the slave will be set to
 10077	the values in termp, otherwise a null. The window size of the slave will be set
 10078	to the values in winp, otherwise a null.
 10079	
 10080	Return Value
 10081	
 10082	On success, zero is returned. On error, -1 is returned, and errno is set
 10083	appropriately.
 10084	
 10085	Errors
 10086	
 10087	ENOENT
 10088	   
 10089	    There are no available ttys.
 10090	   
 10091	VI. Graphic Libraries
 10092	
 10093	Table of Contents
 10094	12. Libraries
 10095	
 10096	-------------------------------------------------------------------------------
 10097	
 10098	Chapter 12. Libraries
 10099	
 10100	The X Libraries should be built thread-safe.
 10101	
 10102	-------------------------------------------------------------------------------
 10103	
 10104	Interfaces for libX11
 10105	
 10106	Table 12-1. libX11 Definition
 10107	
 10108	+---------------------+
 10109	|Library:|libX11      |
 10110	|--------+------------|
 10111	|SONAME: |libX11.so.6 |
 10112	+---------------------+
 10113	
 10114	The behavior of the interfaces in this library is specified by the following
 10115	standards.
 10116	
 10117	X11R6.4 Xlib - C library[23]
 10118	
 10119	-------------------------------------------------------------------------------
 10120	
 10121	X Windows System Interface
 10122	
 10123	Table 12-2. libX11 - X Windows System Interface Function Interfaces
 10124	
 10125	+---------------------------------------------------------------------------------------------------------------------------------------------------+
 10126	|XActivateScreenSaver[23]    |XFetchName[23]            |XPeekEvent[23]                |XTranslateCoordinates[23]       |XkbFreeClientMap[23]       |
 10127	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10128	|XAddConnectionWatch[23]     |XFillArc[23]              |XPeekIfEvent[23]              |XUndefineCursor[23]             |XkbFreeCompatMap[23]       |
 10129	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10130	|XAddExtension[23]           |XFillArcs[23]             |XPending[23]                  |XUngrabButton[23]               |XkbFreeComponentList[23]   |
 10131	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10132	|XAddHost[23]                |XFillPolygon[23]          |XPlanesOfScreen[23]           |XUngrabKey[23]                  |XkbFreeControls[23]        |
 10133	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10134	|XAddHosts[23]               |XFillRectangle[23]        |XPointInRegion[23]            |XUngrabKeyboard[23]             |XkbFreeGeomColors[23]      |
 10135	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10136	|XAddPixel[23]               |XFillRectangles[23]       |XPolygonRegion[23]            |XUngrabPointer[23]              |XkbFreeGeomDoodads[23]     |
 10137	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10138	|XAddToExtensionList[23]     |XFilterEvent[23]          |XProcessInternalConnection[23]|XUngrabServer[23]               |XkbFreeGeomKeyAliases[23]  |
 10139	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10140	|XAddToSaveSet[23]           |XFindContext[23]          |XProtocolRevision[23]         |XUninstallColormap[23]          |XkbFreeGeomKeys[23]        |
 10141	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10142	|XAllPlanes[23]              |XFindOnExtensionList[23]  |XProtocolVersion[23]          |XUnionRectWithRegion[23]        |XkbFreeGeomOutlines[23]    |
 10143	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10144	|XAllocClassHint[23]         |XFlush[23]                |XPutBackEvent[23]             |XUnionRegion[23]                |XkbFreeGeomOverlayKeys[23] |
 10145	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10146	|XAllocColor[23]             |XFlushGC[23]              |XPutImage[23]                 |XUnloadFont[23]                 |XkbFreeGeomOverlayRows[23] |
 10147	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10148	|XAllocColorCells[23]        |XFontsOfFontSet[23]       |XPutPixel[23]                 |XUnlockDisplay[23]              |XkbFreeGeomOverlays[23]    |
 10149	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10150	|XAllocColorPlanes[23]       |XForceScreenSaver[23]     |XQLength[23]                  |XUnmapSubwindows[23]            |XkbFreeGeomPoints[23]      |
 10151	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10152	|XAllocIconSize[23]          |XFree[23]                 |XQueryBestCursor[23]          |XUnmapWindow[23]                |XkbFreeGeomProperties[23]  |
 10153	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10154	|XAllocNamedColor[23]        |XFreeColormap[23]         |XQueryBestSize[23]            |XUnregisterIMInstantiateCallback|XkbFreeGeomRows[23]        |
 10155	|                            |                          |                              |[23]                            |                           |
 10156	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10157	|XAllocSizeHints[23]         |XFreeColors[23]           |XQueryBestStipple[23]         |XUnsetICFocus[23]               |XkbFreeGeomSections[23]    |
 10158	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10159	|XAllocStandardColormap[23]  |XFreeCursor[23]           |XQueryBestTile[23]            |XVaCreateNestedList[23]         |XkbFreeGeomShapes[23]      |
 10160	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10161	|XAllocWMHints[23]           |XFreeExtensionList[23]    |XQueryColor[23]               |XVendorRelease[23]              |XkbFreeGeometry[23]        |
 10162	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10163	|XAllowEvents[23]            |XFreeFont[23]             |XQueryColors[23]              |XVisualIDFromVisual[23]         |XkbFreeIndicatorMaps[23]   |
 10164	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10165	|XAutoRepeatOff[23]          |XFreeFontInfo[23]         |XQueryExtension[23]           |XWMGeometry[23]                 |XkbFreeKeyboard[23]        |
 10166	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10167	|XAutoRepeatOn[23]           |XFreeFontNames[23]        |XQueryFont[23]                |XWarpPointer[23]                |XkbFreeNames[23]           |
 10168	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10169	|XBaseFontNameListOfFontSet  |XFreeFontPath[23]         |XQueryKeymap[23]              |XWhitePixel[23]                 |XkbFreeServerMap[23]       |
 10170	|[23]                        |                          |                              |                                |                           |
 10171	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10172	|XBell[23]                   |XFreeFontSet[23]          |XQueryPointer[23]             |XWhitePixelOfScreen[23]         |XkbGetAutoRepeatRate[23]   |
 10173	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10174	|XBitmapBitOrder[23]         |XFreeGC[23]               |XQueryTextExtents[23]         |XWidthMMOfScreen[23]            |XkbGetCompatMap[23]        |
 10175	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10176	|XBitmapPad[23]              |XFreeModifiermap[23]      |XQueryTextExtents16[23]       |XWidthOfScreen[23]              |XkbGetControls[23]         |
 10177	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10178	|XBitmapUnit[23]             |XFreePixmap[23]           |XQueryTree[23]                |XWindowEvent[23]                |XkbGetGeometry[23]         |
 10179	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10180	|XBlackPixel[23]             |XFreeStringList[23]       |XRaiseWindow[23]              |XWithdrawWindow[23]             |XkbGetIndicatorMap[23]     |
 10181	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10182	|XBlackPixelOfScreen[23]     |XGContextFromGC[23]       |XReadBitmapFile[23]           |XWriteBitmapFile[23]            |XkbGetIndicatorState[23]   |
 10183	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10184	|XCellsOfScreen[23]          |XGeometry[23]             |XReadBitmapFileData[23]       |XXorRegion[23]                  |XkbGetKeyActions[23]       |
 10185	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10186	|XChangeActivePointerGrab[23]|XGetAtomName[23]          |XRebindKeysym[23]             |XauDisposeAuth[23]              |XkbGetKeyBehaviors[23]     |
 10187	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10188	|XChangeGC[23]               |XGetAtomNames[23]         |XRecolorCursor[23]            |XauFileName[23]                 |XkbGetKeyExplicitComponents|
 10189	|                            |                          |                              |                                |[23]                       |
 10190	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10191	|XChangeKeyboardControl[23]  |XGetClassHint[23]         |XReconfigureWMWindow[23]      |XauGetBestAuthByAddr[23]        |XkbGetKeyModifierMap[23]   |
 10192	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10193	|XChangeKeyboardMapping[23]  |XGetCommand[23]           |XRectInRegion[23]             |XauReadAuth[23]                 |XkbGetKeySyms[23]          |
 10194	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10195	|XChangePointerControl[23]   |XGetDefault[23]           |XRefreshKeyboardMapping[23]   |XcmsAddColorSpace[23]           |XkbGetKeyTypes[23]         |
 10196	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10197	|XChangeProperty[23]         |XGetErrorDatabaseText[23] |XRegisterIMInstantiateCallback|XcmsAddFunctionSet[23]          |XkbGetKeyboard[23]         |
 10198	|                            |                          |[23]                          |                                |                           |
 10199	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10200	|XChangeSaveSet[23]          |XGetErrorText[23]         |XRemoveConnectionWatch[23]    |XcmsAllocColor[23]              |XkbGetKeyboardByName[23]   |
 10201	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10202	|XChangeWindowAttributes[23] |XGetFontPath[23]          |XRemoveFromSaveSet[23]        |XcmsAllocNamedColor[23]         |XkbGetMap[23]              |
 10203	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10204	|XCheckIfEvent[23]           |XGetFontProperty[23]      |XRemoveHost[23]               |XcmsCCCOfColormap[23]           |XkbGetMapChanges[23]       |
 10205	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10206	|XCheckMaskEvent[23]         |XGetGCValues[23]          |XRemoveHosts[23]              |XcmsCIELabClipL[23]             |XkbGetNamedGeometry[23]    |
 10207	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10208	|XCheckTypedEvent[23]        |XGetGeometry[23]          |XReparentWindow[23]           |XcmsCIELabClipLab[23]           |XkbGetNamedIndicator[23]   |
 10209	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10210	|XCheckTypedWindowEvent[23]  |XGetICValues[23]          |XResetScreenSaver[23]         |XcmsCIELabClipab[23]            |XkbGetNames[23]            |
 10211	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10212	|XCheckWindowEvent[23]       |XGetIMValues[23]          |XResizeWindow[23]             |XcmsCIELabQueryMaxC[23]         |XkbGetState[23]            |
 10213	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10214	|XCirculateSubwindows[23]    |XGetIconName[23]          |XResourceManagerString[23]    |XcmsCIELabQueryMaxL[23]         |XkbGetUpdatedMap[23]       |
 10215	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10216	|XCirculateSubwindowsDown[23]|XGetIconSizes[23]         |XRestackWindows[23]           |XcmsCIELabQueryMaxLC[23]        |XkbGetVirtualMods[23]      |
 10217	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10218	|XCirculateSubwindowsUp[23]  |XGetImage[23]             |XRootWindow[23]               |XcmsCIELabQueryMinL[23]         |XkbGetXlibControls[23]     |
 10219	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10220	|XClearArea[23]              |XGetInputFocus[23]        |XRootWindowOfScreen[23]       |XcmsCIELabToCIEXYZ[23]          |XkbIgnoreExtension[23]     |
 10221	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10222	|XClearWindow[23]            |XGetKeyboardControl[23]   |XRotateBuffers[23]            |XcmsCIELabWhiteShiftColors[23]  |XkbInitCanonicalKeyTypes   |
 10223	|                            |                          |                              |                                |[23]                       |
 10224	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10225	|XClipBox[23]                |XGetKeyboardMapping[23]   |XRotateWindowProperties[23]   |XcmsCIELuvClipL[23]             |XkbKeyTypesForCoreSymbols  |
 10226	|                            |                          |                              |                                |[23]                       |
 10227	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10228	|XCloseDisplay[23]           |XGetModifierMapping[23]   |XSaveContext[23]              |XcmsCIELuvClipLuv[23]           |XkbKeycodeToKeysym[23]     |
 10229	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10230	|XCloseIM[23]                |XGetMotionEvents[23]      |XScreenCount[23]              |XcmsCIELuvClipuv[23]            |XkbKeysymToModifiers[23]   |
 10231	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10232	|XCloseOM[23]                |XGetNormalHints[23]       |XScreenNumberOfScreen[23]     |XcmsCIELuvQueryMaxC[23]         |XkbLatchGroup[23]          |
 10233	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10234	|XConfigureWindow[23]        |XGetOCValues[23]          |XScreenOfDisplay[23]          |XcmsCIELuvQueryMaxL[23]         |XkbLatchModifiers[23]      |
 10235	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10236	|XConnectionNumber[23]       |XGetOMValues[23]          |XScreenResourceString[23]     |XcmsCIELuvQueryMaxLC[23]        |XkbLibraryVersion[23]      |
 10237	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10238	|XContextDependentDrawing[23]|XGetPixel[23]             |XSelectInput[23]              |XcmsCIELuvQueryMinL[23]         |XkbListComponents[23]      |
 10239	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10240	|XContextualDrawing[23]      |XGetPointerControl[23]    |XSendEvent[23]                |XcmsCIELuvToCIEuvY[23]          |XkbLockGroup[23]           |
 10241	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10242	|XConvertCase[23]            |XGetPointerMapping[23]    |XServerVendor[23]             |XcmsCIELuvWhiteShiftColors[23]  |XkbLockModifiers[23]       |
 10243	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10244	|XConvertSelection[23]       |XGetRGBColormaps[23]      |XSetAccessControl[23]         |XcmsCIEXYZToCIELab[23]          |XkbLookupKeyBinding[23]    |
 10245	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10246	|XCopyArea[23]               |XGetScreenSaver[23]       |XSetAfterFunction[23]         |XcmsCIEXYZToCIEuvY[23]          |XkbLookupKeySym[23]        |
 10247	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10248	|XCopyColormapAndFree[23]    |XGetSelectionOwner[23]    |XSetArcMode[23]               |XcmsCIEXYZToCIExyY[23]          |XkbNoteControlsChanges[23] |
 10249	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10250	|XCopyGC[23]                 |XGetSizeHints[23]         |XSetAuthorization[23]         |XcmsCIEXYZToRGBi[23]            |XkbNoteMapChanges[23]      |
 10251	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10252	|XCopyPlane[23]              |XGetStandardColormap[23]  |XSetBackground[23]            |XcmsCIEuvYToCIELuv[23]          |XkbNoteNameChanges[23]     |
 10253	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10254	|XCreateBitmapFromData[23]   |XGetSubImage[23]          |XSetClassHint[23]             |XcmsCIEuvYToCIEXYZ[23]          |XkbOpenDisplay[23]         |
 10255	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10256	|XCreateColormap[23]         |XGetTextProperty[23]      |XSetClipMask[23]              |XcmsCIEuvYToTekHVC[23]          |XkbQueryExtension[23]      |
 10257	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10258	|XCreateFontCursor[23]       |XGetTransientForHint[23]  |XSetClipOrigin[23]            |XcmsCIExyYToCIEXYZ[23]          |XkbRefreshKeyboardMapping  |
 10259	|                            |                          |                              |                                |[23]                       |
 10260	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10261	|XCreateFontSet[23]          |XGetVisualInfo[23]        |XSetClipRectangles[23]        |XcmsClientWhitePointOfCCC[23]   |XkbResizeKeyActions[23]    |
 10262	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10263	|XCreateGC[23]               |XGetWMClientMachine[23]   |XSetCloseDownMode[23]         |XcmsConvertColors[23]           |XkbResizeKeySyms[23]       |
 10264	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10265	|XCreateGlyphCursor[23]      |XGetWMColormapWindows[23] |XSetCommand[23]               |XcmsCreateCCC[23]               |XkbResizeKeyType[23]       |
 10266	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10267	|XCreateIC[23]               |XGetWMHints[23]           |XSetDashes[23]                |XcmsDefaultCCC[23]              |XkbSelectEventDetails[23]  |
 10268	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10269	|XCreateImage[23]            |XGetWMIconName[23]        |XSetErrorHandler[23]          |XcmsDisplayOfCCC[23]            |XkbSelectEvents[23]        |
 10270	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10271	|XCreateOC[23]               |XGetWMName[23]            |XSetFillRule[23]              |XcmsFormatOfPrefix[23]          |XkbSetAtomFuncs[23]        |
 10272	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10273	|XCreatePixmap[23]           |XGetWMNormalHints[23]     |XSetFillStyle[23]             |XcmsFreeCCC[23]                 |XkbSetAutoRepeatRate[23]   |
 10274	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10275	|XCreatePixmapCursor[23]     |XGetWMProtocols[23]       |XSetFont[23]                  |XcmsLookupColor[23]             |XkbSetAutoResetControls[23]|
 10276	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10277	|XCreatePixmapFromBitmapData |XGetWMSizeHints[23]       |XSetFontPath[23]              |XcmsPrefixOfFormat[23]          |XkbSetCompatMap[23]        |
 10278	|[23]                        |                          |                              |                                |                           |
 10279	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10280	|XCreateRegion[23]           |XGetWindowAttributes[23]  |XSetForeground[23]            |XcmsQueryBlack[23]              |XkbSetControls[23]         |
 10281	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10282	|XCreateSimpleWindow[23]     |XGetWindowProperty[23]    |XSetFunction[23]              |XcmsQueryBlue[23]               |XkbSetDebuggingFlags[23]   |
 10283	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10284	|XCreateWindow[23]           |XGetZoomHints[23]         |XSetGraphicsExposures[23]     |XcmsQueryColor[23]              |XkbSetDetectableAutoRepeat |
 10285	|                            |                          |                              |                                |[23]                       |
 10286	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10287	|XDefaultColormap[23]        |XGrabButton[23]           |XSetICFocus[23]               |XcmsQueryColors[23]             |XkbSetGeometry[23]         |
 10288	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10289	|XDefaultColormapOfScreen[23]|XGrabKey[23]              |XSetICValues[23]              |XcmsQueryGreen[23]              |XkbSetIgnoreLockMods[23]   |
 10290	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10291	|XDefaultDepth[23]           |XGrabKeyboard[23]         |XSetIMValues[23]              |XcmsQueryRed[23]                |XkbSetIndicatorMap[23]     |
 10292	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10293	|XDefaultDepthOfScreen[23]   |XGrabPointer[23]          |XSetIOErrorHandler[23]        |XcmsQueryWhite[23]              |XkbSetMap[23]              |
 10294	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10295	|XDefaultGC[23]              |XGrabServer[23]           |XSetIconName[23]              |XcmsRGBToRGBi[23]               |XkbSetNamedIndicator[23]   |
 10296	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10297	|XDefaultGCOfScreen[23]      |XHeightMMOfScreen[23]     |XSetIconSizes[23]             |XcmsRGBiToCIEXYZ[23]            |XkbSetNames[23]            |
 10298	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10299	|XDefaultRootWindow[23]      |XHeightOfScreen[23]       |XSetInputFocus[23]            |XcmsRGBiToRGB[23]               |XkbSetServerInternalMods   |
 10300	|                            |                          |                              |                                |[23]                       |
 10301	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10302	|XDefaultScreen[23]          |XIMOfIC[23]               |XSetLineAttributes[23]        |XcmsScreenNumberOfCCC[23]       |XkbSetXlibControls[23]     |
 10303	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10304	|XDefaultScreenOfDisplay[23] |XIconifyWindow[23]        |XSetLocaleModifiers[23]       |XcmsScreenWhitePointOfCCC[23]   |XkbToControl[23]           |
 10305	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10306	|XDefaultString[23]          |XIfEvent[23]              |XSetModifierMapping[23]       |XcmsSetCCCOfColormap[23]        |XkbTranslateKeyCode[23]    |
 10307	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10308	|XDefaultVisual[23]          |XImageByteOrder[23]       |XSetNormalHints[23]           |XcmsSetCompressionProc[23]      |XkbTranslateKeySym[23]     |
 10309	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10310	|XDefaultVisualOfScreen[23]  |XInitExtension[23]        |XSetOCValues[23]              |XcmsSetWhiteAdjustProc[23]      |XkbUpdateMapFromCore[23]   |
 10311	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10312	|XDefineCursor[23]           |XInitImage[23]            |XSetOMValues[23]              |XcmsSetWhitePoint[23]           |XkbUseExtension[23]        |
 10313	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10314	|XDeleteContext[23]          |XInitThreads[23]          |XSetPlaneMask[23]             |XcmsStoreColor[23]              |XkbVirtualModsToReal[23]   |
 10315	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10316	|XDeleteModifiermapEntry[23] |XInsertModifiermapEntry   |XSetPointerMapping[23]        |XcmsStoreColors[23]             |XmbDrawImageString[23]     |
 10317	|                            |[23]                      |                              |                                |                           |
 10318	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10319	|XDeleteProperty[23]         |XInstallColormap[23]      |XSetRGBColormaps[23]          |XcmsTekHVCClipC[23]             |XmbDrawString[23]          |
 10320	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10321	|XDestroyIC[23]              |XInternAtom[23]           |XSetRegion[23]                |XcmsTekHVCClipV[23]             |XmbDrawText[23]            |
 10322	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10323	|XDestroyImage[23]           |XInternAtoms[23]          |XSetScreenSaver[23]           |XcmsTekHVCClipVC[23]            |XmbLookupString[23]        |
 10324	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10325	|XDestroyOC[23]              |XInternalConnectionNumbers|XSetSelectionOwner[23]        |XcmsTekHVCQueryMaxC[23]         |XmbResetIC[23]             |
 10326	|                            |[23]                      |                              |                                |                           |
 10327	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10328	|XDestroyRegion[23]          |XIntersectRegion[23]      |XSetSizeHints[23]             |XcmsTekHVCQueryMaxV[23]         |XmbSetWMProperties[23]     |
 10329	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10330	|XDestroySubwindows[23]      |XKeycodeToKeysym[23]      |XSetStandardColormap[23]      |XcmsTekHVCQueryMaxVC[23]        |XmbTextEscapement[23]      |
 10331	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10332	|XDestroyWindow[23]          |XKeysymToKeycode[23]      |XSetStandardProperties[23]    |XcmsTekHVCQueryMaxVSamples[23]  |XmbTextExtents[23]         |
 10333	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10334	|XDirectionalDependentDrawing|XKeysymToString[23]       |XSetState[23]                 |XcmsTekHVCQueryMinV[23]         |XmbTextListToTextProperty  |
 10335	|[23]                        |                          |                              |                                |[23]                       |
 10336	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10337	|XDisableAccessControl[23]   |XKillClient[23]           |XSetStipple[23]               |XcmsTekHVCToCIEuvY[23]          |XmbTextPerCharExtents[23]  |
 10338	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10339	|XDisplayCells[23]           |XLastKnownRequestProcessed|XSetSubwindowMode[23]         |XcmsTekHVCWhiteShiftColors[23]  |XmbTextPropertyToTextList  |
 10340	|                            |[23]                      |                              |                                |[23]                       |
 10341	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10342	|XDisplayHeight[23]          |XListDepths[23]           |XSetTSOrigin[23]              |XcmsVisualOfCCC[23]             |XrmCombineDatabase[23]     |
 10343	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10344	|XDisplayHeightMM[23]        |XListExtensions[23]       |XSetTextProperty[23]          |XkbAllocClientMap[23]           |XrmCombineFileDatabase[23] |
 10345	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10346	|XDisplayKeycodes[23]        |XListFonts[23]            |XSetTile[23]                  |XkbAllocCompatMap[23]           |XrmDestroyDatabase[23]     |
 10347	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10348	|XDisplayMotionBufferSize[23]|XListFontsWithInfo[23]    |XSetTransientForHint[23]      |XkbAllocControls[23]            |XrmEnumerateDatabase[23]   |
 10349	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10350	|XDisplayName[23]            |XListHosts[23]            |XSetWMClientMachine[23]       |XkbAllocGeomColors[23]          |XrmGetDatabase[23]         |
 10351	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10352	|XDisplayOfIM[23]            |XListInstalledColormaps   |XSetWMColormapWindows[23]     |XkbAllocGeomDoodads[23]         |XrmGetFileDatabase[23]     |
 10353	|                            |[23]                      |                              |                                |                           |
 10354	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10355	|XDisplayOfOM[23]            |XListPixmapFormats[23]    |XSetWMHints[23]               |XkbAllocGeomKeyAliases[23]      |XrmGetResource[23]         |
 10356	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10357	|XDisplayOfScreen[23]        |XListProperties[23]       |XSetWMIconName[23]            |XkbAllocGeomKeys[23]            |XrmGetStringDatabase[23]   |
 10358	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10359	|XDisplayPlanes[23]          |XLoadFont[23]             |XSetWMName[23]                |XkbAllocGeomOutlines[23]        |XrmInitialize[23]          |
 10360	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10361	|XDisplayString[23]          |XLoadQueryFont[23]        |XSetWMNormalHints[23]         |XkbAllocGeomOverlayKeys[23]     |XrmLocaleOfDatabase[23]    |
 10362	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10363	|XDisplayWidth[23]           |XLocaleOfFontSet[23]      |XSetWMProperties[23]          |XkbAllocGeomOverlayRows[23]     |XrmMergeDatabases[23]      |
 10364	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10365	|XDisplayWidthMM[23]         |XLocaleOfIM[23]           |XSetWMProtocols[23]           |XkbAllocGeomOverlays[23]        |XrmParseCommand[23]        |
 10366	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10367	|XDoesBackingStore[23]       |XLocaleOfOM[23]           |XSetWMSizeHints[23]           |XkbAllocGeomPoints[23]          |XrmPermStringToQuark[23]   |
 10368	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10369	|XDoesSaveUnders[23]         |XLockDisplay[23]          |XSetWindowBackground[23]      |XkbAllocGeomProps[23]           |XrmPutFileDatabase[23]     |
 10370	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10371	|XDrawArc[23]                |XLookupColor[23]          |XSetWindowBackgroundPixmap[23]|XkbAllocGeomRows[23]            |XrmPutLineResource[23]     |
 10372	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10373	|XDrawArcs[23]               |XLookupKeysym[23]         |XSetWindowBorder[23]          |XkbAllocGeomSectionDoodads[23]  |XrmPutResource[23]         |
 10374	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10375	|XDrawImageString[23]        |XLookupString[23]         |XSetWindowBorderPixmap[23]    |XkbAllocGeomSections[23]        |XrmPutStringResource[23]   |
 10376	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10377	|XDrawImageString16[23]      |XLowerWindow[23]          |XSetWindowBorderWidth[23]     |XkbAllocGeomShapes[23]          |XrmQGetResource[23]        |
 10378	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10379	|XDrawLine[23]               |XMapRaised[23]            |XSetWindowColormap[23]        |XkbAllocGeometry[23]            |XrmQGetSearchList[23]      |
 10380	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10381	|XDrawLines[23]              |XMapSubwindows[23]        |XSetZoomHints[23]             |XkbAllocIndicatorMaps[23]       |XrmQGetSearchResource[23]  |
 10382	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10383	|XDrawPoint[23]              |XMapWindow[23]            |XShrinkRegion[23]             |XkbAllocKeyboard[23]            |XrmQPutResource[23]        |
 10384	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10385	|XDrawPoints[23]             |XMaskEvent[23]            |XStoreBuffer[23]              |XkbAllocNames[23]               |XrmQPutStringResource[23]  |
 10386	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10387	|XDrawRectangle[23]          |XMatchVisualInfo[23]      |XStoreBytes[23]               |XkbAllocServerMap[23]           |XrmQuarkToString[23]       |
 10388	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10389	|XDrawRectangles[23]         |XMaxCmapsOfScreen[23]     |XStoreColor[23]               |XkbApplyCompatMapToKey[23]      |XrmSetDatabase[23]         |
 10390	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10391	|XDrawSegments[23]           |XMaxRequestSize[23]       |XStoreColors[23]              |XkbBell[23]                     |XrmStringToBindingQuarkList|
 10392	|                            |                          |                              |                                |[23]                       |
 10393	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10394	|XDrawString[23]             |XMinCmapsOfScreen[23]     |XStoreName[23]                |XkbBellEvent[23]                |XrmStringToQuark[23]       |
 10395	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10396	|XDrawString16[23]           |XMoveResizeWindow[23]     |XStoreNamedColor[23]          |XkbChangeEnabledControls[23]    |XrmStringToQuarkList[23]   |
 10397	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10398	|XDrawText[23]               |XMoveWindow[23]           |XStringListToTextProperty[23] |XkbChangeMap[23]                |XrmUniqueQuark[23]         |
 10399	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10400	|XDrawText16[23]             |XNewModifiermap[23]       |XStringToKeysym[23]           |XkbChangeNames[23]              |XwcDrawImageString[23]     |
 10401	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10402	|XEHeadOfExtensionList[23]   |XNextEvent[23]            |XSubImage[23]                 |XkbChangeTypesOfKey[23]         |XwcDrawString[23]          |
 10403	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10404	|XEmptyRegion[23]            |XNextRequest[23]          |XSubtractRegion[23]           |XkbComputeEffectiveMap[23]      |XwcDrawText[23]            |
 10405	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10406	|XEnableAccessControl[23]    |XNoOp[23]                 |XSupportsLocale[23]           |XkbComputeRowBounds[23]         |XwcFreeStringList[23]      |
 10407	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10408	|XEqualRegion[23]            |XOMOfOC[23]               |XSync[23]                     |XkbComputeSectionBounds[23]     |XwcLookupString[23]        |
 10409	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10410	|XEventMaskOfScreen[23]      |XOffsetRegion[23]         |XSynchronize[23]              |XkbComputeShapeBounds[23]       |XwcResetIC[23]             |
 10411	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10412	|XEventsQueued[23]           |XOpenDisplay[23]          |XTextExtents[23]              |XkbComputeShapeTop[23]          |XwcTextEscapement[23]      |
 10413	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10414	|XExtendedMaxRequestSize[23] |XOpenIM[23]               |XTextExtents16[23]            |XkbCopyKeyType[23]              |XwcTextExtents[23]         |
 10415	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10416	|XExtentsOfFontSet[23]       |XOpenOM[23]               |XTextPropertyToStringList[23] |XkbCopyKeyTypes[23]             |XwcTextListToTextProperty  |
 10417	|                            |                          |                              |                                |[23]                       |
 10418	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10419	|XFetchBuffer[23]            |XParseColor[23]           |XTextWidth[23]                |XkbFindOverlayForKey[23]        |XwcTextPerCharExtents[23]  |
 10420	|----------------------------+--------------------------+------------------------------+--------------------------------+---------------------------|
 10421	|XFetchBytes[23]             |XParseGeometry[23]        |XTextWidth16[23]              |XkbForceBell[23]                |XwcTextPropertyToTextList  |
 10422	|                            |                          |                              |                                |[23]                       |
 10423	+---------------------------------------------------------------------------------------------------------------------------------------------------+
 10424	-------------------------------------------------------------------------------
 10425	
 10426	Data Definitions for libX11
 10427	
 10428	-------------------------------------------------------------------------------
 10429	
 10430	X11/Xauth.h
 10431	
 10432	typedef struct xauth
 10433	{
 10434	  unsigned short family;
 10435	  unsigned short address_length;
 10436	  char *address;
 10437	  unsigned short number_length;
 10438	  char *number;
 10439	  unsigned short name_length;
 10440	  char *name;
 10441	  unsigned short data_length;
 10442	  char *data;
 10443	}
 10444	Xauth;
 10445	-------------------------------------------------------------------------------
 10446	
 10447	X11/Xcms.h
 10448	
 10449	typedef struct _XcmsFunctionSet
 10450	{
 10451	  XcmsColorSpace **DDColorSpaces;
 10452	  XcmsScreenInitProc screenInitProc;
 10453	  XcmsScreenFreeProc screenFreeProc;
 10454	}
 10455	XcmsFunctionSet;
 10456	
 10457	
 10458	typedef unsigned long XcmsColorFormat;
 10459	
 10460	typedef double XcmsFloat;
 10461	
 10462	typedef struct
 10463	{
 10464	  unsigned short red;
 10465	  unsigned short green;
 10466	  unsigned short blue;
 10467	}
 10468	XcmsRGB;
 10469	
 10470	typedef struct
 10471	{
 10472	  XcmsFloat red;
 10473	  XcmsFloat green;
 10474	  XcmsFloat blue;
 10475	}
 10476	XcmsRGBi;
 10477	
 10478	typedef struct
 10479	{
 10480	  XcmsFloat X;
 10481	  XcmsFloat Y;
 10482	  XcmsFloat Z;
 10483	}
 10484	XcmsCIEXYZ;
 10485	
 10486	typedef struct
 10487	{
 10488	  XcmsFloat u_prime;
 10489	  XcmsFloat v_prime;
 10490	  XcmsFloat Y;
 10491	}
 10492	XcmsCIEuvY;
 10493	
 10494	typedef struct
 10495	{
 10496	  XcmsFloat x;
 10497	  XcmsFloat y;
 10498	  XcmsFloat Y;
 10499	}
 10500	XcmsCIExyY;
 10501	
 10502	typedef struct
 10503	{
 10504	  XcmsFloat L_star;
 10505	  XcmsFloat a_star;
 10506	  XcmsFloat b_star;
 10507	}
 10508	XcmsCIELab;
 10509	
 10510	typedef struct
 10511	{
 10512	  XcmsFloat L_star;
 10513	  XcmsFloat u_star;
 10514	  XcmsFloat v_star;
 10515	}
 10516	XcmsCIELuv;
 10517	
 10518	typedef struct
 10519	{
 10520	  XcmsFloat H;
 10521	  XcmsFloat V;
 10522	  XcmsFloat C;
 10523	}
 10524	XcmsTekHVC;
 10525	
 10526	typedef struct
 10527	{
 10528	  XcmsFloat pad0;
 10529	  XcmsFloat pad1;
 10530	  XcmsFloat pad2;
 10531	  XcmsFloat pad3;
 10532	}
 10533	XcmsPad;
 10534	
 10535	
 10536	typedef union
 10537	{
 10538	  XcmsRGB RGB;
 10539	  XcmsRGBi RGBi;
 10540	  XcmsCIEXYZ CIEXYZ;
 10541	  XcmsCIEuvY CIEuvY;
 10542	  XcmsCIExyY CIExyY;
 10543	  XcmsCIELab CIELab;
 10544	  XcmsCIELuv CIELuv;
 10545	  XcmsTekHVC TekHVC;
 10546	  XcmsPad Pad;
 10547	}
 10548	XcmsColor;
 10549	
 10550	
 10551	typedef struct _XcmsPerScrnInfo
 10552	{
 10553	  XcmsColor screenWhitePt;
 10554	  XPointer functionSet;
 10555	  XPointer screenData;
 10556	  unsigned char state;
 10557	  char pad[1];
 10558	}
 10559	XcmsPerScrnInfo;
 10560	
 10561	
 10562	typedef int (*XcmsCompressionProc) ();
 10563	
 10564	typedef int (*XcmsWhiteAdjustProc) ();
 10565	
 10566	typedef int (*XcmsScreenInitProc) ();
 10567	
 10568	typedef void (*XcmsScreenFreeProc) ();
 10569	
 10570	typedef int (*XcmsConversionProc) ();
 10571	
 10572	typedef int (*XcmsParseStringProc) ();
 10573	
 10574	
 10575	typedef struct _XcmsCCC
 10576	{
 10577	  Display *dpy;
 10578	  int screenNumber;
 10579	  Visual *visual;
 10580	  XcmsColor clientWhitePt;
 10581	  XcmsCompressionProc gamutCompProc;
 10582	  XPointer gamutCompClientData;
 10583	  XcmsWhiteAdjustProc whitePtAdjProc;
 10584	  XPointer whitePtAdjClientData;
 10585	  XcmsPerScrnInfo *pPerScrnInfo;
 10586	}
 10587	 *XcmsCCC;
 10588	
 10589	
 10590	typedef XcmsConversionProc *XcmsFuncListPtr;
 10591	
 10592	
 10593	typedef struct _XcmsColorSpace
 10594	{
 10595	  char *prefix;
 10596	  XcmsColorFormat id;
 10597	  XcmsParseStringProc parseString;
 10598	  XcmsFuncListPtr to_CIEXYZ;
 10599	  XcmsFuncListPtr from_CIEXYZ;
 10600	  int inverse_flag;
 10601	}
 10602	XcmsColorSpace;
 10603	-------------------------------------------------------------------------------
 10604	
 10605	X11/Xlib.h
 10606	
 10607	struct _XDisplay;
 10608	
 10609	struct _XrmHashBucketRec;
 10610	
 10611	typedef struct XColor;
 10612	
 10613	typedef void *XVaNestedList;
 10614	
 10615	typedef int (*XErrorHandler) ();
 10616	
 10617	typedef int (*XIOErrorHandler) ();
 10618	
 10619	typedef void (*XConnectionWatchProc) ();
 10620	
 10621	
 10622	typedef char *XPointer;
 10623	
 10624	
 10625	typedef struct _XExtData
 10626	{
 10627	  int number;
 10628	  struct _XExtData *next;
 10629	  int (*free_private) (struct _XExtData * extension);
 10630	  XPointer private_data;
 10631	}
 10632	XExtData;
 10633	
 10634	typedef struct XExtCodes;
 10635	
 10636	
 10637	typedef struct XPixmapFormatValues;
 10638	
 10639	
 10640	typedef struct XGCValues;
 10641	
 10642	
 10643	typedef struct _XGC *GC;
 10644	
 10645	
 10646	typedef struct Visual;
 10647	
 10648	
 10649	typedef struct Depth;
 10650	
 10651	
 10652	typedef struct Screen;
 10653	
 10654	
 10655	typedef struct ScreenFormat;
 10656	
 10657	
 10658	typedef struct XSetWindowAttributes;
 10659	
 10660	typedef struct XWindowAttributes;
 10661	
 10662	
 10663	typedef struct XHostAddress;
 10664	
 10665	
 10666	struct XImagefuncs;
 10667	
 10668	typedef struct _XImage
 10669	{
 10670	  int width;
 10671	  int height;
 10672	  int xoffset;
 10673	  int format;
 10674	  char *data;
 10675	  int byte_order;
 10676	  int bitmap_unit;
 10677	  int bitmap_bit_order;
 10678	  int bitmap_pad;
 10679	  int depth;
 10680	  int bytes_per_line;
 10681	  int bits_per_pixel;
 10682	  unsigned long red_mask;
 10683	  unsigned long green_mask;
 10684	  unsigned long blue_mask;
 10685	  XPointer obdata;
 10686	  struct funcs f;
 10687	}
 10688	XImage;
 10689	
 10690	
 10691	typedef struct XWindowChanges;
 10692	
 10693	
 10694	typedef struct XSegment;
 10695	
 10696	typedef struct XPoint;
 10697	
 10698	typedef struct XRectangle;
 10699	
 10700	typedef struct XArc;
 10701	
 10702	
 10703	typedef struct XKeyboardControl;
 10704	
 10705	
 10706	typedef struct XKeyboardState;
 10707	
 10708	
 10709	typedef struct XTimeCoord;
 10710	
 10711	
 10712	typedef struct XModifierKeymap;
 10713	
 10714	
 10715	typedef struct _XDisplay Display;
 10716	
 10717	
 10718	typedef struct XKeyEvent;
 10719	
 10720	typedef XKeyEvent XKeyPressedEvent;
 10721	
 10722	typedef XKeyEvent XKeyReleasedEvent;
 10723	
 10724	typedef struct XButtonEvent;
 10725	
 10726	typedef XButtonEvent XButtonPressedEvent;
 10727	
 10728	typedef XButtonEvent XButtonReleasedEvent;
 10729	
 10730	typedef struct XMotionEvent;
 10731	
 10732	typedef XMotionEvent XPointerMovedEvent;
 10733	
 10734	typedef struct XCrossingEvent;
 10735	
 10736	typedef XCrossingEvent XEnterWindowEvent;
 10737	
 10738	typedef XCrossingEvent XLeaveWindowEvent;
 10739	
 10740	typedef struct XFocusChangeEvent;
 10741	
 10742	typedef XFocusChangeEvent XFocusInEvent;
 10743	
 10744	typedef XFocusChangeEvent XFocusOutEvent;
 10745	
 10746	typedef struct XKeymapEvent;
 10747	
 10748	typedef struct XExposeEvent;
 10749	
 10750	typedef struct XGraphicsExposeEvent;
 10751	
 10752	typedef struct XNoExposeEvent;
 10753	
 10754	typedef struct XVisibilityEvent;
 10755	
 10756	typedef struct XCreateWindowEvent;
 10757	
 10758	typedef struct XDestroyWindowEvent;
 10759	
 10760	typedef struct XUnmapEvent;
 10761	
 10762	typedef struct XMapEvent;
 10763	
 10764	typedef struct XMapRequestEvent;
 10765	
 10766	typedef struct XReparentEvent;
 10767	
 10768	typedef struct XConfigureEvent;
 10769	
 10770	typedef struct XGravityEvent;
 10771	
 10772	typedef struct XResizeRequestEvent;
 10773	
 10774	typedef struct XConfigureRequestEvent;
 10775	
 10776	typedef struct XCirculateEvent;
 10777	
 10778	typedef struct XCirculateRequestEvent;
 10779	
 10780	typedef struct XPropertyEvent;
 10781	
 10782	typedef struct XSelectionClearEvent;
 10783	
 10784	typedef struct XSelectionRequestEvent;
 10785	
 10786	typedef struct XSelectionEvent;
 10787	
 10788	typedef struct XColormapEvent;
 10789	
 10790	typedef union XClientMessageEvent;
 10791	
 10792	typedef struct XMappingEvent;
 10793	
 10794	typedef struct XErrorEvent;
 10795	
 10796	typedef struct XAnyEvent;
 10797	
 10798	
 10799	typedef union _XEvent
 10800	{
 10801	  int type;
 10802	  XAnyEvent xany;
 10803	  XKeyEvent xkey;
 10804	  XButtonEvent xbutton;
 10805	  XMotionEvent xmotion;
 10806	  XCrossingEvent xcrossing;
 10807	  XFocusChangeEvent xfocus;
 10808	  XExposeEvent xexpose;
 10809	  XGraphicsExposeEvent xgraphicsexpose;
 10810	  XNoExposeEvent xnoexpose;
 10811	  XVisibilityEvent xvisibility;
 10812	  XCreateWindowEvent xcreatewindow;
 10813	  XDestroyWindowEvent xdestroywindow;
 10814	  XUnmapEvent xunmap;
 10815	  XMapEvent xmap;
 10816	  XMapRequestEvent xmaprequest;
 10817	  XReparentEvent xreparent;
 10818	  XConfigureEvent xconfigure;
 10819	  XGravityEvent xgravity;
 10820	  XResizeRequestEvent xresizerequest;
 10821	  XConfigureRequestEvent xconfigurerequest;
 10822	  XCirculateEvent xcirculate;
 10823	  XCirculateRequestEvent xcirculaterequest;
 10824	  XPropertyEvent xproperty;
 10825	  XSelectionClearEvent xselectionclear;
 10826	  XSelectionRequestEvent xselectionrequest;
 10827	  XSelectionEvent xselection;
 10828	  XColormapEvent xcolormap;
 10829	  XClientMessageEvent xclient;
 10830	  XMappingEvent xmapping;
 10831	  XErrorEvent xerror;
 10832	  XKeymapEvent xkeymap;
 10833	  long pad[1];
 10834	}
 10835	XEvent;
 10836	
 10837	
 10838	typedef struct XCharStruct;
 10839	
 10840	
 10841	typedef struct XFontProp;
 10842	
 10843	typedef struct XFontStruct;
 10844	
 10845	typedef struct XFontSetExtents;
 10846	
 10847	
 10848	typedef struct XTextItem;
 10849	
 10850	typedef struct XChar2b;
 10851	
 10852	typedef struct XTextItem16;
 10853	
 10854	
 10855	typedef union XEDataObject;
 10856	
 10857	
 10858	typedef struct _XOM *XOM;
 10859	
 10860	typedef struct _XOC *XOC;
 10861	
 10862	typedef struct _XOC *XFontSet;
 10863	
 10864	
 10865	typedef struct XmbTextItem;
 10866	
 10867	typedef struct XwcTextItem;
 10868	
 10869	
 10870	
 10871	typedef struct _XIM *XIM;
 10872	
 10873	typedef struct _XIC *XIC;
 10874	
 10875	typedef void (*XIDProc) ();
 10876	-------------------------------------------------------------------------------
 10877	
 10878	X11/Xutil.h
 10879	
 10880	typedef struct XSizeHints;
 10881	
 10882	typedef struct XWMHints;
 10883	
 10884	typedef struct XTextProperty;
 10885	
 10886	typedef struct XIconSize;
 10887	
 10888	typedef struct XClassHint;
 10889	
 10890	typedef struct _XComposeStatus
 10891	{
 10892	  XPointer compose_ptr;
 10893	  int chars_matched;
 10894	}
 10895	XComposeStatus;
 10896	
 10897	typedef struct _XRegion *Region;
 10898	
 10899	typedef struct XVisualInfo;
 10900	
 10901	typedef struct XStandardColormap;
 10902	
 10903	typedef int XContext;
 10904	
 10905	typedef enum XICCEncodingStyle;
 10906	-------------------------------------------------------------------------------
 10907	
 10908	Interfaces for libXext
 10909	
 10910	Table 12-3. libXext Definition
 10911	
 10912	+----------------------+
 10913	|Library:|libXext      |
 10914	|--------+-------------|
 10915	|SONAME: |libXext.so.6 |
 10916	+----------------------+
 10917	
 10918	The behavior of the interfaces in this library is specified by the following
 10919	standards.
 10920	
 10921	Double Buffer Extension Library[24]                                            
 10922	X Display Power Management Signaling (DPMS) Extension, Library Specification   
 10923	[25]                                                                           
 10924	Security Extension Specification, Version 7.1[26]                              
 10925	X Nonrectangular Window Shape Extension Library Version 1.0[27]                
 10926	MIT-SHM--The MIT Shared Memory Extension[28]                                   
 10927	X Synchronization Extension Library[29]                                        
 10928	
 10929	-------------------------------------------------------------------------------
 10930	
 10931	X Shape Extension
 10932	
 10933	Table 12-4. libXext - X Shape Extension Function Interfaces
 10934	
 10935	+-------------------------------------------------------------------------------------+
 10936	|XShapeCombineMask[27]  |XShapeCombineShape |XShapeOffsetShape   |XShapeQueryVersion| |
 10937	|                       |[27]               |[27]                |[27]              | |
 10938	|-----------------------+-------------------+--------------------+------------------+-|
 10939	|XShapeCombineRectangles|XShapeGetRectangles|XShapeQueryExtension|XShapeSelectInput | |
 10940	|[27]                   |[27]               |[27]                |[27]              | |
 10941	|-----------------------+-------------------+--------------------+------------------+-|
 10942	|XShapeCombineRegion[27]|XShapeInputSelected|XShapeQueryExtents  |                  | |
 10943	|                       |[27]               |[27]                |                  | |
 10944	+-------------------------------------------------------------------------------------+
 10945	-------------------------------------------------------------------------------
 10946	
 10947	X Display Power Management Signaling Extension
 10948	
 10949	Table 12-5. libXext - X Display Power Management Signaling Extension Function
 10950	Interfaces
 10951	
 10952	+-----------------------------------------------------------------------------+
 10953	|DPMSCapable|DPMSEnable[25]|DPMSGetTimeouts|DPMSInfo[25]      |DPMSSetTimeouts|
 10954	|[25]       |              |[25]           |                  |[25]           |
 10955	|-----------+--------------+---------------+------------------+---------------|
 10956	|DPMSDisable|DPMSForceLevel|DPMSGetVersion |DPMSQueryExtension|               |
 10957	|[25]       |[25]          |[25]           |[25]              |               |
 10958	+-----------------------------------------------------------------------------+
 10959	-------------------------------------------------------------------------------
 10960	
 10961	X Shared Memory Extensions
 10962	
 10963	Table 12-6. libXext - X Shared Memory Extensions Function Interfaces
 10964	
 10965	+-------------------------------------------------------------------------------------+
 10966	|XShmAttach[28] |XShmCreatePixmap|XShmGetEventBase|XShmPixmapFormat|XShmQueryExtension|
 10967	|               |[28]            |[28]            |[28]            |[28]              |
 10968	|---------------+----------------+----------------+----------------+------------------|
 10969	|XShmCreateImage|XShmDetach[28]  |XShmGetImage[28]|XShmPutImage[28]|XShmQueryVersion  |
 10970	|[28]           |                |                |                |[28]              |
 10971	+-------------------------------------------------------------------------------------+
 10972	-------------------------------------------------------------------------------
 10973	
 10974	X Synchronization Extension
 10975	
 10976	Table 12-7. libXext - X Synchronization Extension Function Interfaces
 10977	
 10978	+-----------------------------------------------------------------------------------------------------------------+
 10979	|XSyncAwait[29]     |XSyncFreeSystemCounterList|XSyncMinValue[29]  |XSyncValueEqual[29]     |XSyncValueLessOrEqual|
 10980	|                   |[29]                      |                   |                        |[29]                 |
 10981	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10982	|XSyncChangeAlarm   |XSyncGetPriority[29]      |XSyncQueryAlarm[29]|XSyncValueGreaterOrEqual|XSyncValueLessThan   |
 10983	|[29]               |                          |                   |[29]                    |[29]                 |
 10984	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10985	|XSyncChangeCounter |XSyncInitialize[29]       |XSyncQueryCounter  |XSyncValueGreaterThan   |XSyncValueLow32[29]  |
 10986	|[29]               |                          |[29]               |[29]                    |                     |
 10987	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10988	|XSyncCreateAlarm   |XSyncIntToValue[29]       |XSyncQueryExtension|XSyncValueHigh32[29]    |XSyncValueSubtract   |
 10989	|[29]               |                          |[29]               |                        |[29]                 |
 10990	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10991	|XSyncCreateCounter |XSyncIntsToValue[29]      |XSyncSetCounter[29]|XSyncValueIsNegative[29]|                     |
 10992	|[29]               |                          |                   |                        |                     |
 10993	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10994	|XSyncDestroyAlarm  |XSyncListSystemCounters   |XSyncSetPriority   |XSyncValueIsPositive[29]|                     |
 10995	|[29]               |[29]                      |[29]               |                        |                     |
 10996	|-------------------+--------------------------+-------------------+------------------------+---------------------|
 10997	|XSyncDestroyCounter|XSyncMaxValue[29]         |XSyncValueAdd[29]  |XSyncValueIsZero[29]    |                     |
 10998	|[29]               |                          |                   |                        |                     |
 10999	+-----------------------------------------------------------------------------------------------------------------+
 11000	-------------------------------------------------------------------------------
 11001	
 11002	X Security Extension
 11003	
 11004	Table 12-8. libXext - X Security Extension Function Interfaces
 11005	
 11006	+--------------------------------------------------------------------------------------------------------------------------+
 11007	|XSecurityAllocXauth|XSecurityFreeXauth|XSecurityGenerateAuthorization|XSecurityQueryExtension|XSecurityRevokeAuthorization|
 11008	|[26]               |[26]              |[26]                          |[26]                   |[26]                        |
 11009	+--------------------------------------------------------------------------------------------------------------------------+
 11010	-------------------------------------------------------------------------------
 11011	
 11012	X Double Buffer Extension
 11013	
 11014	Table 12-9. libXext - X Double Buffer Extension Function Interfaces
 11015	
 11016	+----------------------------------------------------------------------------------------------------------------------+
 11017	|XdbeAllocateBackBufferName|XdbeDeallocateBackBufferName|XdbeFreeVisualInfo[24]     |XdbeGetVisualInfo |XdbeSwapBuffers|
 11018	|[24]                      |[24]                        |                           |[24]              |[24]           |
 11019	|--------------------------+----------------------------+---------------------------+------------------+---------------|
 11020	|XdbeBeginIdiom[24]        |XdbeEndIdiom[24]            |XdbeGetBackBufferAttributes|XdbeQueryExtension|               |
 11021	|                          |                            |[24]                       |[24]              |               |
 11022	+----------------------------------------------------------------------------------------------------------------------+
 11023	-------------------------------------------------------------------------------
 11024	
 11025	Data Definitions for libXext
 11026	
 11027	-------------------------------------------------------------------------------
 11028	
 11029	X11/extensions/security.h
 11030	
 11031	typedef unsigned long XSecurityAuthorization;
 11032	
 11033	typedef struct
 11034	{
 11035	  unsigned int timeout;
 11036	  unsigned int trust_level;
 11037	  XID group;
 11038	  long event_mask;
 11039	}
 11040	XSecurityAuthorizationAttributes;
 11041	-------------------------------------------------------------------------------
 11042	
 11043	X11/extensions/sync.h
 11044	
 11045	typedef struct _XSyncSystemCounter
 11046	{
 11047	  char *name;
 11048	  XSyncCounter counter;
 11049	  XSyncValue resolution;
 11050	}
 11051	XSyncSystemCounter;
 11052	
 11053	typedef struct
 11054	{
 11055	  XSyncCounter counter;
 11056	  XSyncValueType value_type;
 11057	  XSyncValue wait_value;
 11058	  XSyncTestType test_type;
 11059	}
 11060	XSyncTrigger;
 11061	
 11062	typedef struct
 11063	{
 11064	  XSyncTrigger trigger;
 11065	  XSyncValue event_threshold;
 11066	}
 11067	XSyncWaitCondition;
 11068	
 11069	typedef struct
 11070	{
 11071	  XSyncTrigger trigger;
 11072	  XSyncValue delta;
 11073	  int events;
 11074	  XSyncAlarmState state;
 11075	}
 11076	XSyncAlarmAttributes;
 11077	
 11078	
 11079	typedef XID XSyncCounter;
 11080	
 11081	typedef XID XSyncAlarm;
 11082	
 11083	typedef struct _XSyncValue
 11084	{
 11085	  int hi;
 11086	  unsigned int lo;
 11087	}
 11088	XSyncValue;
 11089	
 11090	typedef enum
 11091	{
 11092	  XSyncAbsolute,
 11093	  XSyncRelative
 11094	}
 11095	XSyncValueType;
 11096	
 11097	typedef enum
 11098	{
 11099	  XSyncPositiveTransition,
 11100	  XSyncNegativeTransition,
 11101	  XSyncPositiveComparison,
 11102	  XSyncNegativeComparison
 11103	}
 11104	XSyncTestType;
 11105	
 11106	typedef enum
 11107	{
 11108	  XSyncAlarmActive,
 11109	  XSyncAlarmInactive,
 11110	  XSyncAlarmDestroyed
 11111	}
 11112	XSyncAlarmState;
 11113	-------------------------------------------------------------------------------
 11114	
 11115	Interfaces for libSM
 11116	
 11117	Table 12-10. libSM Definition
 11118	
 11119	+--------------------+
 11120	|Library:|libSM      |
 11121	|--------+-----------|
 11122	|SONAME: |libSM.so.6 |
 11123	+--------------------+
 11124	
 11125	The behavior of the interfaces in this library is specified by the following
 11126	standards.
 11127	
 11128	X11R6.4 X Session Management Library[30]
 11129	
 11130	-------------------------------------------------------------------------------
 11131	
 11132	Session Management Functions
 11133	
 11134	Table 12-11. libSM - Session Management Functions Function Interfaces
 11135	
 11136	+-----------------------------------------------------------------------------------------------------------------+
 11137	|SmFreeProperty[30] |SmcInteractRequest[30]      |SmcSaveYourselfDone|SmsGenerateClientID   |SmsSaveComplete[30]  |
 11138	|                   |                            |[30]               |[30]                  |                     |
 11139	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11140	|SmFreeReasons[30]  |SmcModifyCallbacks[30]      |SmcSetErrorHandler |SmsGetIceConnection   |SmsSaveYourself[30]  |
 11141	|                   |                            |[30]               |[30]                  |                     |
 11142	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11143	|SmcClientID[30]    |SmcOpenConnection[30]       |SmcSetProperties   |SmsInitialize[30]     |SmsSaveYourselfPhase2|
 11144	|                   |                            |[30]               |                      |[30]                 |
 11145	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11146	|SmcCloseConnection |SmcProtocolRevision[30]     |SmcVendor[30]      |SmsInteract[30]       |SmsSetErrorHandler   |
 11147	|[30]               |                            |                   |                      |[30]                 |
 11148	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11149	|SmcDeleteProperties|SmcProtocolVersion[30]      |SmsCleanUp[30]     |SmsProtocolRevision   |SmsShutdownCancelled |
 11150	|[30]               |                            |                   |[30]                  |[30]                 |
 11151	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11152	|SmcGetIceConnection|SmcRelease[30]              |SmsClientHostName  |SmsProtocolVersion[30]|                     |
 11153	|[30]               |                            |[30]               |                      |                     |
 11154	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11155	|SmcGetProperties   |SmcRequestSaveYourself[30]  |SmsClientID[30]    |SmsRegisterClientReply|                     |
 11156	|[30]               |                            |                   |[30]                  |                     |
 11157	|-------------------+----------------------------+-------------------+----------------------+---------------------|
 11158	|SmcInteractDone[30]|SmcRequestSaveYourselfPhase2|SmsDie[30]         |SmsReturnProperties   |                     |
 11159	|                   |[30]                        |                   |[30]                  |                     |
 11160	+-----------------------------------------------------------------------------------------------------------------+
 11161	-------------------------------------------------------------------------------
 11162	
 11163	Data Definitions for libSM
 11164	
 11165	-------------------------------------------------------------------------------
 11166	
 11167	X11/SM/SMlib.h
 11168	
 11169	typedef IcePointer SmPointer;
 11170	
 11171	typedef struct _SmcConn *SmcConn;
 11172	
 11173	typedef struct _SmsConn *SmsConn;
 11174	
 11175	
 11176	typedef struct
 11177	{
 11178	  int length;
 11179	  SmPointer value;
 11180	}
 11181	SmPropValue;
 11182	
 11183	typedef struct
 11184	{
 11185	  char *name;
 11186	  char *type;
 11187	  int num_vals;
 11188	  SmPropValue *vals;
 11189	}
 11190	SmProp;
 11191	
 11192	
 11193	typedef enum
 11194	{
 11195	  SmcClosedNow,
 11196	  SmcClosedASAP,
 11197	  SmcConnectionInUse
 11198	}
 11199	SmcCloseStatus;
 11200	
 11201	
 11202	typedef void (*SmcSaveYourselfPhase2Proc) ();
 11203	
 11204	typedef void (*SmcInteractProc) ();
 11205	
 11206	typedef void (*SmcDieProc) ();
 11207	
 11208	typedef void (*SmcShutdownCancelledProc) ();
 11209	
 11210	typedef void (*SmcSaveCompleteProc) ();
 11211	
 11212	typedef void (*SmcPropReplyProc) ();
 11213	
 11214	
 11215	typedef struct
 11216	{
 11217	  SmcShutdownCancelledProc callback;
 11218	  SmPointer client_data;
 11219	}
 11220	SmcCallbacks;
 11221	
 11222	
 11223	typedef void (*SmsSetPropertiesProc) ();
 11224	
 11225	typedef void (*SmsDeletePropertiesProc) ();
 11226	
 11227	typedef void (*SmsGetPropertiesProc) ();
 11228	
 11229	
 11230	typedef struct
 11231	{
 11232	  SmsGetPropertiesProc callback;
 11233	  SmPointer manager_data;
 11234	}
 11235	SmsCallbacks;
 11236	
 11237	
 11238	typedef int (*SmsNewClientProc) ();
 11239	
 11240	
 11241	typedef void (*SmcErrorHandler) ();
 11242	
 11243	typedef void (*SmsErrorHandler) ();
 11244	-------------------------------------------------------------------------------
 11245	
 11246	Interfaces for libICE
 11247	
 11248	Table 12-12. libICE Definition
 11249	
 11250	+---------------------+
 11251	|Library:|libICE      |
 11252	|--------+------------|
 11253	|SONAME: |libICE.so.6 |
 11254	+---------------------+
 11255	
 11256	The behavior of the interfaces in this library is specified by the following
 11257	standards.
 11258	
 11259	X11R6.4 X Inter-Client Exchange (ICE) Protocol[31]
 11260	
 11261	-------------------------------------------------------------------------------
 11262	
 11263	ICE Functions
 11264	
 11265	Table 12-13. libICE - ICE Functions Function Interfaces
 11266	
 11267	+-----------------------------------------------------------------------------------------------------------------------------------------------+
 11268	|IceAcceptConnection[31]    |IceConnectionStatus[31]     |IceGetListenConnectionString[31]|IceProcessMessages[31]     |IceSetErrorHandler[31]   |
 11269	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11270	|IceAddConnectionWatch[31]  |IceConnectionString[31]     |IceGetOutBufSize[31]            |IceProtocolRevision[31]    |IceSetHostBasedAuthProc  |
 11271	|                           |                            |                                |                           |[31]                     |
 11272	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11273	|IceAllocScratch[31]        |IceFlush[31]                |IceInitThreads[31]              |IceProtocolSetup[31]       |IceSetIOErrorHandler[31] |
 11274	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11275	|IceAppLockConn[31]         |IceFreeAuthFileEntry[31]    |IceLastReceivedSequenceNumber   |IceProtocolShutdown[31]    |IceSetPaAuthData[31]     |
 11276	|                           |                            |[31]                            |                           |                         |
 11277	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11278	|IceAppUnlockConn[31]       |IceFreeListenObjs[31]       |IceLastSentSequenceNumber[31]   |IceProtocolVersion[31]     |IceSetShutdownNegotiation|
 11279	|                           |                            |                                |                           |[31]                     |
 11280	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11281	|IceAuthFileName[31]        |IceGenerateMagicCookie[31]  |IceListenForConnections[31]     |IceReadAuthFileEntry[31]   |IceSwapping[31]          |
 11282	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11283	|IceCheckShutdownNegotiation|IceGetAuthFileEntry[31]     |IceListenForWellKnownConnections|IceRegisterForProtocolReply|IceUnlockAuthFile[31]    |
 11284	|[31]                       |                            |[31]                            |[31]                       |                         |
 11285	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11286	|IceCloseConnection[31]     |IceGetConnectionContext[31] |IceLockAuthFile[31]             |IceRegisterForProtocolSetup|IceVendor[31]            |
 11287	|                           |                            |                                |[31]                       |                         |
 11288	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11289	|IceComposeNetworkIdList[31]|IceGetInBufSize[31]         |IceOpenConnection[31]           |IceRelease[31]             |IceWriteAuthFileEntry[31]|
 11290	|---------------------------+----------------------------+--------------------------------+---------------------------+-------------------------|
 11291	|IceConnectionNumber[31]    |IceGetListenConnectionNumber|IcePing[31]                     |IceRemoveConnectionWatch   |                         |
 11292	|                           |[31]                        |                                |[31]                       |                         |
 11293	+-----------------------------------------------------------------------------------------------------------------------------------------------+
 11294	-------------------------------------------------------------------------------
 11295	
 11296	Data Definitions for libICE
 11297	
 11298	-------------------------------------------------------------------------------
 11299	
 11300	X11/ICE/ICElib.h
 11301	
 11302	typedef void *IcePointer;
 11303	
 11304	typedef enum
 11305	{
 11306	  IcePoAuthHaveReply,
 11307	  IcePoAuthRejected,
 11308	  IcePoAuthFailed,
 11309	  IcePoAuthDoneCleanup
 11310	}
 11311	IcePoAuthStatus;
 11312	
 11313	typedef enum
 11314	{
 11315	  IcePaAuthContinue,
 11316	  IcePaAuthAccepted,
 11317	  IcePaAuthRejected,
 11318	  IcePaAuthFailed
 11319	}
 11320	IcePaAuthStatus;
 11321	
 11322	typedef enum
 11323	{
 11324	  IceConnectPending,
 11325	  IceConnectAccepted,
 11326	  IceConnectRejected,
 11327	  IceConnectIOError
 11328	}
 11329	IceConnectStatus;
 11330	
 11331	typedef enum
 11332	{
 11333	  IceProtocolSetupSuccess,
 11334	  IceProtocolSetupFailure,
 11335	  IceProtocolSetupIOError,
 11336	  IceProtocolAlreadyActive
 11337	}
 11338	IceProtocolSetupStatus;
 11339	
 11340	typedef enum
 11341	{
 11342	  IceAcceptSuccess,
 11343	  IceAcceptFailure,
 11344	  IceAcceptBadMalloc
 11345	}
 11346	IceAcceptStatus;
 11347	
 11348	typedef enum
 11349	{
 11350	  IceClosedNow,
 11351	  IceClosedASAP,
 11352	  IceConnectionInUse,
 11353	  IceStartedShutdownNegotiation
 11354	}
 11355	IceCloseStatus;
 11356	
 11357	typedef enum
 11358	{
 11359	  IceProcessMessagesSuccess,
 11360	  IceProcessMessagesIOError,
 11361	  IceProcessMessagesConnectionClosed
 11362	}
 11363	IceProcessMessagesStatus;
 11364	
 11365	
 11366	typedef struct
 11367	{
 11368	  unsigned long sequence_of_request;
 11369	  int major_opcode_of_request;
 11370	  int minor_opcode_of_request;
 11371	  IcePointer reply;
 11372	}
 11373	IceReplyWaitInfo;
 11374	
 11375	
 11376	typedef struct _IceConn *IceConn;
 11377	
 11378	typedef struct _IceListenObj *IceListenObj;
 11379	
 11380	
 11381	typedef void (*IceWatchProc) ();
 11382	
 11383	typedef void (*IcePoProcessMsgProc) ();
 11384	
 11385	typedef void (*IcePaProcessMsgProc) ();
 11386	
 11387	typedef IcePoAuthStatus (*IcePoAuthProc) ();
 11388	
 11389	typedef IcePaAuthStatus (*IcePaAuthProc) ();
 11390	
 11391	typedef int (*IceHostBasedAuthProc) ();
 11392	
 11393	typedef int (*IceProtocolSetupProc) ();
 11394	
 11395	typedef void (*IceProtocolActivateProc) ();
 11396	
 11397	typedef void (*IceIOErrorProc) ();
 11398	
 11399	typedef void (*IcePingReplyProc) ();
 11400	
 11401	typedef void (*IceErrorHandler) ();
 11402	
 11403	typedef void (*IceIOErrorHandler) ();
 11404	
 11405	
 11406	typedef struct
 11407	{
 11408	  int major_version;
 11409	  int minor_version;
 11410	  IcePoProcessMsgProc process_msg_proc;
 11411	}
 11412	IcePoVersionRec;
 11413	
 11414	typedef struct
 11415	{
 11416	  int major_version;
 11417	  int minor_version;
 11418	  IcePaProcessMsgProc process_msg_proc;
 11419	}
 11420	IcePaVersionRec;
 11421	-------------------------------------------------------------------------------
 11422	
 11423	X11/ICE/ICEutil.h
 11424	
 11425	typedef struct
 11426	{
 11427	  char *protocol_name;
 11428	  unsigned short protocol_data_length;
 11429	  char *protocol_data;
 11430	  char *network_id;
 11431	  char *auth_name;
 11432	  unsigned short auth_data_length;
 11433	  char *auth_data;
 11434	}
 11435	IceAuthFileEntry;
 11436	
 11437	typedef struct
 11438	{
 11439	  char *protocol_name;
 11440	  char *network_id;
 11441	  char *auth_name;
 11442	  unsigned short auth_data_length;
 11443	  char *auth_data;
 11444	}
 11445	IceAuthDataEntry;
 11446	-------------------------------------------------------------------------------
 11447	
 11448	Interfaces for libXt
 11449	
 11450	Table 12-14. libXt Definition
 11451	
 11452	+--------------------+
 11453	|Library:|libXt      |
 11454	|--------+-----------|
 11455	|SONAME: |libXt.so.6 |
 11456	+--------------------+
 11457	
 11458	The behavior of the interfaces in this library is specified by the following
 11459	standards.
 11460	
 11461	Linux Standard Base[32]        
 11462	X11R.4 X Toolkit Intrinsics[33]
 11463	
 11464	-------------------------------------------------------------------------------
 11465	
 11466	X Toolkit
 11467	
 11468	Table 12-15. libXt - X Toolkit Function Interfaces
 11469	
 11470	+-------------------------------------------------------------------------------------------------------------------------------------------------------+
 11471	|XtAddActions[33]             |XtCancelSelectionRequest[33]    |XtError[33]                    |XtMainLoop[33]             |XtSessionGetToken[33]       |
 11472	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11473	|XtAddCallback[33]            |XtChangeManagedSet[33]          |XtErrorMsg[33]                 |XtMakeGeometryRequest[33]  |XtSessionReturnToken[33]    |
 11474	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11475	|XtAddCallbacks[33]           |XtClass[33]                     |XtFindFile[33]                 |XtMakeResizeRequest[33]    |XtSetErrorHandler[33]       |
 11476	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11477	|XtAddConverter[33]           |XtCloseDisplay[33]              |XtFree[33]                     |XtMalloc[33]               |XtSetErrorMsgHandler[33]    |
 11478	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11479	|XtAddEventHandler[33]        |XtConfigureWidget[33]           |XtGetActionKeysym[33]          |XtManageChild[33]          |XtSetEventDispatcher[33]    |
 11480	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11481	|XtAddExposureToRegion[33]    |XtConvert[33]                   |XtGetActionList[33]            |XtManageChildren[33]       |XtSetKeyTranslator[33]      |
 11482	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11483	|XtAddGrab[33]                |XtConvertAndStore[33]           |XtGetApplicationNameAndClass   |XtMapWidget[33]            |XtSetKeyboardFocus[33]      |
 11484	|                             |                                |[33]                           |                           |                            |
 11485	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11486	|XtAddInput[33]               |XtConvertCase[33]               |XtGetApplicationResources[33]  |XtMenuPopupAction[33]      |XtSetLanguageProc[33]       |
 11487	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11488	|XtAddRawEventHandler[33]     |XtCreateApplicationContext[33]  |XtGetClassExtension[33]        |XtMergeArgLists[33]        |XtSetMappedWhenManaged[33]  |
 11489	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11490	|XtAddSignal[33]              |XtCreateApplicationShell[33]    |XtGetConstraintResourceList[33]|XtMoveWidget[33]           |XtSetMultiClickTime[33]     |
 11491	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11492	|XtAddTimeOut[33]             |XtCreateManagedWidget[33]       |XtGetDisplays[33]              |XtName[33]                 |XtSetSelectionParameters[33]|
 11493	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11494	|XtAddWorkProc[33]            |XtCreatePopupShell[33]          |XtGetErrorDatabase[33]         |XtNameToWidget[33]         |XtSetSelectionTimeout[33]   |
 11495	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11496	|XtAllocateGC[33]             |XtCreateSelectionRequest[33]    |XtGetErrorDatabaseText[33]     |XtNewString[33]            |XtSetSensitive[33]          |
 11497	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11498	|XtAppAddActionHook[33]       |XtCreateWidget[33]              |XtGetGC[33]                    |XtNextEvent[33]            |XtSetSubvalues[33]          |
 11499	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11500	|XtAppAddActions[33]          |XtCreateWindow[33]              |XtGetKeyboardFocusWidget[33]   |XtNoticeSignal[33]         |XtSetTypeConverter[33]      |
 11501	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11502	|XtAppAddBlockHook[33]        |XtCvtColorToPixel[33]           |XtGetKeysymTable[33]           |XtOpenApplication[33]      |XtSetValues[33]             |
 11503	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11504	|XtAppAddConverter[33]        |XtCvtIntToBool[33]              |XtGetMultiClickTime[33]        |XtOpenDisplay[33]          |XtSetWMColormapWindows[33]  |
 11505	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11506	|XtAppAddInput[33]            |XtCvtIntToBoolean[33]           |XtGetResourceList[33]          |XtOverrideTranslations[33] |XtSetWarningHandler[33]     |
 11507	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11508	|XtAppAddSignal[33]           |XtCvtIntToColor[33]             |XtGetSelectionParameters[33]   |XtOwnSelection[33]         |XtSetWarningMsgHandler[33]  |
 11509	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11510	|XtAppAddTimeOut[33]          |XtCvtIntToFloat[33]             |XtGetSelectionRequest[33]      |XtOwnSelectionIncremental  |XtStringConversionWarning   |
 11511	|                             |                                |                               |[33]                       |[33]                        |
 11512	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11513	|XtAppAddWorkProc[33]         |XtCvtIntToFont[33]              |XtGetSelectionTimeout[33]      |XtParent[33]               |XtSuperclass[33]            |
 11514	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11515	|XtAppCreateShell[33]         |XtCvtIntToPixel[33]             |XtGetSelectionValue[33]        |XtParseAcceleratorTable[33]|XtToolkitInitialize[33]     |
 11516	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11517	|XtAppError[33]               |XtCvtIntToPixmap[33]            |XtGetSelectionValueIncremental |XtParseTranslationTable[33]|XtToolkitThreadInitialize   |
 11518	|                             |                                |[33]                           |                           |[33]                        |
 11519	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11520	|XtAppErrorMsg[33]            |XtCvtIntToShort[33]             |XtGetSelectionValues[33]       |XtPeekEvent[33]            |XtTranslateCoords[33]       |
 11521	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11522	|XtAppGetErrorDatabase[33]    |XtCvtIntToUnsignedChar[33]      |XtGetSelectionValuesIncremental|XtPending[33]              |XtTranslateKey[33]          |
 11523	|                             |                                |[33]                           |                           |                            |
 11524	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11525	|XtAppGetErrorDatabaseText[33]|XtCvtStringToAcceleratorTable   |XtGetSubresources[33]          |XtPopdown[33]              |XtTranslateKeycode[33]      |
 11526	|                             |[33]                            |                               |                           |                            |
 11527	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11528	|XtAppGetExitFlag[33]         |XtCvtStringToAtom[33]           |XtGetSubvalues[33]             |XtPopup[33]                |XtUngrabButton[33]          |
 11529	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11530	|XtAppGetSelectionTimeout[33] |XtCvtStringToBool[33]           |XtGetValues[33]                |XtPopupSpringLoaded[33]    |XtUngrabKey[33]             |
 11531	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11532	|XtAppInitialize[33]          |XtCvtStringToBoolean[33]        |XtGrabButton[33]               |XtProcessEvent[33]         |XtUngrabKeyboard[33]        |
 11533	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11534	|XtAppLock[33]                |XtCvtStringToCommandArgArray[33]|XtGrabKey[33]                  |XtProcessLock[33]          |XtUngrabPointer[33]         |
 11535	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11536	|XtAppMainLoop[33]            |XtCvtStringToCursor[33]         |XtGrabKeyboard[33]             |XtProcessUnlock[33]        |XtUninstallTranslations[33] |
 11537	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11538	|XtAppNextEvent[33]           |XtCvtStringToDimension[33]      |XtGrabPointer[33]              |XtQueryGeometry[33]        |XtUnmanageChild[33]         |
 11539	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11540	|XtAppPeekEvent[33]           |XtCvtStringToDirectoryString[33]|XtHasCallbacks[33]             |XtRealizeWidget[33]        |XtUnmanageChildren[33]      |
 11541	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11542	|XtAppPending[33]             |XtCvtStringToDisplay[33]        |XtHooksOfDisplay[33]           |XtRealloc[33]              |XtUnmapWidget[33]           |
 11543	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11544	|XtAppProcessEvent[33]        |XtCvtStringToFile[33]           |XtInitialize[33]               |XtRegisterCaseConverter[33]|XtUnrealizeWidget[33]       |
 11545	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11546	|XtAppReleaseCacheRefs[33]    |XtCvtStringToFloat[33]          |XtInitializeWidgetClass[33]    |XtRegisterDrawable[33]     |XtUnregisterDrawable[33]    |
 11547	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11548	|XtAppSetErrorHandler[33]     |XtCvtStringToFont[33]           |XtInsertEventHandler[33]       |XtRegisterExtensionSelector|XtVaAppCreateShell[33]      |
 11549	|                             |                                |                               |[33]                       |                            |
 11550	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11551	|XtAppSetErrorMsgHandler[33]  |XtCvtStringToFontSet[33]        |XtInsertEventTypeHandler[33]   |XtRegisterGrabAction[33]   |XtVaAppInitialize[33]       |
 11552	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11553	|XtAppSetExitFlag[33]         |XtCvtStringToFontStruct[33]     |XtInsertRawEventHandler[33]    |XtReleaseGC[33]            |XtVaCreateArgsList[33]      |
 11554	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11555	|XtAppSetFallbackResources[33]|XtCvtStringToGravity[33]        |XtInstallAccelerators[33]      |XtReleasePropertyAtom[33]  |XtVaCreateManagedWidget[33] |
 11556	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11557	|XtAppSetSelectionTimeout[33] |XtCvtStringToInitialState[33]   |XtInstallAllAccelerators[33]   |XtRemoveActionHook[33]     |XtVaCreatePopupShell[33]    |
 11558	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11559	|XtAppSetTypeConverter[33]    |XtCvtStringToInt[33]            |XtIsApplicationShell[33]       |XtRemoveAllCallbacks[33]   |XtVaCreateWidget[33]        |
 11560	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11561	|XtAppSetWarningHandler[33]   |XtCvtStringToPixel[33]          |XtIsComposite[33]              |XtRemoveBlockHook[33]      |XtVaGetApplicationResources |
 11562	|                             |                                |                               |                           |[33]                        |
 11563	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11564	|XtAppSetWarningMsgHandler[33]|XtCvtStringToRestartStyle[33]   |XtIsConstraint[33]             |XtRemoveCallback[33]       |XtVaGetSubresources[33]     |
 11565	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11566	|XtAppUnlock[33]              |XtCvtStringToShort[33]          |XtIsManaged[33]                |XtRemoveCallbacks[33]      |XtVaGetSubvalues[33]        |
 11567	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11568	|XtAppWarning[33]             |XtCvtStringToTranslationTable   |XtIsObject[33]                 |XtRemoveEventHandler[33]   |XtVaGetValues[33]           |
 11569	|                             |[33]                            |                               |                           |                            |
 11570	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11571	|XtAppWarningMsg[33]          |XtCvtStringToUnsignedChar[33]   |XtIsOverrideShell[33]          |XtRemoveEventTypeHandler   |XtVaOpenApplication[33]     |
 11572	|                             |                                |                               |[33]                       |                            |
 11573	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11574	|XtAugmentTranslations[33]    |XtCvtStringToVisual[33]         |XtIsRealized[33]               |XtRemoveGrab[33]           |XtVaSetSubvalues[33]        |
 11575	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11576	|XtBuildEventMask[33]         |XtDatabase[33]                  |XtIsRectObj[33]                |XtRemoveInput[33]          |XtVaSetValues[33]           |
 11577	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11578	|XtCallAcceptFocus[33]        |XtDestroyApplicationContext[33] |XtIsSensitive[33]              |XtRemoveRawEventHandler[33]|XtWarning[33]               |
 11579	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11580	|XtCallActionProc[33]         |XtDestroyGC[33]                 |XtIsSessionShell[33]           |XtRemoveSignal[33]         |XtWarningMsg[33]            |
 11581	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11582	|XtCallCallbackList[33]       |XtDestroyWidget[33]             |XtIsShell[33]                  |XtRemoveTimeOut[33]        |XtWidgetToApplicationContext|
 11583	|                             |                                |                               |                           |[33]                        |
 11584	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11585	|XtCallCallbacks[33]          |XtDirectConvert[33]             |XtIsSubclass[33]               |XtRemoveWorkProc[33]       |XtWindow[33]                |
 11586	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11587	|XtCallConverter[33]          |XtDisownSelection[33]           |XtIsTopLevelShell[33]          |XtReservePropertyAtom[33]  |XtWindowOfObject[33]        |
 11588	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11589	|XtCallbackExclusive[33]      |XtDispatchEvent[33]             |XtIsTransientShell[33]         |XtResizeWidget[33]         |XtWindowToWidget[33]        |
 11590	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11591	|XtCallbackNone[33]           |XtDispatchEventToWidget[33]     |XtIsVendorShell[33]            |XtResizeWindow[33]         |_XtCopyFromArg[32]          |
 11592	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11593	|XtCallbackNonexclusive[33]   |XtDisplay[33]                   |XtIsWMShell[33]                |XtResolvePathname[33]      |_XtInherit[32]              |
 11594	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11595	|XtCallbackPopdown[33]        |XtDisplayInitialize[33]         |XtIsWidget[33]                 |XtScreen[33]               |_XtIsSubclassOf[32]         |
 11596	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11597	|XtCallbackReleaseCacheRef[33]|XtDisplayOfObject[33]           |XtKeysymToKeycodeList[33]      |XtScreenDatabase[33]       |                            |
 11598	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11599	|XtCallbackReleaseCacheRefList|XtDisplayStringConversionWarning|XtLastEventProcessed[33]       |XtScreenOfObject[33]       |                            |
 11600	|[33]                         |[33]                            |                               |                           |                            |
 11601	|-----------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------|
 11602	|XtCalloc[33]                 |XtDisplayToApplicationContext   |XtLastTimestampProcessed[33]   |XtSendSelectionRequest[33] |                            |
 11603	|                             |[33]                            |                               |                           |                            |
 11604	+-------------------------------------------------------------------------------------------------------------------------------------------------------+
 11605	-------------------------------------------------------------------------------
 11606	
 11607	Data Symbols
 11608	
 11609	Table 12-16. libXt - X Toolkit Data Interfaces
 11610	
 11611	+-----------------------------------------------------------------------------------------------------------------------+
 11612	|XtCXtToolkitError[33]      |compositeWidgetClass |overrideShellClassRec   |shellClassRec[33]        |widgetClass[33]   |
 11613	|                           |[33]                 |[33]                    |                         |                  |
 11614	|---------------------------+---------------------+------------------------+-------------------------+------------------|
 11615	|XtShellStrings[33]         |constraintClassRec   |overrideShellWidgetClass|shellWidgetClass[33]     |widgetClassRec[33]|
 11616	|                           |[33]                 |[33]                    |                         |                  |
 11617	|---------------------------+---------------------+------------------------+-------------------------+------------------|
 11618	|XtStrings[33]              |constraintWidgetClass|rectObjClass[33]        |topLevelShellClassRec[33]|wmShellClassRec   |
 11619	|                           |[33]                 |                        |                         |[33]              |
 11620	|---------------------------+---------------------+------------------------+-------------------------+------------------|
 11621	|_XtInheritTranslations[32] |coreWidgetClass[33]  |rectObjClassRec[33]     |topLevelShellWidgetClass |wmShellWidgetClass|
 11622	|                           |                     |                        |[33]                     |[33]              |
 11623	|---------------------------+---------------------+------------------------+-------------------------+------------------|
 11624	|applicationShellWidgetClass|objectClass[33]      |sessionShellClassRec[33]|transientShellClassRec   |                  |
 11625	|[33]                       |                     |                        |[33]                     |                  |
 11626	|---------------------------+---------------------+------------------------+-------------------------+------------------|
 11627	|compositeClassRec[33]      |objectClassRec[33]   |sessionShellWidgetClass |transientShellWidgetClass|                  |
 11628	|                           |                     |[33]                    |[33]                     |                  |
 11629	+-----------------------------------------------------------------------------------------------------------------------+
 11630	-------------------------------------------------------------------------------
 11631	
 11632	Data Definitions for libXt
 11633	
 11634	-------------------------------------------------------------------------------
 11635	
 11636	Interfaces Definitions for libXt
 11637	
 11638	Table of Contents
 11639	_XtCopyFromArg -- Copy "size" bytes from src to dst.
 11640	_XtInherit -- inheritance operation.
 11641	_XtInheritTranslations -- an inheritance constant
 11642	_XtIsSubclassOf -- determine if Widget is a subclass of WidgetClass.
 11643	
 11644	_XtCopyFromArg
 11645	
 11646	Name
 11647	
 11648	_XtCopyFromArg -- Copy "size" bytes from src to dst.
 11649	
 11650	Synopsis
 11651	
 11652	void _XtCopyFromArg(XtArgVal src,char* dst,unsigned int size);
 11653	
 11654	Description
 11655	
 11656	The _XtCopyFromArg() function copies "size" bytes from src to dst. This is an
 11657	internal X function call.
 11658	
 11659	_XtInherit
 11660	
 11661	Name
 11662	
 11663	_XtInherit -- inheritance operation.
 11664	
 11665	Synopsis
 11666	
 11667	#include <IntrinsicP.h>
 11668	
 11669	extern void _XtInherit(
 11670	#if NeedFunctionPrototypes
 11671	    void
 11672	#endif
 11673	);
 11674	
 11675	Description
 11676	
 11677	_XtInherit() is a procedure that issues an error message if it is actually
 11678	called.
 11679	
 11680	_XtInheritTranslations
 11681	
 11682	Name
 11683	
 11684	_XtInheritTranslations -- an inheritance constant
 11685	
 11686	Synopsis
 11687	
 11688	#include <CoreP.h>
 11689	
 11690	externalref int _XtInheritTranslations;
 11691	
 11692	Description
 11693	
 11694	_XtInheritTranslations is an inheritance constant.
 11695	
 11696	_XtIsSubclassOf
 11697	
 11698	Name
 11699	
 11700	_XtIsSubclassOf -- determine if Widget is a subclass of WidgetClass.
 11701	
 11702	Synopsis
 11703	
 11704	#include <Intrinsic.h>
 11705	
 11706	extern Boolean _XtIsSubclassOf(
 11707	    Widget              /* object*  /,
 11708	    WidgetClass         /* widget_class */,
 11709	    WidgetClass         /* flag_class */,
 11710	    _XtXtEnum           /* type_flag */,
 11711	);
 11712	
 11713	Description
 11714	
 11715	Determine if Widget(object) is a subclass of WidgetClass(widget_class).
 11716	
 11717	-------------------------------------------------------------------------------
 11718	
 11719	Interfaces for libGL
 11720	
 11721	Table 12-17. libGL Definition
 11722	
 11723	+--------------------+
 11724	|Library:|libGL      |
 11725	|--------+-----------|
 11726	|SONAME: |libGL.so.1 |
 11727	+--------------------+
 11728	
 11729	The behavior of the interfaces in this library is specified by the following
 11730	standards.
 11731	
 11732	OpenGL® Application Binary Interface for Linux[34]
 11733	
 11734	-------------------------------------------------------------------------------
 11735	
 11736	GL X interface
 11737	
 11738	Table 12-18. libGL - GL X interface Function Interfaces
 11739	
 11740	+-----------------------------------------------------------------------------------------------------------------+
 11741	|glXChooseVisual[34]|glXDestroyContext  |glXGetContextIDEXT[34]   |glXImportContextEXT   |glXQueryExtensionsString|
 11742	|                   |[34]               |                         |[34]                  |[34]                    |
 11743	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11744	|glXCopyContext[34] |glXDestroyGLXPixmap|glXGetCurrentContext[34] |glXIsDirect[34]       |glXQueryServerString[34]|
 11745	|                   |[34]               |                         |                      |                        |
 11746	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11747	|glXCreateContext   |glXDestroyPbuffer  |glXGetCurrentDisplay[34] |glXMakeContextCurrent |glXQueryVersion[34]     |
 11748	|[34]               |[34]               |                         |[34]                  |                        |
 11749	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11750	|glXCreateGLXPixmap |glXDestroyPixmap   |glXGetCurrentDrawable[34]|glXMakeCurrent[34]    |glXSelectEvent[34]      |
 11751	|[34]               |[34]               |                         |                      |                        |
 11752	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11753	|glXCreateNewContext|glXDestroyWindow   |glXGetCurrentReadDrawable|glXQueryContext[34]   |glXSwapBuffers[34]      |
 11754	|[34]               |[34]               |[34]                     |                      |                        |
 11755	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11756	|glXCreatePbuffer   |glXFreeContextEXT  |glXGetFBConfigAttrib[34] |glXQueryContextInfoEXT|glXUseXFont[34]         |
 11757	|[34]               |[34]               |                         |[34]                  |                        |
 11758	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11759	|glXCreatePixmap[34]|glXGetClientString |glXGetSelectedEvent[34]  |glXQueryDrawable[34]  |glXWaitGL[34]           |
 11760	|                   |[34]               |                         |                      |                        |
 11761	|-------------------+-------------------+-------------------------+----------------------+------------------------|
 11762	|glXCreateWindow[34]|glXGetConfig[34]   |glXGetVisualFromFBConfig |glXQueryExtension[34] |glXWaitX[34]            |
 11763	|                   |                   |[34]                     |                      |                        |
 11764	+-----------------------------------------------------------------------------------------------------------------+
 11765	-------------------------------------------------------------------------------
 11766	
 11767	OpenGL
 11768	
 11769	Table 12-19. libGL - OpenGL Function Interfaces
 11770	
 11771	+------------------------------------------------------------------------------------------------------------------+
 11772	|glAccum[34]              |glDepthRange[34]           |glIndexPointer[34]   |glNormal3d[34]      |glTexCoord1fv[34]|
 11773	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11774	|glActiveTextureARB[34]   |glDisable[34]              |glIndexd[34]         |glNormal3dv[34]     |glTexCoord1i[34] |
 11775	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11776	|glAlphaFunc[34]          |glDisableClientState[34]   |glIndexdv[34]        |glNormal3f[34]      |glTexCoord1iv[34]|
 11777	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11778	|glAreTexturesResident[34]|glDrawArrays[34]           |glIndexf[34]         |glNormal3fv[34]     |glTexCoord1s[34] |
 11779	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11780	|glArrayElement[34]       |glDrawBuffer[34]           |glIndexfv[34]        |glNormal3i[34]      |glTexCoord1sv[34]|
 11781	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11782	|glBegin[34]              |glDrawElements[34]         |glIndexi[34]         |glNormal3iv[34]     |glTexCoord2d[34] |
 11783	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11784	|glBindTexture[34]        |glDrawPixels[34]           |glIndexiv[34]        |glNormal3s[34]      |glTexCoord2dv[34]|
 11785	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11786	|glBitmap[34]             |glDrawRangeElements[34]    |glIndexs[34]         |glNormal3sv[34]     |glTexCoord2f[34] |
 11787	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11788	|glBlendColor[34]         |glEdgeFlag[34]             |glIndexsv[34]        |glNormalPointer[34] |glTexCoord2fv[34]|
 11789	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11790	|glBlendColorEXT[34]      |glEdgeFlagPointer[34]      |glIndexub[34]        |glOrtho[34]         |glTexCoord2i[34] |
 11791	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11792	|glBlendEquation[34]      |glEdgeFlagv[34]            |glIndexubv[34]       |glPassThrough[34]   |glTexCoord2iv[34]|
 11793	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11794	|glBlendEquationEXT[34]   |glEnable[34]               |glInitNames[34]      |glPixelMapfv[34]    |glTexCoord2s[34] |
 11795	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11796	|glBlendFunc[34]          |glEnableClientState[34]    |glInterleavedArrays  |glPixelMapuiv[34]   |glTexCoord2sv[34]|
 11797	|                         |                           |[34]                 |                    |                 |
 11798	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11799	|glCallList[34]           |glEnd[34]                  |glIsEnabled[34]      |glPixelMapusv[34]   |glTexCoord3d[34] |
 11800	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11801	|glCallLists[34]          |glEndList[34]              |glIsList[34]         |glPixelStoref[34]   |glTexCoord3dv[34]|
 11802	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11803	|glClear[34]              |glEvalCoord1d[34]          |glIsTexture[34]      |glPixelStorei[34]   |glTexCoord3f[34] |
 11804	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11805	|glClearAccum[34]         |glEvalCoord1dv[34]         |glLightModelf[34]    |glPixelTransferf[34]|glTexCoord3fv[34]|
 11806	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11807	|glClearColor[34]         |glEvalCoord1f[34]          |glLightModelfv[34]   |glPixelTransferi[34]|glTexCoord3i[34] |
 11808	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11809	|glClearDepth[34]         |glEvalCoord1fv[34]         |glLightModeli[34]    |glPixelZoom[34]     |glTexCoord3iv[34]|
 11810	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11811	|glClearIndex[34]         |glEvalCoord2d[34]          |glLightModeliv[34]   |glPointSize[34]     |glTexCoord3s[34] |
 11812	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11813	|glClearStencil[34]       |glEvalCoord2dv[34]         |glLightf[34]         |glPolygonMode[34]   |glTexCoord3sv[34]|
 11814	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11815	|glClientActiveTextureARB |glEvalCoord2f[34]          |glLightfv[34]        |glPolygonOffset[34] |glTexCoord4d[34] |
 11816	|[34]                     |                           |                     |                    |                 |
 11817	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11818	|glClipPlane[34]          |glEvalCoord2fv[34]         |glLighti[34]         |glPolygonStipple[34]|glTexCoord4dv[34]|
 11819	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11820	|glColor3b[34]            |glEvalMesh1[34]            |glLightiv[34]        |glPopAttrib[34]     |glTexCoord4f[34] |
 11821	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11822	|glColor3bv[34]           |glEvalMesh2[34]            |glLineStipple[34]    |glPopClientAttrib   |glTexCoord4fv[34]|
 11823	|                         |                           |                     |[34]                |                 |
 11824	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11825	|glColor3d[34]            |glEvalPoint1[34]           |glLineWidth[34]      |glPopMatrix[34]     |glTexCoord4i[34] |
 11826	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11827	|glColor3dv[34]           |glEvalPoint2[34]           |glListBase[34]       |glPopName[34]       |glTexCoord4iv[34]|
 11828	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11829	|glColor3f[34]            |glFeedbackBuffer[34]       |glLoadIdentity[34]   |glPrioritizeTextures|glTexCoord4s[34] |
 11830	|                         |                           |                     |[34]                |                 |
 11831	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11832	|glColor3fv[34]           |glFinish[34]               |glLoadMatrixd[34]    |glPushAttrib[34]    |glTexCoord4sv[34]|
 11833	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11834	|glColor3i[34]            |glFlush[34]                |glLoadMatrixf[34]    |glPushClientAttrib  |glTexCoordPointer|
 11835	|                         |                           |                     |[34]                |[34]             |
 11836	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11837	|glColor3iv[34]           |glFogf[34]                 |glLoadName[34]       |glPushMatrix[34]    |glTexEnvf[34]    |
 11838	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11839	|glColor3s[34]            |glFogfv[34]                |glLogicOp[34]        |glPushName[34]      |glTexEnvfv[34]   |
 11840	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11841	|glColor3sv[34]           |glFogi[34]                 |glMap1d[34]          |glRasterPos2d[34]   |glTexEnvi[34]    |
 11842	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11843	|glColor3ub[34]           |glFogiv[34]                |glMap1f[34]          |glRasterPos2dv[34]  |glTexEnviv[34]   |
 11844	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11845	|glColor3ubv[34]          |glFrontFace[34]            |glMap2d[34]          |glRasterPos2f[34]   |glTexGend[34]    |
 11846	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11847	|glColor3ui[34]           |glFrustum[34]              |glMap2f[34]          |glRasterPos2fv[34]  |glTexGendv[34]   |
 11848	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11849	|glColor3uiv[34]          |glGenLists[34]             |glMapGrid1d[34]      |glRasterPos2i[34]   |glTexGenf[34]    |
 11850	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11851	|glColor3us[34]           |glGenTextures[34]          |glMapGrid1f[34]      |glRasterPos2iv[34]  |glTexGenfv[34]   |
 11852	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11853	|glColor3usv[34]          |glGetBooleanv[34]          |glMapGrid2d[34]      |glRasterPos2s[34]   |glTexGeni[34]    |
 11854	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11855	|glColor4b[34]            |glGetClipPlane[34]         |glMapGrid2f[34]      |glRasterPos2sv[34]  |glTexGeniv[34]   |
 11856	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11857	|glColor4bv[34]           |glGetColorTable[34]        |glMaterialf[34]      |glRasterPos3d[34]   |glTexImage1D[34] |
 11858	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11859	|glColor4d[34]            |glGetColorTableParameterfv |glMaterialfv[34]     |glRasterPos3dv[34]  |glTexImage2D[34] |
 11860	|                         |[34]                       |                     |                    |                 |
 11861	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11862	|glColor4dv[34]           |glGetColorTableParameteriv |glMateriali[34]      |glRasterPos3f[34]   |glTexImage3D[34] |
 11863	|                         |[34]                       |                     |                    |                 |
 11864	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11865	|glColor4f[34]            |glGetConvolutionFilter[34] |glMaterialiv[34]     |glRasterPos3fv[34]  |glTexParameterf  |
 11866	|                         |                           |                     |                    |[34]             |
 11867	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11868	|glColor4fv[34]           |glGetConvolutionParameterfv|glMatrixMode[34]     |glRasterPos3i[34]   |glTexParameterfv |
 11869	|                         |[34]                       |                     |                    |[34]             |
 11870	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11871	|glColor4i[34]            |glGetConvolutionParameteriv|glMinmax[34]         |glRasterPos3iv[34]  |glTexParameteri  |
 11872	|                         |[34]                       |                     |                    |[34]             |
 11873	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11874	|glColor4iv[34]           |glGetDoublev[34]           |glMultMatrixd[34]    |glRasterPos3s[34]   |glTexParameteriv |
 11875	|                         |                           |                     |                    |[34]             |
 11876	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11877	|glColor4s[34]            |glGetError[34]             |glMultMatrixf[34]    |glRasterPos3sv[34]  |glTexSubImage1D  |
 11878	|                         |                           |                     |                    |[34]             |
 11879	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11880	|glColor4sv[34]           |glGetFloatv[34]            |glMultiTexCoord1dARB |glRasterPos4d[34]   |glTexSubImage2D  |
 11881	|                         |                           |[34]                 |                    |[34]             |
 11882	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11883	|glColor4ub[34]           |glGetHistogram[34]         |glMultiTexCoord1dvARB|glRasterPos4dv[34]  |glTexSubImage3D  |
 11884	|                         |                           |[34]                 |                    |[34]             |
 11885	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11886	|glColor4ubv[34]          |glGetHistogramParameterfv  |glMultiTexCoord1fARB |glRasterPos4f[34]   |glTranslated[34] |
 11887	|                         |[34]                       |[34]                 |                    |                 |
 11888	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11889	|glColor4ui[34]           |glGetHistogramParameteriv  |glMultiTexCoord1fvARB|glRasterPos4fv[34]  |glTranslatef[34] |
 11890	|                         |[34]                       |[34]                 |                    |                 |
 11891	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11892	|glColor4uiv[34]          |glGetIntegerv[34]          |glMultiTexCoord1iARB |glRasterPos4i[34]   |glVertex2d[34]   |
 11893	|                         |                           |[34]                 |                    |                 |
 11894	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11895	|glColor4us[34]           |glGetLightfv[34]           |glMultiTexCoord1ivARB|glRasterPos4iv[34]  |glVertex2dv[34]  |
 11896	|                         |                           |[34]                 |                    |                 |
 11897	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11898	|glColor4usv[34]          |glGetLightiv[34]           |glMultiTexCoord1sARB |glRasterPos4s[34]   |glVertex2f[34]   |
 11899	|                         |                           |[34]                 |                    |                 |
 11900	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11901	|glColorMask[34]          |glGetMapdv[34]             |glMultiTexCoord1svARB|glRasterPos4sv[34]  |glVertex2fv[34]  |
 11902	|                         |                           |[34]                 |                    |                 |
 11903	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11904	|glColorMaterial[34]      |glGetMapfv[34]             |glMultiTexCoord2dARB |glReadBuffer[34]    |glVertex2i[34]   |
 11905	|                         |                           |[34]                 |                    |                 |
 11906	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11907	|glColorPointer[34]       |glGetMapiv[34]             |glMultiTexCoord2dvARB|glReadPixels[34]    |glVertex2iv[34]  |
 11908	|                         |                           |[34]                 |                    |                 |
 11909	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11910	|glColorSubTable[34]      |glGetMaterialfv[34]        |glMultiTexCoord2fARB |glRectd[34]         |glVertex2s[34]   |
 11911	|                         |                           |[34]                 |                    |                 |
 11912	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11913	|glColorTable[34]         |glGetMaterialiv[34]        |glMultiTexCoord2fvARB|glRectdv[34]        |glVertex2sv[34]  |
 11914	|                         |                           |[34]                 |                    |                 |
 11915	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11916	|glColorTableParameterfv  |glGetMinmax[34]            |glMultiTexCoord2iARB |glRectf[34]         |glVertex3d[34]   |
 11917	|[34]                     |                           |[34]                 |                    |                 |
 11918	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11919	|glColorTableParameteriv  |glGetMinmaxParameterfv[34] |glMultiTexCoord2ivARB|glRectfv[34]        |glVertex3dv[34]  |
 11920	|[34]                     |                           |[34]                 |                    |                 |
 11921	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11922	|glConvolutionFilter1D[34]|glGetMinmaxParameteriv[34] |glMultiTexCoord2sARB |glRecti[34]         |glVertex3f[34]   |
 11923	|                         |                           |[34]                 |                    |                 |
 11924	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11925	|glConvolutionFilter2D[34]|glGetPixelMapfv[34]        |glMultiTexCoord2svARB|glRectiv[34]        |glVertex3fv[34]  |
 11926	|                         |                           |[34]                 |                    |                 |
 11927	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11928	|glConvolutionParameterf  |glGetPixelMapuiv[34]       |glMultiTexCoord3dARB |glRects[34]         |glVertex3i[34]   |
 11929	|[34]                     |                           |[34]                 |                    |                 |
 11930	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11931	|glConvolutionParameterfv |glGetPixelMapusv[34]       |glMultiTexCoord3dvARB|glRectsv[34]        |glVertex3iv[34]  |
 11932	|[34]                     |                           |[34]                 |                    |                 |
 11933	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11934	|glConvolutionParameteri  |glGetPointerv[34]          |glMultiTexCoord3fARB |glRenderMode[34]    |glVertex3s[34]   |
 11935	|[34]                     |                           |[34]                 |                    |                 |
 11936	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11937	|glConvolutionParameteriv |glGetPolygonStipple[34]    |glMultiTexCoord3fvARB|glResetHistogram[34]|glVertex3sv[34]  |
 11938	|[34]                     |                           |[34]                 |                    |                 |
 11939	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11940	|glCopyColorSubTable[34]  |glGetSeparableFilter[34]   |glMultiTexCoord3iARB |glResetMinmax[34]   |glVertex4d[34]   |
 11941	|                         |                           |[34]                 |                    |                 |
 11942	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11943	|glCopyColorTable[34]     |glGetString[34]            |glMultiTexCoord3ivARB|glRotated[34]       |glVertex4dv[34]  |
 11944	|                         |                           |[34]                 |                    |                 |
 11945	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11946	|glCopyConvolutionFilter1D|glGetTexEnvfv[34]          |glMultiTexCoord3sARB |glRotatef[34]       |glVertex4f[34]   |
 11947	|[34]                     |                           |[34]                 |                    |                 |
 11948	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11949	|glCopyConvolutionFilter2D|glGetTexEnviv[34]          |glMultiTexCoord3svARB|glScaled[34]        |glVertex4fv[34]  |
 11950	|[34]                     |                           |[34]                 |                    |                 |
 11951	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11952	|glCopyPixels[34]         |glGetTexGendv[34]          |glMultiTexCoord4dARB |glScalef[34]        |glVertex4i[34]   |
 11953	|                         |                           |[34]                 |                    |                 |
 11954	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11955	|glCopyTexImage1D[34]     |glGetTexGenfv[34]          |glMultiTexCoord4dvARB|glScissor[34]       |glVertex4iv[34]  |
 11956	|                         |                           |[34]                 |                    |                 |
 11957	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11958	|glCopyTexImage2D[34]     |glGetTexGeniv[34]          |glMultiTexCoord4fARB |glSelectBuffer[34]  |glVertex4s[34]   |
 11959	|                         |                           |[34]                 |                    |                 |
 11960	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11961	|glCopyTexSubImage1D[34]  |glGetTexImage[34]          |glMultiTexCoord4fvARB|glSeparableFilter2D |glVertex4sv[34]  |
 11962	|                         |                           |[34]                 |[34]                |                 |
 11963	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11964	|glCopyTexSubImage2D[34]  |glGetTexLevelParameterfv   |glMultiTexCoord4iARB |glShadeModel[34]    |glVertexPointer  |
 11965	|                         |[34]                       |[34]                 |                    |[34]             |
 11966	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11967	|glCopyTexSubImage3D[34]  |glGetTexLevelParameteriv   |glMultiTexCoord4ivARB|glStencilFunc[34]   |glViewport[34]   |
 11968	|                         |[34]                       |[34]                 |                    |                 |
 11969	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11970	|glCullFace[34]           |glGetTexParameterfv[34]    |glMultiTexCoord4sARB |glStencilMask[34]   |glXChooseFBConfig|
 11971	|                         |                           |[34]                 |                    |[34]             |
 11972	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11973	|glDeleteLists[34]        |glGetTexParameteriv[34]    |glMultiTexCoord4svARB|glStencilOp[34]     |                 |
 11974	|                         |                           |[34]                 |                    |                 |
 11975	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11976	|glDeleteTextures[34]     |glHint[34]                 |glNewList[34]        |glTexCoord1d[34]    |                 |
 11977	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11978	|glDepthFunc[34]          |glHistogram[34]            |glNormal3b[34]       |glTexCoord1dv[34]   |                 |
 11979	|-------------------------+---------------------------+---------------------+--------------------+-----------------|
 11980	|glDepthMask[34]          |glIndexMask[34]            |glNormal3bv[34]      |glTexCoord1f[34]    |                 |
 11981	+------------------------------------------------------------------------------------------------------------------+
 11982	-------------------------------------------------------------------------------
 11983	
 11984	Data Definitions for libGL
 11985	
 11986	-------------------------------------------------------------------------------
 11987	
 11988	GL/gl.h
 11989	
 11990	
 11991	typedef unsigned int GLenum;
 11992	
 11993	typedef unsigned char GLboolean;
 11994	
 11995	typedef unsigned int GLbitfield;
 11996	
 11997	typedef void GLvoid;
 11998	
 11999	typedef char GLbyte;
 12000	
 12001	typedef short GLshort;
 12002	
 12003	typedef int GLint;
 12004	
 12005	typedef unsigned char GLubyte;
 12006	
 12007	typedef unsigned short GLushort;
 12008	
 12009	typedef unsigned int GLuint;
 12010	
 12011	typedef int GLsizei;
 12012	
 12013	typedef float GLfloat;
 12014	
 12015	typedef float GLclampf;
 12016	
 12017	typedef double GLdouble;
 12018	
 12019	typedef double GLclampd;
 12020	
 12021	
 12022	
 12023	#define GL_UNSIGNED_BYTE        0x1401
 12024	#define GL_SHORT        0x1402
 12025	#define GL_UNSIGNED_SHORT       0x1403
 12026	#define GL_INT  0x1404
 12027	#define GL_UNSIGNED_INT 0x1405
 12028	#define GL_FLOAT        0x1406
 12029	#define GL_2_BYTES      0x1407
 12030	#define GL_3_BYTES      0x1408
 12031	#define GL_4_BYTES      0x1409
 12032	#define GL_DOUBLE       0x140A
 12033	
 12034	#define GL_POINTS       0x0000
 12035	#define GL_LINES        0x0001
 12036	#define GL_LINE_LOOP    0x0002
 12037	#define GL_LINE_STRIP   0x0003
 12038	#define GL_TRIANGLES    0x0004
 12039	#define GL_TRIANGLE_STRIP       0x0005
 12040	#define GL_TRIANGLE_FAN 0x0006
 12041	#define GL_QUADS        0x0007
 12042	#define GL_QUAD_STRIP   0x0008
 12043	#define GL_POLYGON      0x0009
 12044	
 12045	#define GL_V2F  0x2A20
 12046	#define GL_V3F  0x2A21
 12047	#define GL_C4UB_V2F     0x2A22
 12048	#define GL_C4UB_V3F     0x2A23
 12049	#define GL_C3F_V3F      0x2A24
 12050	#define GL_N3F_V3F      0x2A25
 12051	#define GL_C4F_N3F_V3F  0x2A26
 12052	#define GL_T2F_V3F      0x2A27
 12053	#define GL_T4F_V4F      0x2A28
 12054	#define GL_T2F_C4UB_V3F 0x2A29
 12055	#define GL_T2F_C3F_V3F  0x2A2A
 12056	#define GL_T2F_N3F_V3F  0x2A2B
 12057	#define GL_T2F_C4F_N3F_V3F      0x2A2C
 12058	#define GL_T4F_C4F_N3F_V4F      0x2A2D
 12059	#define GL_VERTEX_ARRAY 0x8074
 12060	#define GL_NORMAL_ARRAY 0x8075
 12061	#define GL_COLOR_ARRAY  0x8076
 12062	#define GL_INDEX_ARRAY  0x8077
 12063	#define GL_TEXTURE_COORD_ARRAY  0x8078
 12064	#define GL_EDGE_FLAG_ARRAY      0x8079
 12065	#define GL_VERTEX_ARRAY_SIZE    0x807A
 12066	#define GL_VERTEX_ARRAY_TYPE    0x807B
 12067	#define GL_VERTEX_ARRAY_STRIDE  0x807C
 12068	#define GL_NORMAL_ARRAY_TYPE    0x807E
 12069	#define GL_NORMAL_ARRAY_STRIDE  0x807F
 12070	#define GL_COLOR_ARRAY_SIZE     0x8081
 12071	#define GL_COLOR_ARRAY_TYPE     0x8082
 12072	#define GL_COLOR_ARRAY_STRIDE   0x8083
 12073	#define GL_INDEX_ARRAY_TYPE     0x8085
 12074	#define GL_INDEX_ARRAY_STRIDE   0x8086
 12075	#define GL_TEXTURE_COORD_ARRAY_SIZE     0x8088
 12076	#define GL_TEXTURE_COORD_ARRAY_TYPE     0x8089
 12077	#define GL_TEXTURE_COORD_ARRAY_STRIDE   0x808A
 12078	#define GL_EDGE_FLAG_ARRAY_STRIDE       0x808C
 12079	#define GL_VERTEX_ARRAY_POINTER 0x808E
 12080	#define GL_NORMAL_ARRAY_POINTER 0x808F
 12081	#define GL_COLOR_ARRAY_POINTER  0x8090
 12082	#define GL_INDEX_ARRAY_POINTER  0x8091
 12083	#define GL_TEXTURE_COORD_ARRAY_POINTER  0x8092
 12084	
 12085	#define GL_MATRIX_MODE  0x0BA0
 12086	#define GL_MODELVIEW    0x1700
 12087	#define GL_PROJECTION   0x1701
 12088	#define GL_TEXTURE      0x1702
 12089	-------------------------------------------------------------------------------
 12090	
 12091	GL/glx.h
 12092	
 12093	typedef struct __GLXcontextRec *GLXContext;
 12094	
 12095	typedef struct __GLXFBConfigRec *GLXFBConfig;
 12096	
 12097	typedef XID GLXContextID;
 12098	
 12099	typedef XID GLXPixmap;
 12100	
 12101	typedef XID GLXDrawable;
 12102	
 12103	typedef XID GLXPbuffer;
 12104	
 12105	typedef XID GLXWindow;
 12106	
 12107	VII. Package Format and Installation
 12108	
 12109	Table of Contents
 12110	13. Software Installation
 12111	
 12112	-------------------------------------------------------------------------------
 12113	
 12114	Chapter 13. Software Installation
 12115	
 12116	-------------------------------------------------------------------------------
 12117	
 12118	Package Format
 12119	
 12120	Applications should be provided in the RPM packaging format as defined in the 
 12121	appendix of Maximum RPM, with some restrictions listed below. [35]
 12122	
 12123	Distributions must provide a mechanism for installing applications in this
 12124	packaging format with some restrictions listed below. [36]
 12125	
 12126	-------------------------------------------------------------------------------
 12127	
 12128	Package Script Restrictions
 12129	
 12130	Scripts used as part of the package install and uninstall may only use commands
 12131	and interfaces that are specified by the LSB. All other commands are not
 12132	guaranteed to be present, or to behave in expected ways.
 12133	
 12134	Packages may not use RPM triggers.
 12135	
 12136	Packages may not depend on the order in which scripts are executed
 12137	(pre-install, pre-uninstall, &c), when doing an upgrade.
 12138	
 12139	-------------------------------------------------------------------------------
 12140	
 12141	Package Tools
 12142	
 12143	The LSB does not specify the interface to the tools used to manipulate
 12144	LSB-conformant packages. Each conforming distribution will provide
 12145	documentation for installing LSB packages.
 12146	
 12147	-------------------------------------------------------------------------------
 12148	
 12149	Package Naming
 12150	
 12151	Because there is no consistent packaging naming among the various Linux
 12152	distributions, it is necessary for LSB-conformant packages to adhere the
 12153	following naming rules to avoid conflicts with packages provided by the
 12154	distributions.
 12155	
 12156	  * All LSB package names must begin with the prefix "lsb-" to avoid
 12157	    conflicting with existing packages used by Linux distributions.
 12158	   
 12159	  * If the package name contains only one hyphen (including the one in the
 12160	    "lsb-" prefix) then the package name must be assigned by the Linux Assigned
 12161	    Names and Numbers Authority (LANANA), which shall maintain a registry of
 12162	    LSB names.
 12163	   
 12164	  * If the package name contains more than one hyphen (i.e.,
 12165	    "lsb-www.redhat.com-redhat-database", "lsb-gnome-gnumeric"), then the
 12166	    portion of the package name between first and second hyphens must either be
 12167	    an LSB provider name assigned by the LANANA, or it may be one of the
 12168	    owners' fully-qualified domain name in lower case (e.g., "debian.org",
 12169	    "staroffice.sun.com"). The LSB provider name assigned by LANANA must only
 12170	    consist of the ASCII characters [a-z0-9].
 12171	   
 12172	-------------------------------------------------------------------------------
 12173	
 12174	Package Dependencies
 12175	
 12176	Packages must depend on a dependency "lsb". They may not depend on other
 12177	system-provided dependencies. If a package includes "Provides" it must only
 12178	provide a virtual package name which is registered to that application.
 12179	
 12180	VIII. Commands and Utilities
 12181	
 12182	Table of Contents
 12183	14. Command and Utilities
 12184	
 12185	-------------------------------------------------------------------------------
 12186	
 12187	Chapter 14. Command and Utilities
 12188	
 12189	Command and Utilities
 12190	
 12191	 The following table lists the Commands and Utilities. Unless otherwise
 12192	specified the command or utility is described in the Single UNIX Specification
 12193	(SUS). When an interface is not defined in the SUS, then the next prevailing
 12194	standard is referenced (ie., POSIX, SVID). 
 12195	
 12196	The behavior of the interfaces described in this section are specified by the
 12197	following standards.
 12198	
 12199	Linux Standard Base [37]                                                       
 12200	CAE Specification, January 1997, Commands and Utilities (XCU), Issue 5 (ISBN:  
 12201	1-85912-191-8, C604) [38]                                                      
 12202	
 12203	Table 14-1. Commands and Utilities
 12204	
 12205	+------------------------------------------------------------------------+
 12206	|ar [37]     |at [37]      |awk [37]     |basename [38]   |batch [37]    |
 12207	|------------+-------------+-------------+----------------+--------------|
 12208	|bc [37]     |cat [37]     |chfn [37]    |chgrp [37]      |chmod [37]    |
 12209	|------------+-------------+-------------+----------------+--------------|
 12210	|chown [38]  |chsh [37]    |cksum [38]   |cmp [38]        |col [37]      |
 12211	|------------+-------------+-------------+----------------+--------------|
 12212	|comm [38]   |cp [37]      |cpio [37]    |crontab [37]    |csplit [37]   |
 12213	|------------+-------------+-------------+----------------+--------------|
 12214	|cut [37]    |date [37]    |dd [37]      |df [37]         |diff [37]     |
 12215	|------------+-------------+-------------+----------------+--------------|
 12216	|dirname [38]|du [37]      |echo [37]    |egrep [37]      |env [37]      |
 12217	|------------+-------------+-------------+----------------+--------------|
 12218	|expand [37] |expr [37]    |false [38]   |fgrep [37]      |file [37]     |
 12219	|------------+-------------+-------------+----------------+--------------|
 12220	|find [37]   |fold [38]    |fuser [37]   |gencat [37]     |getconf [38]  |
 12221	|------------+-------------+-------------+----------------+--------------|
 12222	|grep [37]   |groupadd [37]|groupdel [37]|groupmod [37]   |groups [37]   |
 12223	|------------+-------------+-------------+----------------+--------------|
 12224	|gunzip [37] |gzip [37]    |head [37]    |hostname [37]   |iconv [37]    |
 12225	|------------+-------------+-------------+----------------+--------------|
 12226	|id [38]     |install [37] |ipcrm [37]   |ipcs [37]       |join [38]     |
 12227	|------------+-------------+-------------+----------------+--------------|
 12228	|kill [38]   |killall [37] |ln [37]      |locale [38]     |localedef [38]|
 12229	|------------+-------------+-------------+----------------+--------------|
 12230	|logname [38]|lpr [37]     |ls [37]      |lsb_release [37]|m4 [37]       |
 12231	|------------+-------------+-------------+----------------+--------------|
 12232	|make [37]   |man [37]     |md5sum [37]  |mkdir [37]      |mkfifo [38]   |
 12233	|------------+-------------+-------------+----------------+--------------|
 12234	|mknod [37]  |mktemp [37]  |more [37]    |mount [37]      |mv [37]       |
 12235	|------------+-------------+-------------+----------------+--------------|
 12236	|newgrp [37] |nice [37]    |nl [37]      |nohup [37]      |od [37]       |
 12237	|------------+-------------+-------------+----------------+--------------|
 12238	|passwd [37] |paste [37]   |patch [37]   |pathchk [37]    |pidof [37]    |
 12239	|------------+-------------+-------------+----------------+--------------|
 12240	|pr [37]     |printf [37]  |ps [38]      |pwd [37]        |renice [37]   |
 12241	|------------+-------------+-------------+----------------+--------------|
 12242	|rm [37]     |rmdir [37]   |rsync [37]   |sed [37]        |sendmail [37] |
 12243	|------------+-------------+-------------+----------------+--------------|
 12244	|sh [38]     |sleep [37]   |sort [37]    |split [37]      |strip [37]    |
 12245	|------------+-------------+-------------+----------------+--------------|
 12246	|stty [38]   |su [37]      |sum [37]     |sync [37]       |tail [37]     |
 12247	|------------+-------------+-------------+----------------+--------------|
 12248	|tar [37]    |tee [37]     |test [37]    |time [37]       |touch [37]    |
 12249	|------------+-------------+-------------+----------------+--------------|
 12250	|tr [37]     |true [38]    |tsort [38]   |tty [37]        |umount [37]   |
 12251	|------------+-------------+-------------+----------------+--------------|
 12252	|uname [37]  |unexpand [37]|uniq [37]    |useradd [37]    |userdel [37]  |
 12253	|------------+-------------+-------------+----------------+--------------|
 12254	|usermod [37]|wc [37]      |xargs [37]   |                |              |
 12255	+------------------------------------------------------------------------+
 12256	-------------------------------------------------------------------------------
 12257	
 12258	Command Behavior
 12259	
 12260	Table of Contents
 12261	ar -- create and maintain library archives
 12262	at -- examine or delete jobs for later execution
 12263	awk -- pattern scanning and processing language
 12264	batch -- execute commands when the system load permits
 12265	bc -- An arbitrary precision calculator language
 12266	cat -- concatenate and print files
 12267	chfn -- change user name and information
 12268	chgrp -- change group ownership
 12269	chmod -- change file access permissions
 12270	chown -- change file owner and group
 12271	chsh -- change login shell
 12272	col -- filter reverse line feeds from input
 12273	cp -- copy files and directories
 12274	cpio -- copy file archives in and out
 12275	csplit -- split a file into sections determined by context lines
 12276	crontab -- maintain crontab files for individual users
 12277	cut -- split a file into sections determined by context lines
 12278	date -- print or set the system date and time
 12279	dd -- convert and copy a file
 12280	df -- report filesystem disk space usage
 12281	diff -- find differences between two files
 12282	dmesg -- print or control the kernel ring buffer
 12283	du -- estimate file space usage
 12284	echo -- display a line of text
 12285	egrep -- search a file with an ERE pattern
 12286	env -- run a program in a modified environment
 12287	expand -- convert tabs to spaces
 12288	expr -- evaluate expressions
 12289	fgrep -- search a file with an ERE pattern
 12290	file -- determine file type
 12291	find -- search for files in a directory hierarchy
 12292	fuser -- identify processes using files or sockets
 12293	gencat -- generate a formatted message catalogue
 12294	grep -- print lines matching a pattern
 12295	groupadd -- create a new group
 12296	groupdel -- delete a group
 12297	groupmod -- modify a group
 12298	groups -- display a group
 12299	gzip -- compress or expand files
 12300	gunzip -- uncompress files
 12301	head -- output the first part of files
 12302	hostname -- show the system's host name
 12303	iconv -- convert file character encoding
 12304	install -- copy files and set attributes
 12305	ipcrm -- provide information on ipc facilities
 12306	ipcs -- provide information on ipc facilities
 12307	killall -- kill processes by name
 12308	ln -- make links between files
 12309	localedef -- compile locale definition files
 12310	login -- begin session on the system (LSB DEPRICATED)
 12311	lpr -- off line print
 12312	ls -- list directory contents
 12313	lsb_release -- print distribution specific information
 12314	m4 -- macro processor
 12315	make -- maintain, update and regenerate groups of programs
 12316	man -- display system documentation
 12317	md5sum -- generates or checks MD5 message digests
 12318	mkdir -- make directories
 12319	mknod -- make block or character special files
 12320	mktemp -- make temporary file name (unique)
 12321	more -- file perusal filter for crt viewing
 12322	mount -- mount a file system
 12323	mv -- move (rename) files
 12324	newgrp -- change group ID
 12325	nice -- run a program with modified scheduling priority
 12326	nl -- number lines of files
 12327	nohup -- runs a command immune to hangups, with output to a non-tty
 12328	od -- dump files in octal and other formats
 12329	passwd -- change user password
 12330	paste -- merge lines of files
 12331	patch -- apply a diff file to an original
 12332	pathchk -- check whether file names are valid or portable
 12333	pidof -- find the process ID of a running program
 12334	pr -- split a file into sections determined by context lines
 12335	printf -- format and print data
 12336	pwd -- print name of current/working directory
 12337	renice -- alter priority of running processes
 12338	rm -- remove files or directories
 12339	rmdir -- remove empty directories
 12340	rsync -- faster, flexible replacement for rcp
 12341	sed -- stream editor
 12342	sendmail -- an electronic mail transport agent
 12343	shutdown -- bring the system down
 12344	sleep -- delay for a specified amount of time
 12345	sort -- sort, merge or sequence check text files
 12346	split -- split a file into pieces
 12347	strip -- remove unnecessary information from executable files
 12348	su -- change user ID or become super-user
 12349	sum -- print checksum and block count of a file
 12350	sync -- flush filesystem buffers
 12351	tail -- output the last part of files
 12352	tar -- file archiver
 12353	tee -- read from standard input and write to standard output and files
 12354	test -- check file types and compare values
 12355	time -- run programs and summarize system resource usage
 12356	touch -- change file access and modification times
 12357	tr -- translate or delete characters
 12358	tty -- print the file name of the terminal connected to standard input
 12359	umount -- unmount file systems
 12360	uname -- return system name
 12361	unexpand -- convert spaces to tabs
 12362	uniq -- remove duplicate lines from a sorted file
 12363	useradd -- create a new user or update default new user information
 12364	userdel -- delete a user account and related files
 12365	usermod -- modify a user account
 12366	wc -- print the number of bytes, words, and lines in files
 12367	xargs -- build and execute command lines from standard input
 12368	
 12369	This section contains descriptions for commands and utilities whose specified
 12370	behavior in the LSB contradicts or extends the standards referenced. It also
 12371	contains commands and utilities only required by the LSB and not specified by
 12372	other standards.
 12373	
 12374	ar
 12375	
 12376	Name
 12377	
 12378	ar -- create and maintain library archives
 12379	
 12380	Description
 12381	
 12382	ar is as specified in the SUS but with differences as listed below.
 12383	
 12384	Differences
 12385	
 12386	-T, -C
 12387	   
 12388	    need not be accepted.
 12389	   
 12390	-l
 12391	   
 12392	    has implementation-dependent behavior.
 12393	   
 12394	-q
 12395	   
 12396	    has implementation-dependent behavior; using -r is suggested.
 12397	   
 12398	at
 12399	
 12400	Name
 12401	
 12402	at -- examine or delete jobs for later execution
 12403	
 12404	Description
 12405	
 12406	at is as specified in the SUS but with differences as listed below.
 12407	
 12408	Differences
 12409	
 12410	-c
 12411	   
 12412	    cats the jobs listed on the command line to standard output.
 12413	   
 12414	-d
 12415	   
 12416	    is functionally equivalent to the -r option specified in the SUS.
 12417	   
 12418	-r
 12419	   
 12420	    is not supported, but the '-d' option is equivalent.
 12421	   
 12422	-t time
 12423	   
 12424	    is not supported.
 12425	   
 12426	-V
 12427	   
 12428	    prints the version number to standard error.
 12429	   
 12430	-v
 12431	   
 12432	    shows the time the job will be executed.
 12433	   
 12434	Files
 12435	
 12436	The files at.allow and at.deny reside in /etc rather than /usr/lib/cron.
 12437	
 12438	awk
 12439	
 12440	Name
 12441	
 12442	awk -- pattern scanning and processing language
 12443	
 12444	Description
 12445	
 12446	awk is as specified in the SUS with no differences. gawk and mawk are
 12447	SUS-compliant implementations of the awk language.
 12448	
 12449	batch
 12450	
 12451	Name
 12452	
 12453	batch -- execute commands when the system load permits
 12454	
 12455	Synopsis
 12456	
 12457	batch [-V] [-q queue] [-f file] [-mv] [TIME]
 12458	
 12459	Description
 12460	
 12461	batch reads commands from standard input or a specified file which are to be
 12462	executed at a later time, using /bin/sh.
 12463	
 12464	Differences
 12465	
 12466	-f file
 12467	   
 12468	    reads the job from file rather than standard input.
 12469	   
 12470	-m
 12471	   
 12472	    sends mail to the user when the job has completed even if there was no
 12473	    output.
 12474	   
 12475	-q queue
 12476	   
 12477	    uses the specified queue. A queue designation consists of a single letter;
 12478	    valid queue designations range from a to z. and A to Z. The a queue is the
 12479	    default for at and the b queue for batch. Queues with higher letters run
 12480	    with increased niceness. The special queue "=" is reserved for jobs which
 12481	    are currently running.
 12482	   
 12483	-V
 12484	   
 12485	    prints the version number to standard error.
 12486	   
 12487	-v
 12488	   
 12489	    shows the time the job will be executed.
 12490	   
 12491	Files
 12492	
 12493	The files at.allow and at.deny reside in /etc rather than /usr/lib/cron.
 12494	
 12495	bc
 12496	
 12497	Name
 12498	
 12499	bc -- An arbitrary precision calculator language
 12500	
 12501	Description
 12502	
 12503	bc is as specified in the SUS but with differences as listed below.
 12504	
 12505	Differences
 12506	
 12507	-q, --quiet
 12508	   
 12509	    does not print the normal welcome message.
 12510	   
 12511	-s, --standard
 12512	   
 12513	    processes exactly the POSIX bc language.
 12514	   
 12515	-v, --version
 12516	   
 12517	    prints the version number and copyright and quits.
 12518	   
 12519	-w, --warn
 12520	   
 12521	    gives warnings for extensions to POSIX bc.
 12522	   
 12523	cat
 12524	
 12525	Name
 12526	
 12527	cat -- concatenate and print files
 12528	
 12529	Description
 12530	
 12531	cat is as specified in the SUS but with differences as listed below.
 12532	
 12533	Differences
 12534	
 12535	-A, --show-all
 12536	   
 12537	    is equivalent to -vET.
 12538	   
 12539	-b, --number-nonblank
 12540	   
 12541	    numbers nonblank output lines.
 12542	   
 12543	-e
 12544	   
 12545	    is equivalent to -vE.
 12546	   
 12547	-E, --show-ends
 12548	   
 12549	    displays $ at end of each line.
 12550	   
 12551	-n, --number
 12552	   
 12553	    numbers all output lines.
 12554	   
 12555	-s, --squeeze-blank
 12556	   
 12557	    displays never more than one single blank line.
 12558	   
 12559	-t
 12560	   
 12561	    is equivalent to -vT.
 12562	   
 12563	-T, --showtabs
 12564	   
 12565	    displays TAB characters as ^I.
 12566	   
 12567	-u
 12568	   
 12569	    has implementation-dependent behavior.
 12570	   
 12571	-v, --show-nonprinting
 12572	   
 12573	    uses ^ and M- notation, except for LFD and TAB.
 12574	   
 12575	--version
 12576	   
 12577	    outputs version information and exits.
 12578	   
 12579	chfn
 12580	
 12581	Name
 12582	
 12583	chfn -- change user name and information
 12584	
 12585	Synopsis
 12586	
 12587	chfn [-f full_name] [-r room_no]
 12588	     [-w work_ph] [-h home_ph] [-o other] [user]
 12589	
 12590	Description
 12591	
 12592	chfn changes user fullname, office number, office extension, and home phone
 12593	number information for a user's account. This information is typically printed
 12594	by finger and similar programs. A normal user may only change the fields for
 12595	their own account, the super user may change the fields for any account. Also,
 12596	only the super user may use the -o option to change the undefined portions of
 12597	the GCOS field.
 12598	
 12599	The only restrictions placed on the contents of the fields is that no control
 12600	characters may be present, nor any of comma, colon, or equal sign. The other
 12601	field does not have this restriction, and is used to store accounting
 12602	information used by other applications.
 12603	
 12604	If none of the options are selected, chfn operates in an interactive fashion.
 12605	The prompts and expected input in interactive mode are implementation-dependent
 12606	and should not be relied upon.
 12607	
 12608	As it is possible for the system to be configured to restrict which fields a
 12609	non-privileged user is permitted to change, applications should be written to
 12610	gracefully handle these situations.
 12611	
 12612	Standard Options
 12613	
 12614	-f full_name
 12615	   
 12616	    sets the user's full name.
 12617	   
 12618	-r room_no
 12619	   
 12620	    sets the user's room number.
 12621	   
 12622	-w work_ph
 12623	   
 12624	    sets the user's work phone number.
 12625	   
 12626	-h home_ph
 12627	   
 12628	    sets the user's home phone number.
 12629	   
 12630	-o other
 12631	   
 12632	    sets the contents of the other field.
 12633	   
 12634	chgrp
 12635	
 12636	Name
 12637	
 12638	chgrp -- change group ownership
 12639	
 12640	Synopsis
 12641	
 12642	chgrp [OPTION]... GROUP FILE...
 12643	chgrp [OPTION]... --reference=RFILE FILE...
 12644	
 12645	Description
 12646	
 12647	chgrp is as specified in the SUS but with differences as listed below.
 12648	
 12649	Differences
 12650	
 12651	-c, --changes
 12652	   
 12653	    is like verbose, but reports only when a change is made.
 12654	   
 12655	--dereference
 12656	   
 12657	    affects the referent of each symbolic link, rather than the symbolic link
 12658	    itself.
 12659	   
 12660	-h, --no-dereference
 12661	   
 12662	    affects symbolic links instead of any referenced file. (Available only on
 12663	    systems that can change the ownership of a symlink.)
 12664	   
 12665	-f, --silent, --quiet
 12666	   
 12667	    suppresses most error messages.
 12668	   
 12669	--reference=RFILE
 12670	   
 12671	    uses RFILE's group rather than the specified GROUP value.
 12672	   
 12673	-v, --verbose
 12674	   
 12675	    outputs a diagnostic for every file processed.
 12676	   
 12677	--version
 12678	   
 12679	    outputs version information and exit.
 12680	   
 12681	chmod
 12682	
 12683	Name
 12684	
 12685	chmod -- change file access permissions
 12686	
 12687	Synopsis
 12688	
 12689	chmod [OPTION]... MODE[,MODE]... FILE...
 12690	chmod [OPTION]... OCTAL-MODE FILE...
 12691	chmod [OPTION]... --reference=RFILE FILE...
 12692	
 12693	Description
 12694	
 12695	chmod is as specified in the SUS but with differences as listed below.
 12696	
 12697	Differences
 12698	
 12699	-c, --changes
 12700	   
 12701	    is like verbose, but reports only when a change is made.
 12702	   
 12703	-f, --silent, --quiet
 12704	   
 12705	    suppresses most error messages.
 12706	   
 12707	--reference=RFILE
 12708	   
 12709	    uses RFILE's mode instead of MODE values.
 12710	   
 12711	-v, --verbose
 12712	   
 12713	    outputs a diagnostic for every file processed.
 12714	   
 12715	--version
 12716	   
 12717	    outputs version information and exits.
 12718	   
 12719	chown
 12720	
 12721	Name
 12722	
 12723	chown -- change file owner and group
 12724	
 12725	Synopsis
 12726	
 12727	chown [OPTION]... OWNER[:[GROUP]] FILE...
 12728	chown [OPTION]... :GROUP FILE...
 12729	chown [OPTION]... --reference=RFILE FILE...
 12730	
 12731	Description
 12732	
 12733	chown is as specified in the SUS but with differences as listed below.
 12734	
 12735	Differences
 12736	
 12737	-c, --changes
 12738	   
 12739	    is like verbose, but reports only when a change is made.
 12740	   
 12741	--dereference
 12742	   
 12743	    affects the referent of each symbolic link, rather than the symbolic link
 12744	    itself.
 12745	   
 12746	-h, --no-dereference
 12747	   
 12748	    affects symbolic links instead of any referenced file. (Available only on
 12749	    systems that can change the ownership of a symlink.)
 12750	   
 12751	--from=CURRENT_OWNER:CURRENT_GROUP
 12752	   
 12753	    changes the owner and/or group of each file only if its current owner and/
 12754	    or group match those specified here. Either may be omitted, in which case a
 12755	    match is not required for the omitted attribute.
 12756	   
 12757	-f, --silent, --quiet
 12758	   
 12759	    suppresses most error messages.
 12760	   
 12761	--reference=RFILE
 12762	   
 12763	    uses RFILE's owner and group rather than the specified OWNER:GROUP values.
 12764	   
 12765	-v, --verbose
 12766	   
 12767	    outputs a diagnostic for every file processed.
 12768	   
 12769	--version
 12770	   
 12771	    outputs version information and exits.
 12772	   
 12773	Note
 12774	
 12775	The use of the '.' character as a separator between the specification of the
 12776	user name and group name is supported (in addition to the use of the ':'
 12777	character as specified in the SUS).
 12778	
 12779	chsh
 12780	
 12781	Name
 12782	
 12783	chsh -- change login shell
 12784	
 12785	Synopsis
 12786	
 12787	chsh [-s login_shell] [user]
 12788	
 12789	Description
 12790	
 12791	chsh changes the user login shell. This determines the name of the user's
 12792	initial login command. A normal user may only change the login shell for their
 12793	own account, the super user may change the login shell for any account.
 12794	
 12795	The only restrictions placed on the login shell is that the command name must
 12796	be listed in /etc/shells, unless the invoker is the super-user, and then any
 12797	value may be added. An account with a restricted login shell may not change
 12798	their login shell.
 12799	
 12800	If the -s option is not selected, chsh operates in an interactive mode. The
 12801	prompts and expected input in this mode are implementation-defined.
 12802	
 12803	Standard Options
 12804	
 12805	-s login_shell
 12806	   
 12807	    sets the login shell.
 12808	   
 12809	col
 12810	
 12811	Name
 12812	
 12813	col -- filter reverse line feeds from input
 12814	
 12815	Note
 12816	
 12817	col -p option has implementation-dependent behavior.
 12818	
 12819	cp
 12820	
 12821	Name
 12822	
 12823	cp -- copy files and directories
 12824	
 12825	Synopsis
 12826	
 12827	Description
 12828	
 12829	cp is as specified in the SUS but with differences as listed below.
 12830	
 12831	Differences
 12832	
 12833	-a archive
 12834	   
 12835	    is the same as -dpR.
 12836	   
 12837	--backup[=CONTROL]
 12838	   
 12839	    makes a backup of each existing destination file.
 12840	   
 12841	-b
 12842	   
 12843	    is like --backup but does not accept an argument.
 12844	   
 12845	-d, --no-dereference
 12846	   
 12847	    never follows symbolic links.
 12848	   
 12849	-H
 12850	   
 12851	    follows command-line symbolic links.
 12852	   
 12853	-l, --link
 12854	   
 12855	    links files instead of copying.
 12856	   
 12857	-L, --dereference
 12858	   
 12859	    always follows symbolic links.
 12860	   
 12861	--parents
 12862	   
 12863	    appends source path to DIRECTORY.
 12864	   
 12865	--remove-destination
 12866	   
 12867	    removes each existing destination file before attempting to open it.
 12868	    (Contrast with --force.)
 12869	   
 12870	--sparse=WHEN
 12871	   
 12872	    controls creation of sparse files.
 12873	   
 12874	    By default, sparse SOURCE files are detected by a crude heuristic and the
 12875	    corresponding DEST file is made sparse as well. That is the behavior
 12876	    selected by --sparse=auto. Specify --sparse=always to create a sparse DEST
 12877	    file whenever the SOURCE file contains a long enough sequence of zero
 12878	    bytes. Use --sparse=never to inhibit creation of sparse files.
 12879	   
 12880	--strip-trailing-slashes
 12881	   
 12882	    removes any trailing slashes from each SOURCE argument.
 12883	   
 12884	-s, --symbolic-link
 12885	   
 12886	    makes symbolic links instead of copying.
 12887	   
 12888	-S, --suffix=SUFFIX
 12889	   
 12890	    overrides the usual backup suffix.
 12891	   
 12892	--target-directory=DIRECTORY
 12893	   
 12894	    moves all SOURCE arguments into DIRECTORY.
 12895	   
 12896	-u, --update
 12897	   
 12898	    copies only when the SOURCE file is newer than the destination file or when
 12899	    the destination file is missing.
 12900	   
 12901	-v, --verbose
 12902	   
 12903	    explains what is being done.
 12904	   
 12905	-x, --one-file-system
 12906	   
 12907	    stays on this file system.
 12908	   
 12909	--version
 12910	   
 12911	    outputs version information and exits.
 12912	   
 12913	cpio
 12914	
 12915	Name
 12916	
 12917	cpio -- copy file archives in and out
 12918	
 12919	Description
 12920	
 12921	cpio is as specified in the SUS. While additional features may be found in
 12922	Linux versions of this command, the SUS-specified interface is correctly and
 12923	completely implemented.
 12924	
 12925	csplit
 12926	
 12927	Name
 12928	
 12929	csplit -- split a file into sections determined by context lines
 12930	
 12931	Description
 12932	
 12933	csplit is as specified in the SUS but with differences as listed below.
 12934	
 12935	Differences
 12936	
 12937	-b, --sufix-format=FORMAT
 12938	   
 12939	    uses sprintf FORMAT instead of %d.
 12940	   
 12941	--quiet, --silent
 12942	   
 12943	    are equivalent to the -s option as specified in the SUS.
 12944	   
 12945	-z, --elide-empty-files
 12946	   
 12947	    removes empty output files.
 12948	   
 12949	--version
 12950	   
 12951	    outputs version information and exit.
 12952	   
 12953	crontab
 12954	
 12955	Name
 12956	
 12957	crontab -- maintain crontab files for individual users
 12958	
 12959	Synopsis
 12960	
 12961	crontab [ -u user ] file
 12962	crontab [ -u user ] { -l | -r | -e }
 12963	
 12964	Description
 12965	
 12966	crontab is as specified in the SUS but with differences as listed below.
 12967	
 12968	Differences
 12969	
 12970	-u user
 12971	   
 12972	    specifies the name of the user whose crontab is to be used, rather than the
 12973	    user who is running crontab.
 12974	   
 12975	Files
 12976	
 12977	The files cron.allow and cron.deny reside in /etc rather than /usr/lib/cron.
 12978	
 12979	cut
 12980	
 12981	Name
 12982	
 12983	cut -- split a file into sections determined by context lines
 12984	
 12985	Description
 12986	
 12987	cut is as specified in the SUS but with differences as listed below.
 12988	
 12989	Differences
 12990	
 12991	-n
 12992	   
 12993	    has implementation-dependent behavior.
 12994	   
 12995	--version
 12996	   
 12997	    outputs version information and exits.
 12998	   
 12999	date
 13000	
 13001	Name
 13002	
 13003	date -- print or set the system date and time
 13004	
 13005	Description
 13006	
 13007	date is as specified in the SUS but with differences as listed below.
 13008	
 13009	Differences
 13010	
 13011	-d, --date=STRING
 13012	   
 13013	    displays time described by STRING, not now.
 13014	   
 13015	-f, --file=DATAFILE
 13016	   
 13017	    is like --date once for each line of DATEFILE.
 13018	   
 13019	-r, --reference=FILE
 13020	   
 13021	    displays the last modification time of FILE.
 13022	   
 13023	-R, --rfc-822
 13024	   
 13025	    outputs RFC2822-compliant date string.
 13026	   
 13027	-s, --set=STRING
 13028	   
 13029	    sets time described by STRING.
 13030	   
 13031	--utc, --universal
 13032	   
 13033	    is equivalent to the -u option as specified in the SUS.
 13034	   
 13035	--version
 13036	   
 13037	    outputs version information and exits.
 13038	   
 13039	dd
 13040	
 13041	Name
 13042	
 13043	dd -- convert and copy a file
 13044	
 13045	Description
 13046	
 13047	dd is as specified in the SUS but with differences as listed below.
 13048	
 13049	Differences
 13050	
 13051	SWAB
 13052	   
 13053	    is a keyword to the CONV= option causing alternate bytes to be swapped. The
 13054	    treatment of the odd character is implementation-dependent.
 13055	   
 13056	df
 13057	
 13058	Name
 13059	
 13060	df -- report filesystem disk space usage
 13061	
 13062	Description
 13063	
 13064	df is as specified in the SUS but with the variations listed in the Differences
 13065	section below, and as follows.
 13066	
 13067	Disk space is shown in 1K blocks by default, unless the environment variable
 13068	POSIXLY_CORRECT is set, in which case 512-byte blocks are used.
 13069	
 13070	If an argument is the absolute file name of a disk device node containing a
 13071	mounted filesystem, df shows the space available on that filesystem rather than
 13072	on the filesystem containing the device node (which is always the root
 13073	filesystem).
 13074	
 13075	Differences
 13076	
 13077	-a, --all
 13078	   
 13079	    includes filesystems having 0 blocks.
 13080	   
 13081	--block-size=SIZE
 13082	   
 13083	    uses SIZE-byte blocks.
 13084	   
 13085	-h, --human-readable
 13086	   
 13087	    prints sizes in human-readable format (e.g., 1K, 234M, 2G).
 13088	   
 13089	-H, --si
 13090	   
 13091	    prints sizes in human-readable format, but uses powers of 1000 (not 1024).
 13092	   
 13093	-i, --inodes
 13094	   
 13095	    lists inode information instead of block usage.
 13096	   
 13097	-l, --local
 13098	   
 13099	    limits listing to local filesystems.
 13100	   
 13101	-m, --megabytes
 13102	   
 13103	    is like --block-size=1048576
 13104	   
 13105	--no-sync
 13106	   
 13107	    does not invoke sync before getting usage info. (default)
 13108	   
 13109	-P, --portability
 13110	   
 13111	    uses the POSIX output format.
 13112	   
 13113	--sync
 13114	   
 13115	    invokes sync before getting usage info.
 13116	   
 13117	-t, --type=TYPE
 13118	   
 13119	    has implementation-dependent behavior.
 13120	   
 13121	--portability
 13122	   
 13123	    is same as -P as specified in the SUS.
 13124	   
 13125	--sync
 13126	   
 13127	    invokes sync before getting usage info.
 13128	   
 13129	-t, --type=TYPE
 13130	   
 13131	    limits listing to filesystems of type TYPE. (Different from behavior as
 13132	    specified in the SUS.)
 13133	   
 13134	-T, --print-type
 13135	   
 13136	    prints filesystem type.
 13137	   
 13138	-x, --exclude-type=TYPE
 13139	   
 13140	    limits listing to filesystems not of type TYPE.
 13141	   
 13142	diff
 13143	
 13144	Name
 13145	
 13146	diff -- find differences between two files
 13147	
 13148	Description
 13149	
 13150	diff is as specified in the SUS but with differences as listed below.
 13151	
 13152	Differences
 13153	
 13154	-a
 13155	   
 13156	    treats all files as text and compares them line-by-line, even if they do
 13157	    not seem to be text.
 13158	   
 13159	-B
 13160	   
 13161	    ignores changes that just insert or delete blank lines.
 13162	   
 13163	--brief
 13164	   
 13165	    reports only whether the files differ, not the details of the differences.
 13166	   
 13167	--context[=lines]
 13168	   
 13169	    is equivalent to -C as specified in the SUS.
 13170	   
 13171	-d
 13172	   
 13173	    changes the algorithm to perhaps find a smaller set of changes; this makes 
 13174	    diff slower (sometimes much slower).
 13175	   
 13176	-D name
 13177	   
 13178	    makes merged if-then-else format output conditional on the preprocessor
 13179	    macro name.
 13180	   
 13181	--ed
 13182	   
 13183	    is equivalent to -e as specified in the SUS.
 13184	   
 13185	--exclude=pattern
 13186	   
 13187	    when comparing directories, ignores files and subdirectories whose
 13188	    basenames match pattern.
 13189	   
 13190	--exclude-from=file
 13191	   
 13192	    when comparing directories, ignores files and subdirectories whose
 13193	    basenames match any pattern contained in file.
 13194	   
 13195	--expand-tabs
 13196	   
 13197	    expands tabs to spaces in the output to preserve the alignment of tabs in
 13198	    the input files.
 13199	   
 13200	-F regexp
 13201	   
 13202	    in context and unified format, shows some of the last preceding line that
 13203	    matches regexp for each hunk of differences.
 13204	   
 13205	--forward-ed
 13206	   
 13207	    makes output that looks vaguely like an ed script, but has changes in the
 13208	    order they appear in the file.
 13209	   
 13210	-H
 13211	   
 13212	    uses heuristics to speed handling of large files that have numerous
 13213	    scattered small changes.
 13214	   
 13215	--horizon-lines=lines
 13216	   
 13217	    does not discard the last lines lines of the common prefix and the first
 13218	    lines lines of the common suffix.
 13219	   
 13220	-i
 13221	   
 13222	    ignores changes in case; considers upper and lower case letters equivalent.
 13223	   
 13224	-I regexp
 13225	   
 13226	    ignores changes that just insert or delete lines that match regexp.
 13227	   
 13228	--ifdef=name
 13229	   
 13230	    makes merged if-then-else format output conditional on the preprocessor
 13231	    macro name.
 13232	   
 13233	--ignore-all-space
 13234	   
 13235	    ignores white space when comparing lines.
 13236	   
 13237	--ignore-case
 13238	   
 13239	    ignores changes in case; considers upper and lower case to be the same.
 13240	   
 13241	--ignore-matching-lines=regexp
 13242	   
 13243	    ignores changes that just insert or delete lines that match regexp.
 13244	   
 13245	--ignore-space-change
 13246	   
 13247	    ignores changes in amount of white space.
 13248	   
 13249	--initial-tab
 13250	   
 13251	    outputs a tab rather than a space before the text of a line in normal or
 13252	    context format. This causes the alignment of tabs in the line to look
 13253	    normal.
 13254	   
 13255	-l
 13256	   
 13257	    passes the output through pr to paginate it.
 13258	   
 13259	--ignore-case
 13260	   
 13261	    ignores changes in case; considers upper and lower case to be the same.
 13262	   
 13263	dmesg
 13264	
 13265	Name
 13266	
 13267	dmesg -- print or control the kernel ring buffer
 13268	
 13269	Synopsis
 13270	
 13271	dmesg [ -c ] [ -n level ] [ -s bufsize ]
 13272	
 13273	Description
 13274	
 13275	dmesg examines or controls the kernel ring buffer.
 13276	
 13277	Standard Options
 13278	
 13279	-c
 13280	   
 13281	    clears the ring buffer contents after printing.
 13282	   
 13283	-n level
 13284	   
 13285	    sets the level at which logging of messages is done to the console.
 13286	   
 13287	-s bufsize
 13288	   
 13289	    uses a buffer of bufsize to query the kernel ring buffer. This is 8196 by
 13290	    default (this matches the default kernel syslog buffer size in 2.0.33 and
 13291	    2.1.103). If you have set the kernel buffer to larger than the default then
 13292	    this option can be used to view the entire buffer.
 13293	   
 13294	du
 13295	
 13296	Name
 13297	
 13298	du -- estimate file space usage
 13299	
 13300	Description
 13301	
 13302	du is as specified in the SUS but with differences as listed below.
 13303	
 13304	Differences
 13305	
 13306	--block-size=SIZE
 13307	   
 13308	    uses SIZE-byte blocks.
 13309	   
 13310	-b, --bytes
 13311	   
 13312	    prints size in bytes.
 13313	   
 13314	-c, --total
 13315	   
 13316	    produces a grand total.
 13317	   
 13318	-D, --dereference-args
 13319	   
 13320	    dereferences PATHs when symbolic link.
 13321	   
 13322	-h, --human-readable
 13323	   
 13324	    prints sizes in human-readable format (e.g., 1K, 234M, 2G).
 13325	   
 13326	--kilobytes
 13327	   
 13328	    is equivalent to --block-size=1024.
 13329	   
 13330	--l, --count-links
 13331	   
 13332	    counts sizes many times if hard-linked.
 13333	   
 13334	-L, --dereference
 13335	   
 13336	    dereferences all symbolic links.
 13337	   
 13338	-m, --megabytes
 13339	   
 13340	    is equivalent to --block-size=1048576.
 13341	   
 13342	-r
 13343	   
 13344	    has implementation-dependent behavior.
 13345	   
 13346	-S, --separate-dirs
 13347	   
 13348	    does not include size of subdirectories.
 13349	   
 13350	-X FILE, --exclude-from=FILE
 13351	   
 13352	    excludes files that match any pattern in FILE.
 13353	   
 13354	--exclude=PAT
 13355	   
 13356	    excludes files that match PAT.
 13357	   
 13358	--max-depth=N
 13359	   
 13360	    prints the total for a directory (or file, with --all) only if it is N or
 13361	    fewer levels below the command line argument; --max-depth=0 is the same as
 13362	    --summarize.
 13363	   
 13364	--version
 13365	   
 13366	    outputs version information and exits.
 13367	   
 13368	echo
 13369	
 13370	Name
 13371	
 13372	echo -- display a line of text
 13373	
 13374	Synopsis
 13375	
 13376	echo [OPTION]... [STRING]... 
 13377	
 13378	Description
 13379	
 13380	Unlike the behavior specified in the SUS, echo does support options. Behavioral
 13381	differences are listed below.
 13382	
 13383	Differences
 13384	
 13385	-n
 13386	   
 13387	    does not output the trailing newline.
 13388	   
 13389	-e
 13390	   
 13391	    enables interpretation of specific backslash-escaped characters.
 13392	   
 13393	-E
 13394	   
 13395	    disables interpretation of those sequences in STRINGs.
 13396	   
 13397	--version
 13398	   
 13399	    outputs version information and exits; should be alone.
 13400	   
 13401	egrep
 13402	
 13403	Name
 13404	
 13405	egrep -- search a file with an ERE pattern
 13406	
 13407	Description
 13408	
 13409	egrep is equivalent to grep -E. For further details, see the specification for 
 13410	grep.
 13411	
 13412	env
 13413	
 13414	Name
 13415	
 13416	env -- run a program in a modified environment
 13417	
 13418	Description
 13419	
 13420	env is as specified in the SUS but with differences as listed below.
 13421	
 13422	Differences
 13423	
 13424	--ignore-environment
 13425	   
 13426	    is equivalent to -i.
 13427	   
 13428	-u, --unset=NAME
 13429	   
 13430	    removes variable from the environment.
 13431	   
 13432	expand
 13433	
 13434	Name
 13435	
 13436	expand -- convert tabs to spaces
 13437	
 13438	Description
 13439	
 13440	expand is as specified in the SUS but with differences as listed below.
 13441	
 13442	Differences
 13443	
 13444	-i, --initial
 13445	   
 13446	    does not convert TABs after non-whitespace.
 13447	   
 13448	-t, --tabs=NUMBER
 13449	   
 13450	    supplements behavior as specified in the SUS by allowing argument to
 13451	    specify the number of characters-apart tabs are (instead of 8).
 13452	   
 13453	expr
 13454	
 13455	Name
 13456	
 13457	expr -- evaluate expressions
 13458	
 13459	Description
 13460	
 13461	expr is as specified in the SUS but supports extra operands as listed below.
 13462	
 13463	Extra Operands
 13464	
 13465	match STRING REGEXP
 13466	   
 13467	    is same as STRING : REGEXP.
 13468	   
 13469	substr STRING POS LENGTH
 13470	   
 13471	    is substring of STRING, POS counted from 1.
 13472	   
 13473	index STRING CHARS
 13474	   
 13475	    is index in STRING where any CHARS is found, or 0.
 13476	   
 13477	length STRING
 13478	   
 13479	    is length of STRING.
 13480	   
 13481	quote STRING
 13482	   
 13483	    interprets TOKEN as a string, even if it is a keyword like match or an
 13484	    operator like /.
 13485	   
 13486	fgrep
 13487	
 13488	Name
 13489	
 13490	fgrep -- search a file with an ERE pattern
 13491	
 13492	Description
 13493	
 13494	fgrep is equivalent to grep -F. For further details, see the specification for 
 13495	grep.
 13496	
 13497	file
 13498	
 13499	Name
 13500	
 13501	file -- determine file type
 13502	
 13503	Description
 13504	
 13505	file is as specified in the SUS but with additional options as specified below.
 13506	
 13507	Additional Options
 13508	
 13509	-b, --brief
 13510	   
 13511	    does not prepend filenames to output lines.
 13512	   
 13513	-c, --checking-printout
 13514	   
 13515	    causes a checking printout of the parsed form of the magic file. This is
 13516	    usually used in conjunction with -m to debug a new magic file before
 13517	    installing it.
 13518	   
 13519	-f, --files-from namefile
 13520	   
 13521	    reads the names of the files to be examined from namefile (one per line)
 13522	    before the argument list. Either namefile or at least one filename argument
 13523	    must be present; to test the standard input, use `-' as a filename
 13524	    argument.
 13525	   
 13526	-i, --mime
 13527	   
 13528	    causes the file command to output mime type strings rather than the more
 13529	    traditional human-readable ones. Thus, it may say `text/plain; charset=
 13530	    us-ascii' rather than `ASCII text'. In order for this option to work, file
 13531	    changes the way it handles files recognized by the command itself (such as
 13532	    many of the text file types, directories, etc.), and makes use of an
 13533	    alternative `magic' file.
 13534	   
 13535	-k, --keep-going
 13536	   
 13537	    does not stop at the first match, keeps going.
 13538	   
 13539	-m, --magic-file list
 13540	   
 13541	    specifies an alternate list of files containing magic numbers. This can be
 13542	    a single file, or a colon-separated list of files.
 13543	   
 13544	-n, --no-buffer
 13545	   
 13546	    forces stdout to be flushed after checking each file. This is only useful
 13547	    if checking a list of files. It is intended to be used by programs that
 13548	    want filetype output from a pipe.
 13549	   
 13550	-z, --uncompress
 13551	   
 13552	    tries to look inside compressed files.
 13553	   
 13554	-L, --dereference
 13555	   
 13556	    causes symlinks to be followed.
 13557	   
 13558	-s, --special-files
 13559	   
 13560	    causes block or character special files (that are potentially problematic
 13561	    when processed by file) to be read in addition to the argument files
 13562	    ordinarily identified by stat(2). This is useful for determining the
 13563	    filesystem types of the data in raw disk partitions, which are block
 13564	    special files. This option also causes file to disregard the file size as
 13565	    reported by stat(2) since on some systems it reports a zero size for raw
 13566	    disk partitions.
 13567	   
 13568	find
 13569	
 13570	Name
 13571	
 13572	find -- search for files in a directory hierarchy
 13573	
 13574	Description
 13575	
 13576	find is as specified in the SUS but with additional options as specified below.
 13577	
 13578	Additional Options
 13579	
 13580	-daystart
 13581	   
 13582	    measures times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime) from
 13583	    the beginning of today rather than from 24 hours ago.
 13584	   
 13585	-follow
 13586	   
 13587	    dereferences symbolic links. Implies -noleaf.
 13588	   
 13589	-maxdepth levels
 13590	   
 13591	    descends at most levels (a non-negative integer) levels of directories
 13592	    below the command line arguments. -maxdepth 0 means only apply the tests
 13593	    and actions to the command line arguments.
 13594	   
 13595	-mindepth levels
 13596	   
 13597	    applies no tests or actions at levels less than levels (a non-negative
 13598	    integer). -mindepth 1 means process all files except the command line
 13599	    arguments.
 13600	   
 13601	-mount
 13602	   
 13603	    is equivalent to -xdev as specified in the SUS.
 13604	   
 13605	-noleaf
 13606	   
 13607	    does not optimize by assuming that directories contain 2 fewer
 13608	    subdirectories than their hard link count.
 13609	   
 13610	-version
 13611	   
 13612	    prints the find version number and exits.
 13613	   
 13614	-amin n
 13615	   
 13616	    displays files last accessed n minutes ago.
 13617	   
 13618	-anewer file
 13619	   
 13620	    displays files last accessed more recently than file was modified. -anewer
 13621	    is affected by -follow only if -follow comes before -anewer on the command
 13622	    line.
 13623	   
 13624	-cmin n
 13625	   
 13626	    displays files with status last changed n minutes ago.
 13627	   
 13628	-cnewer file
 13629	   
 13630	    displays files with status last changed more recently than file was
 13631	    modified. -cnewer is affected by -follow only if -follow comes before
 13632	    -cnewer on the command line.
 13633	   
 13634	-empty
 13635	   
 13636	    displays files that are empty and are either regular or directory files.
 13637	   
 13638	-false
 13639	   
 13640	    is always false.
 13641	   
 13642	-fstype type
 13643	   
 13644	    displays files on a filesystem of type type.
 13645	   
 13646	-gid n
 13647	   
 13648	    displays files with numeric group ID of n.
 13649	   
 13650	-ilname pattern
 13651	   
 13652	    is like -lname, but the match is case-insensitive.
 13653	   
 13654	-iname pattern
 13655	   
 13656	    is like -name, but the match is case-insensitive.
 13657	   
 13658	-inum n
 13659	   
 13660	    displays files with inode number of n.
 13661	   
 13662	-ipath path
 13663	   
 13664	    is like -path, but the match is case-insensitive.
 13665	   
 13666	-iregex pattern
 13667	   
 13668	    is like -regex, but the match is case-insensitive.
 13669	   
 13670	-lname
 13671	   
 13672	    displays files that are symbolic links whose contents match shell pattern
 13673	    pattern. The metacharacters do not treat / or . specially.
 13674	   
 13675	-mmin n
 13676	   
 13677	    displays files with data last modified n minutes ago.
 13678	   
 13679	-nouser
 13680	   
 13681	    displays files with numeric user ID corresponding to no user.
 13682	   
 13683	-nogroup
 13684	   
 13685	    displays files with numeric group ID corresponding to no group.
 13686	   
 13687	-path pattern
 13688	   
 13689	    displays files with name matching shell pattern pattern.
 13690	   
 13691	-perm +mode
 13692	   
 13693	    displays files with any of the permission bits mode set.
 13694	   
 13695	-regex
 13696	   
 13697	    displays files with names matching regular expression pattern. This is a
 13698	    match on the whole path, not a search.
 13699	   
 13700	-true
 13701	   
 13702	    is always true.
 13703	   
 13704	-type c
 13705	   
 13706	    supplements types as specified in the SUS with the letters l and s
 13707	    (symbolic links and sockets, respectively).
 13708	   
 13709	-uid n
 13710	   
 13711	    displays files with numeric user ID of n.
 13712	   
 13713	-used
 13714	   
 13715	    displays files last accessed n days after status was last changed.
 13716	   
 13717	-xtype c
 13718	   
 13719	    is equivalent to -type unless the file is a symbolic link. For symbolic
 13720	    links: if -follow has not been given, true if the file is a link to a file
 13721	    of type c; if -follow has been given, true if c is l. In other words, for
 13722	    symbolic links, -xtype checks the type of the file that -type does not
 13723	    check.
 13724	   
 13725	-fls file
 13726	   
 13727	    is true. Is like -ls but write to file like -fprint.
 13728	   
 13729	-fprint file
 13730	   
 13731	    is true. Prints the full file name into file file. If file does not exist
 13732	    when find is run, it is created; if it does exist, it is truncated. The
 13733	    file names `/dev/stdout' and `/dev/stderr' are handled specially; they
 13734	    refer to the standard output and standard error output, respectively.
 13735	   
 13736	-fprint0 file
 13737	   
 13738	    is true. Is like -print0 but write to file like -fprint.
 13739	   
 13740	-fprintf file format
 13741	   
 13742	    is true. Like -printf but write to file like -fprint.
 13743	   
 13744	-print0
 13745	   
 13746	    is true. Prints the full file name on the standard output, followed by a
 13747	    null character. This allows file names that contain newlines to be
 13748	    correctly interpreted by programs that process the find output.
 13749	   
 13750	-printf format
 13751	   
 13752	    is true. Prints format on the standard output, interpreting \ escapes and %
 13753	    directives. Field widths and precisions can be specified as with the printf
 13754	    C function. Unlike -print, -printf does not add a newline at the end of the
 13755	    string. The escapes and directives are:
 13756	   
 13757	    \a
 13758	       
 13759	        alarm bell.
 13760	       
 13761	    \b
 13762	       
 13763	        backspace.
 13764	       
 13765	    \c
 13766	       
 13767	        stops printing from this format immediately and flushes the output.
 13768	       
 13769	    \f
 13770	       
 13771	        form feed.
 13772	       
 13773	    \n
 13774	       
 13775	        newline.
 13776	       
 13777	    \r
 13778	       
 13779	        carriage return.
 13780	       
 13781	    \t
 13782	       
 13783	        horizontal tab.
 13784	       
 13785	    \v
 13786	       
 13787	        vertical tab.
 13788	       
 13789	    \\
 13790	       
 13791	        literal backslash (\).
 13792	       
 13793	    %%
 13794	       
 13795	        literal percent sign.
 13796	       
 13797	    %a
 13798	       
 13799	        last file access time in the format returned by the C ctime function.
 13800	       
 13801	    %Ak
 13802	       
 13803	        last file access time in the format specified by k, which is either @
 13804	        or a directive for the C strftime function. The possible values for k
 13805	        are listed below; some of them might not be available on all systems,
 13806	        due to differences in strftime between systems.
 13807	       
 13808	        @
 13809	           
 13810	            seconds since Jan. 1, 1970, 00:00 GMT.
 13811	           
 13812	        H
 13813	           
 13814	            hour (00..23).
 13815	           
 13816	        I
 13817	           
 13818	            hour (01..12).
 13819	           
 13820	        k
 13821	           
 13822	            hour ( 0..23).
 13823	           
 13824	        l
 13825	           
 13826	            hour ( 1..12).
 13827	           
 13828	        M
 13829	           
 13830	            minute (00..59).
 13831	           
 13832	        p
 13833	           
 13834	            locale's AM or PM.
 13835	           
 13836	        r
 13837	           
 13838	            time, 12-hour (hh:mm:ss [AP]M).
 13839	           
 13840	        S
 13841	           
 13842	            second (00..61).
 13843	           
 13844	        T
 13845	           
 13846	            time, 24-hour (hh:mm:ss).
 13847	           
 13848	        X
 13849	           
 13850	            locale's time representation (H:M:S).
 13851	           
 13852	        Z
 13853	           
 13854	            time zone (e.g., EDT), or nothing if no time zone is determinable.
 13855	           
 13856	        a
 13857	           
 13858	            locale's abbreviated weekday name (Sun..Sat).
 13859	           
 13860	        A
 13861	           
 13862	            locale's full weekday name, variable length (Sunday..Saturday).
 13863	           
 13864	        b
 13865	           
 13866	            locale's abbreviated month name (Jan..Dec).
 13867	           
 13868	        B
 13869	           
 13870	            locale's full month name, variable.
 13871	           
 13872	        c
 13873	           
 13874	            locale's date and time (Sat Nov 04 12:02:33 EST 1989).
 13875	           
 13876	        d
 13877	           
 13878	            day of month (01..31).
 13879	           
 13880	        D
 13881	           
 13882	            date (mm/dd/yy).
 13883	           
 13884	        h
 13885	           
 13886	            same as b.
 13887	           
 13888	        j
 13889	           
 13890	            day of year (001.366).
 13891	           
 13892	        m
 13893	           
 13894	            month (01..12).
 13895	           
 13896	        U
 13897	           
 13898	            week number of year with Sunday as first day of week (00..53).
 13899	           
 13900	        w
 13901	           
 13902	            day of week (0..6).
 13903	           
 13904	        W
 13905	           
 13906	            week number of year with Monday as first day of week (00..53).
 13907	           
 13908	        x
 13909	           
 13910	            locale's date representation (mm/dd/yy).
 13911	           
 13912	        y
 13913	           
 13914	            last two digits of year (00..99).
 13915	           
 13916	        Y
 13917	           
 13918	            year (1970...).
 13919	           
 13920	         
 13921	       
 13922	    %b
 13923	       
 13924	        file's size in 512-byte blocks (rounded up).
 13925	       
 13926	    %c
 13927	       
 13928	        last file status change time in the format returned by the C ctime
 13929	        function.
 13930	       
 13931	    %Ck
 13932	       
 13933	        last file status change time in the format specified by k, which is the
 13934	        same as for %A.
 13935	       
 13936	    %d
 13937	       
 13938	        file's depth in the directory tree; 0 means the file is a command line
 13939	        argument.
 13940	       
 13941	    %f
 13942	       
 13943	        file's name with any leading directories removed (only the last
 13944	        element).
 13945	       
 13946	    %F
 13947	       
 13948	        type of the filesystem the file is on; this value can be used for
 13949	        -fstype.
 13950	       
 13951	    %g
 13952	       
 13953	        file's group name, or numeric group ID if the group has no name.
 13954	       
 13955	    %G
 13956	       
 13957	        file's numeric group ID.
 13958	       
 13959	    %h
 13960	       
 13961	        leading directories of file's name (all but the last element).
 13962	       
 13963	    %H
 13964	       
 13965	        mommand line argument under which file was found.
 13966	       
 13967	    %i
 13968	       
 13969	        file's inode number (in decimal).
 13970	       
 13971	    %k
 13972	       
 13973	        file's size in 1K blocks (rounded up).
 13974	       
 13975	    %l
 13976	       
 13977	        object of symbolic link (empty string if file is not a symbolic link).
 13978	       
 13979	    %m
 13980	       
 13981	        file's permission bits (in octal).
 13982	       
 13983	    %n
 13984	       
 13985	        number of hard links to file.
 13986	       
 13987	    %p
 13988	       
 13989	        file's name.
 13990	       
 13991	    %P
 13992	       
 13993	        file's name with the name of the command line argument under which it
 13994	        was found removed.
 13995	       
 13996	    %s
 13997	       
 13998	        file's size in bytes.
 13999	       
 14000	    %t
 14001	       
 14002	        file's last modification time in the format returned by the C ctime
 14003	        function.
 14004	       
 14005	    %Tk
 14006	       
 14007	        file's last modification time in the format specified by k, which is
 14008	        the same as for %A.
 14009	       
 14010	    %u
 14011	       
 14012	        file's user name, or numeric user ID if the user has no name.
 14013	       
 14014	    %U
 14015	       
 14016	        file's numeric user ID.
 14017	       
 14018	     
 14019	   
 14020	-ls
 14021	   
 14022	    is true. Lists current file in ls -dils format on standard output. The
 14023	    block counts are of 1K blocks, unless the environment variable
 14024	    POSIXLY_CORRECT is set, in which case 512-byte blocks are used.
 14025	   
 14026	Extra Operators
 14027	   
 14028	    The following operators are supported in order of decreasing precedence and
 14029	    override what is specified in the SUS.
 14030	   
 14031	    ( expr )
 14032	       
 14033	        force precedence.
 14034	       
 14035	    ! expr
 14036	       
 14037	        true if expr is false
 14038	       
 14039	    -not expr
 14040	       
 14041	        same as ! expr.
 14042	       
 14043	    expr1 expr2
 14044	       
 14045	        and (implied); expr2 is not evaluated if expr1 is false.
 14046	       
 14047	    expr1 -a expr2
 14048	       
 14049	        same as expr1 expr2.
 14050	       
 14051	    expr1 -and expr2
 14052	       
 14053	        same as expr1 expr2.
 14054	       
 14055	    expr1 -o expr2
 14056	       
 14057	        or; expr2 is not evaluated if expr1 is true.
 14058	       
 14059	    expr1 -or expr2
 14060	       
 14061	        same as expr1 -o expr2.
 14062	       
 14063	    expr1, expr2
 14064	       
 14065	        list; both expr1 and expr2 are always evaluated. The value of expr1 is
 14066	        discarded; the value of the list is the value of expr2.
 14067	       
 14068	     
 14069	   
 14070	fuser
 14071	
 14072	Name
 14073	
 14074	fuser -- identify processes using files or sockets
 14075	
 14076	Description
 14077	
 14078	fuser is as specified in the SUS but with differences as listed below.
 14079	
 14080	Differences
 14081	
 14082	-a
 14083	   
 14084	    shows all files specified on the command line. By default, only files that
 14085	    are accessed by at least one process are shown.
 14086	   
 14087	-c
 14088	   
 14089	    has implementation-dependent behavior.
 14090	   
 14091	-f
 14092	   
 14093	    has implementation-dependent behavior.
 14094	   
 14095	-k
 14096	   
 14097	    kills processes accessing the file. Unless changed with -signal, SIGKILL is
 14098	    sent. An fuser process never kills itself, but may kill other fuser
 14099	    processes. The effective user ID of the process executing fuser is set to
 14100	    its real user ID before attempting to kill.
 14101	   
 14102	-i
 14103	   
 14104	    asks the user for confirmation before killing a process. This option is
 14105	    silently ignored if -k is not present too.
 14106	   
 14107	-l
 14108	   
 14109	    lists all known signal names.
 14110	   
 14111	-m
 14112	   
 14113	    name specifies a file on a mounted file system or a block device that is
 14114	    mounted. All processes accessing files on that file system are listed. If a
 14115	    directory file is specified, it is automatically changed to name/. to use
 14116	    any file system that might be mounted on that directory.
 14117	   
 14118	-n space
 14119	   
 14120	    selects a different name space. The name spaces file (file names, the
 14121	    default), udp (local UDP ports), and tcp (local TCP ports) are supported.
 14122	    For ports, either the port number or the symbolic name can be specified. If
 14123	    there is no ambiguity, the shortcut notation name/space (e.g. name/proto)
 14124	    can be used.
 14125	   
 14126	-s
 14127	   
 14128	    operates silently. -u and -v are ignored in this mode. -a must not be used
 14129	    with -s.
 14130	   
 14131	-signal
 14132	   
 14133	    uses the specified signal instead of SIGKILL when killing processes.
 14134	    Signals can be specified either by name (e.g. -HUP) or by number (e.g. -1).
 14135	   
 14136	-v
 14137	   
 14138	    verbose mode.
 14139	   
 14140	-V
 14141	   
 14142	    displays version information.
 14143	   
 14144	-
 14145	   
 14146	    resets all options and set the signal back to SIGKILL.
 14147	   
 14148	gencat
 14149	
 14150	Name
 14151	
 14152	gencat -- generate a formatted message catalogue
 14153	
 14154	Description
 14155	
 14156	gencat is as specified in the SUS but with differences as listed below.
 14157	
 14158	Differences
 14159	
 14160	-H, --header=NAME
 14161	   
 14162	    creates C header file NAME containing symbol definitions.
 14163	   
 14164	--new
 14165	   
 14166	    does not use existing catalog, forces new output file.
 14167	   
 14168	-o, --output=NAME
 14169	   
 14170	    writes output to file NAME.
 14171	   
 14172	grep
 14173	
 14174	Name
 14175	
 14176	grep -- print lines matching a pattern
 14177	
 14178	Description
 14179	
 14180	grep is as specified in the SUS but with differences as listed below.
 14181	
 14182	Differences
 14183	
 14184	-A NUM, --after-context=NUM
 14185	   
 14186	    prints NUM lines of trailing context after matching lines.
 14187	   
 14188	-a, --text
 14189	   
 14190	    processes a binary file as if it were text; this is equivalent to the
 14191	    --binary-files=text option.
 14192	   
 14193	-B NUM, --before-context=NUM
 14194	   
 14195	    prints NUM lines of leading context before matching lines.
 14196	   
 14197	-C [NUM], -NUM, --context[=NUM]
 14198	   
 14199	    prints NUM lines (default 2) of output context.
 14200	   
 14201	-b, --byte-offset
 14202	   
 14203	    prints the byte offset within the input file before each line of output.
 14204	   
 14205	--binary-files=TYPE
 14206	   
 14207	    assumes that the file is of type TYPE if its first few bytes indicate it
 14208	    contains binary data. By default, TYPE is binary, and grep normally outputs
 14209	    either a one-line message saying that a binary file matches, or no message
 14210	    if there is no match. If TYPE is without-match, grep assumes that a binary
 14211	    file does not match; this is equivalent to the -I option. If TYPE is text,
 14212	    grep processes a binary file as if it were text; this is equivalent to the
 14213	    -a option. Warning: grep --binary-files=text might output binary garbage,
 14214	    which can have nasty side effects if the output is a terminal and if the
 14215	    terminal driver interprets some of it as commands.
 14216	   
 14217	-c, --count
 14218	   
 14219	    suppresses normal output; instead, prints a count of matching lines for
 14220	    each input file. With the -v, --invert-match option (see below), counts
 14221	    non-matching lines.
 14222	   
 14223	-d ACTION, --directories=ACTION
 14224	   
 14225	    processes the input file as a directory with ACTION. By default, ACTION is
 14226	    read, which means that directories are read just as if they were ordinary
 14227	    files. If ACTION is skip, directories are silently skipped. If ACTION is
 14228	    recurse, grep reads all files under each directory, recursively; this is
 14229	    equivalent to the -r option.
 14230	   
 14231	-G, --basic-regexp
 14232	   
 14233	    interprets PATTERN as a basic regular expression. (default)
 14234	   
 14235	-H, --with-filename
 14236	   
 14237	    prints the filename for each match.
 14238	   
 14239	-h, --no-filename
 14240	   
 14241	    suppresses the prefixing of filenames on output when multiple files are
 14242	    searched.
 14243	   
 14244	-I
 14245	   
 14246	    processes a binary file as if it did not contain matching data; this is
 14247	    equivalent to the --binary-files=without-match option.
 14248	   
 14249	--ignore-case
 14250	   
 14251	    equivalent to -i.
 14252	   
 14253	-L, --files-without-match
 14254	   
 14255	    suppresses normal output; instead, prints the name of each input file from
 14256	    which no output would normally have been printed. The scanning will stop on
 14257	    the first match.
 14258	   
 14259	--files-with-matches
 14260	   
 14261	    equivalent to -l.
 14262	   
 14263	--map
 14264	   
 14265	    uses the mmap(2) system call to read input, if possible, instead of the
 14266	    default read(2) system call. In some situations, --mmap yields better
 14267	    performance. However, --mmap can cause undefined behavior (including core
 14268	    dumps) if an input file shrinks while grep is operating, or if an I/O error
 14269	    occurs.
 14270	   
 14271	--line-number
 14272	   
 14273	    equivalent to -n.
 14274	   
 14275	--quiet
 14276	   
 14277	    equivalent to -q.
 14278	   
 14279	-r, --recursive
 14280	   
 14281	    reads all files under each directory, recursively; this is equivalent to
 14282	    the -d recurse option.
 14283	   
 14284	--no-messages
 14285	   
 14286	    equivalent to -s.
 14287	   
 14288	-V, --version
 14289	   
 14290	    prints the version number of grep to standard error.
 14291	   
 14292	--invert-match
 14293	   
 14294	    equivalent to -v.
 14295	   
 14296	-w, --word-regexp
 14297	   
 14298	    selects only those lines containing matches that form whole words. The test
 14299	    is that the matching substring must either be at the beginning of the line,
 14300	    or preceded by a non-word constituent character. Similarly, it must be
 14301	    either at the end of the line or followed by a non-word constituent
 14302	    character. Word-constituent characters are letters, digits, and the
 14303	    underscore.
 14304	   
 14305	--line-regexp
 14306	   
 14307	    equivalent to -x.
 14308	   
 14309	-Z, --null
 14310	   
 14311	    outputs a zero byte (the ASCII NUL character) instead of the character that
 14312	    normally follows a file name.
 14313	   
 14314	groupadd
 14315	
 14316	Name
 14317	
 14318	groupadd -- create a new group
 14319	
 14320	Synopsis
 14321	
 14322	groupadd [-g gid [-o]] group
 14323	
 14324	Options
 14325	
 14326	-g gid [-o]
 14327	   
 14328	    specifies the numerical value of the group's ID. This value must be unique,
 14329	    unless the -o option is used. The value must be non-negative.
 14330	   
 14331	groupdel
 14332	
 14333	Name
 14334	
 14335	groupdel -- delete a group
 14336	
 14337	Synopsis
 14338	
 14339	groupdel group
 14340	
 14341	Description
 14342	
 14343	groupdel modifies the system account files, deleting all entries that refer to
 14344	group. The named group must exist.
 14345	
 14346	groupmod
 14347	
 14348	Name
 14349	
 14350	groupmod -- modify a group
 14351	
 14352	Synopsis
 14353	
 14354	groupmod [-g gid [-o]] [-n group_name ] group
 14355	
 14356	Options
 14357	
 14358	-g gid [-o]
 14359	   
 14360	    specifies the numerical value of the group's ID. This value must be unique,
 14361	    unless the -o option is used. The value must be non-negative. Any files
 14362	    which the old group ID is the file group ID must have the file group ID
 14363	    changed manually.
 14364	   
 14365	-n groupname
 14366	   
 14367	    changes the name of the group from group to group_name.
 14368	   
 14369	groups
 14370	
 14371	Name
 14372	
 14373	groups -- display a group
 14374	
 14375	Synopsis
 14376	
 14377	groups [user]
 14378	
 14379	Description
 14380	
 14381	groups displays the current group ID names or values. If the value does not
 14382	have a corresponding entry in /etc/group, the value will be displayed as the
 14383	numerical group value. The optional user parameter will display the groups for
 14384	the named user.
 14385	
 14386	gzip
 14387	
 14388	Name
 14389	
 14390	gzip -- compress or expand files
 14391	
 14392	Synopsis
 14393	
 14394	gzip [ -acdfhlLnNrtvV19 ] [-S suffix] [ name ...  ]
 14395	
 14396	Description
 14397	
 14398	gzip reduces the size of the named files using Lempel-Ziv coding (LZ77).
 14399	Whenever possible, each file is replaced by one with the extension .gz, while
 14400	keeping the same ownership modes, access and modification times. If no files
 14401	are specified, or if a file name is "-", the standard input is compressed to
 14402	the standard output. gzip will only attempt to compress regular files. In
 14403	particular, it will ignore symbolic links.
 14404	
 14405	Options
 14406	
 14407	-a, --ascii
 14408	   
 14409	    does nothing on Linux systems.
 14410	   
 14411	-c, --stdout, --to-stdout
 14412	   
 14413	    writes output on standard output; keeps original files unchanged. If there
 14414	    are several input files, the output consists of a sequence of independently
 14415	    compressed members. To obtain better compression, concatenate all input
 14416	    files before compressing them.
 14417	   
 14418	-d, --decompress, --uncompress
 14419	   
 14420	    decompresses.
 14421	   
 14422	-f, --force
 14423	   
 14424	    forces compression or decompression even if the file has multiple links or
 14425	    the corresponding file already exists, or if the compressed data is read
 14426	    from or written to a terminal. If the input data is not in a format
 14427	    recognized by gzip, and if the option --stdout is also given, copy the
 14428	    input data without change to the standard ouput: let zcat behave as cat. If
 14429	    -f is not given, and when not running in the background, gzip prompts to
 14430	    verify whether an existing file should be overwritten.
 14431	   
 14432	-l, --list
 14433	   
 14434	    lists the compressed size, uncompressed size, ration and uncompressed name
 14435	    for each compressed file. Gives the uncompressed size as -1 for files not
 14436	    in gzip format. Additionally displays method, crc and timestamp for the
 14437	    uncompress file when used in combination with --verbose.
 14438	   
 14439	    The compression methods currently supported are deflate, compress, lzh (SCO
 14440	    compress -H) and pack. The crc is given as ffffffff for a file not in gzip
 14441	    format.
 14442	   
 14443	    With --name, the uncompressed name, date and time are those stored within
 14444	    the compress file, if present.
 14445	   
 14446	    With --verbose, the size totals and compression ratio for all files is also
 14447	    displayed, unless some sizes are unknown. With --quiet, the title and
 14448	    totals lines are not displayed.
 14449	   
 14450	-L, --license
 14451	   
 14452	    displays the gzip license and quit.
 14453	   
 14454	-n, --no-name
 14455	   
 14456	    does not save the original file name and time stamp by default when
 14457	    compressing. (The original name is always saved if the name had to be
 14458	    truncated.) When decompressing, do not restore the original file name if
 14459	    present (remove only the gzip suffix from the compressed file name) and do
 14460	    not restore the original time stamp if present (copy it from the compressed
 14461	    file). This option is the default when decompressing.
 14462	   
 14463	-N, --name
 14464	   
 14465	    always saves the original file name and time stamp when compressing; this
 14466	    is the default. When decompressing, restore the original file name and time
 14467	    stamp if present. This option is useful on systems which have a limit on
 14468	    file name length or when the time stamp has been lost after a file
 14469	    transfer.
 14470	   
 14471	-q, --quiet
 14472	   
 14473	    suppresses all warnings.
 14474	   
 14475	-r, --recursive
 14476	   
 14477	    travels the directory structure recursively. If any of the file names
 14478	    specified on the command line are directories, gzip will descend into the
 14479	    directory and compress all the files it finds there (or decompress them in
 14480	    the case of gunzip).
 14481	   
 14482	-S .suf, --sufix .suf
 14483	   
 14484	    uses suffix .suf instead of .gz.
 14485	   
 14486	-t, --test
 14487	   
 14488	    checks the compressed file integrity.
 14489	   
 14490	-v, --verbose
 14491	   
 14492	    displays the name and percentage reduction for each file compressed or
 14493	    decompressed.
 14494	   
 14495	-V, --version
 14496	   
 14497	    displays the version number and compilation options, then quits.
 14498	   
 14499	-#, --fast, --best
 14500	   
 14501	    regulates the speed of compression using the specified digit #, where -1 or
 14502	    --fast indicates the fastest compression method (less compression) and -9
 14503	    or --best indicates the slowest compression method (best compression). The
 14504	    default compression level is -6 (that is, biased towards high compression
 14505	    at expense of speed).
 14506	   
 14507	gunzip
 14508	
 14509	Name
 14510	
 14511	gunzip -- uncompress files
 14512	
 14513	Description
 14514	
 14515	gunzip is equivalent to gzip -d. See the specification for gzip for further
 14516	details.
 14517	
 14518	head
 14519	
 14520	Name
 14521	
 14522	head -- output the first part of files
 14523	
 14524	Description
 14525	
 14526	head is as specified in the SUS but with additional options as specified below.
 14527	
 14528	Additional Options
 14529	
 14530	-c, --bytes=SIZE
 14531	   
 14532	    prints first SIZE bytes. SIZE may have a multiplier suffix: b for 512, k
 14533	    for 1K, m for 1 Meg.
 14534	   
 14535	--lines=NUMBER
 14536	   
 14537	    is equivalent to -n.
 14538	   
 14539	-q, --quiet, --silent
 14540	   
 14541	    does not print headers giving file names.
 14542	   
 14543	-v
 14544	   
 14545	    prints headers giving file names.
 14546	   
 14547	hostname
 14548	
 14549	Name
 14550	
 14551	hostname -- show the system's host name
 14552	
 14553	Synopsis
 14554	
 14555	hostname [-v] [-a] [--alias] [-d] [--domain] [-f] [--fqdn]
 14556	[-i] [--ip-address] [--long] [-s]  [--short]  [-y]  [--yp]
 14557	[--nis]
 14558	
 14559	hostname [-v] [-F filename] [--file filename] [hostname]
 14560	
 14561	hostname [-v] [-h] [--help] [-V] [--version]
 14562	
 14563	Description
 14564	
 14565	hostname is used to either set or display the current host or domain name of
 14566	the system. This name is used by many of the networking programs to identify
 14567	the machine. The domain name is also used by NIS/YP.
 14568	
 14569	When called without any arguments, the program displays the name of the system
 14570	as returned by the gethostname(2) function.
 14571	
 14572	When called with one argument or with the --file option, the commands set the
 14573	host name or the NIS/YP domain name. Note, that only the super-user can change
 14574	the names.
 14575	
 14576	Options
 14577	
 14578	-a, --alias
 14579	   
 14580	    displays the alias name of the host (if used).
 14581	   
 14582	-d, --domain
 14583	   
 14584	    displays the name of the DNS domain.
 14585	   
 14586	-F, --file filename
 14587	   
 14588	    reads the host name from the specified file. Comments (lines starting with
 14589	    a #) are ignored.
 14590	   
 14591	-f, --fqdn, --long
 14592	   
 14593	    displays the FQDN (Fully Qualified Domain Name).
 14594	   
 14595	-i, --ip-address
 14596	   
 14597	    displays the IP address(es) of the host.
 14598	   
 14599	-s, --short
 14600	   
 14601	    displays the short host name. This is the host name cut at the first dot.
 14602	   
 14603	-V, --version
 14604	   
 14605	    prints version information on standard output and exits successfully.
 14606	   
 14607	-v, --verbose
 14608	   
 14609	    tells what's going on.
 14610	   
 14611	-y, --yp, --nis
 14612	   
 14613	    displays the NIS domain name. If a parameter is given (or --file name) then
 14614	    root can also set a new NIS domain.
 14615	   
 14616	iconv
 14617	
 14618	Name
 14619	
 14620	iconv -- convert file character encoding
 14621	
 14622	Synopsis
 14623	
 14624	iconv -f encoding -t encoding [--list] [-o file] [--output file] [--verbose] inputfile
 14625	
 14626	Description
 14627	
 14628	iconv converts the encoding of characters in inputfile from one coded character
 14629	set to another. The result is written to standard output unless otherwise
 14630	specified by the --output option.
 14631	
 14632	Options
 14633	
 14634	-f, --from-code encoding
 14635	   
 14636	    converts characters from encoding.
 14637	   
 14638	-t, --to-code encoding
 14639	   
 14640	    converts characters to encoding.
 14641	   
 14642	--list
 14643	   
 14644	    lists known coded character sets.
 14645	   
 14646	-o, --output file
 14647	   
 14648	    specifies output file (instead of stdin).
 14649	   
 14650	--verbose
 14651	   
 14652	    prints progress information.
 14653	   
 14654	install
 14655	
 14656	Name
 14657	
 14658	install -- copy files and set attributes
 14659	
 14660	Synopsis
 14661	
 14662	install [OPTION]... SOURCE DEST           (1st format)
 14663	install [OPTION]... SOURCE... DIRECTORY   (2nd format)
 14664	install -d [OPTION]... DIRECTORY...       (3rd format)
 14665	
 14666	Description
 14667	
 14668	In the first two formats, copy SOURCE to DEST or multiple SOURCE(s) to the
 14669	existing DIRECTORY, while setting permission modes and owner/group. In the
 14670	third format, create all components of the given DIRECTORY(ies).
 14671	
 14672	Standard Options
 14673	
 14674	--backup[=CONTROL]
 14675	   
 14676	    makes a backup of each existing destination file.
 14677	   
 14678	-b
 14679	   
 14680	    is like --backup, but does not accept an argument.
 14681	   
 14682	-d, --directory
 14683	   
 14684	    treats all arguments as directory names; creates all components of the
 14685	    specified directories.
 14686	   
 14687	-D
 14688	   
 14689	    creates all leading components of DEST except the last, then copies SOURCE
 14690	    to DEST; useful in the 1st format.
 14691	   
 14692	-g, --group=GROUP
 14693	   
 14694	    sets group ownership, instead of process' current group.
 14695	   
 14696	-m, --mode=MODE
 14697	   
 14698	    sets permission mode (as in chmod), instead of rwxr-xr-x.
 14699	   
 14700	-o, --owner=OWNER
 14701	   
 14702	    sets ownership (super-user only).
 14703	   
 14704	-p, --preserve-timestamps
 14705	   
 14706	    applies access/modification times of SOURCE files to corresponding
 14707	    destination files.
 14708	   
 14709	-s, --strip
 14710	   
 14711	    strips symbol tables, only for 1st and 2nd formats.
 14712	   
 14713	-S, --suffix=SUFFIX
 14714	   
 14715	    overrides the usual backup suffix.
 14716	   
 14717	--verbose
 14718	   
 14719	    prints the name of each directory as it is created.
 14720	   
 14721	ipcrm
 14722	
 14723	Name
 14724	
 14725	ipcrm -- provide information on ipc facilities
 14726	
 14727	Synopsis
 14728	
 14729	ipcrm [ shm | msg | sem ] id...
 14730	
 14731	Description
 14732	
 14733	ipcrm removes the resource(s) specified by id.
 14734	
 14735	ipcs
 14736	
 14737	Name
 14738	
 14739	ipcs -- provide information on ipc facilities
 14740	
 14741	Synopsis
 14742	
 14743	ipcs [ -asmq ] [ -tclup ]
 14744	ipcs [ -smq ] -i id
 14745	
 14746	Description
 14747	
 14748	ipcs provides information on the ipc facilities for which the calling process
 14749	has read access.
 14750	
 14751	The -i option allows a specific resource id to be specified. Only information
 14752	on this id will be printed.
 14753	
 14754	Resource display options
 14755	
 14756	-m
 14757	   
 14758	    shared memory segments.
 14759	   
 14760	-q
 14761	   
 14762	    message queues.
 14763	   
 14764	-s
 14765	   
 14766	    semaphore arrays.
 14767	   
 14768	-a
 14769	   
 14770	    all. (default)
 14771	   
 14772	Output format options
 14773	
 14774	-t
 14775	   
 14776	    time.
 14777	   
 14778	-p
 14779	   
 14780	    pid.
 14781	   
 14782	-c
 14783	   
 14784	    creator.
 14785	   
 14786	-l
 14787	   
 14788	    limits.
 14789	   
 14790	-u
 14791	   
 14792	    summary.
 14793	   
 14794	killall
 14795	
 14796	Name
 14797	
 14798	killall -- kill processes by name
 14799	
 14800	Synopsis
 14801	
 14802	killall [-egiqvw] [-signal] name ...
 14803	killall -l
 14804	killall -V
 14805	
 14806	Description
 14807	
 14808	killall sends a signal to all processes running any of the specified commands.
 14809	If no signal name is specified, SIGTERM is sent.
 14810	
 14811	Signals can be specified either by name (e.g. -HUP) or by number (e.g. -1).
 14812	Signal 0 (check if a process exists) can only be specified by number.
 14813	
 14814	If the command name contains a slash (/), processes executing that particular
 14815	file will be selected for killing, independent of their name.
 14816	
 14817	killall returns a non-zero return code if no process has been killed for any of
 14818	the listed commands. If at least one process has been killed for each command, 
 14819	killall returns zero.
 14820	
 14821	A killall process never kills itself (but may kill other killall processes).
 14822	
 14823	Standard Options
 14824	
 14825	-e
 14826	   
 14827	    requires an exact match for very long names. If a command name is longer
 14828	    than 15 characters, the full name may be unavailable (i.e. it is swapped
 14829	    out). In this case, killall will kill everything that matches within the
 14830	    first 15 characters. With -e, such entries are skipped. killall prints a
 14831	    message for each skipped entry if -v is specified in addition to -e.
 14832	   
 14833	-g
 14834	   
 14835	    kills the process group to which the process belongs. The kill signal is
 14836	    only sent once per group, even if multiple processes belonging to the same
 14837	    process group were found.
 14838	   
 14839	-i
 14840	   
 14841	    asks interactively for confirmation before killing.
 14842	   
 14843	-l
 14844	   
 14845	    lists all known signal names.
 14846	   
 14847	-q
 14848	   
 14849	    does not complain if no processes were killed.
 14850	   
 14851	-v
 14852	   
 14853	    reports if the signal was successfully sent.
 14854	   
 14855	-V
 14856	   
 14857	    displays version information.
 14858	   
 14859	ln
 14860	
 14861	Name
 14862	
 14863	ln -- make links between files
 14864	
 14865	Description
 14866	
 14867	ln is as specified in the SUS but with differences as listed below.
 14868	
 14869	Differences
 14870	
 14871	-b, --backup[=CONTROL]
 14872	   
 14873	    makes a backup of each existing destination file.
 14874	   
 14875	-n, --no-dereference
 14876	   
 14877	    treats destination that is a symlink to a directory as if it were a normal
 14878	    file.
 14879	   
 14880	-i, --interactive
 14881	   
 14882	    prompts whether to remove destinations.
 14883	   
 14884	-s, --symbolic
 14885	   
 14886	    makes symbolic links instead of hard links.
 14887	   
 14888	-S, --suffix=SUFFIX
 14889	   
 14890	    overrides the usual backup suffix.
 14891	   
 14892	--target-directory=DIR
 14893	   
 14894	    moves all SOURCE arguments into directory DIR.
 14895	   
 14896	-v, --verbose
 14897	   
 14898	    prints name of each file before linking.
 14899	   
 14900	--version
 14901	   
 14902	    outputs version information and exits.
 14903	   
 14904	Notes
 14905	
 14906	The backup suffix is ~, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The
 14907	version control method may be selected via the --backup option or through the
 14908	VERSION_CONTROL environment variable. Here are the values:
 14909	
 14910	none, off
 14911	   
 14912	    never makes backups (even if --backup is given).
 14913	   
 14914	numbered, t
 14915	   
 14916	    makes numbered backups.
 14917	   
 14918	existing, nil
 14919	   
 14920	    numbered if numbered backups exist, simple otherwise
 14921	   
 14922	simple, never
 14923	   
 14924	    always makes simple backups.
 14925	   
 14926	localedef
 14927	
 14928	Name
 14929	
 14930	localedef -- compile locale definition files
 14931	
 14932	Description
 14933	
 14934	localedef is as specified in the SUS but with differences as listed below.
 14935	
 14936	Differences
 14937	
 14938	--charmap=charmapfile
 14939	   
 14940	    is equivalent to -f.
 14941	   
 14942	--inputfile=intputfile
 14943	   
 14944	    is equivalent to -i.
 14945	   
 14946	--force
 14947	   
 14948	    is equivalent to -c.
 14949	   
 14950	-v, --verbose
 14951	   
 14952	    generates extra warnings about errors that are normally ignored.
 14953	   
 14954	--quiet
 14955	   
 14956	    suppresses all notifications and warnings, and reports only fatal errors.
 14957	   
 14958	login
 14959	
 14960	Name
 14961	
 14962	login -- begin session on the system (LSB DEPRICATED)
 14963	
 14964	Synopsis
 14965	
 14966	login [-p] [username] [ENV=VAR ...]
 14967	login [-p] [-h host] [-f username]
 14968	login [-p] -r host
 14969	
 14970	Description
 14971	
 14972	login is used to establish a new session with the system. It is normally
 14973	invoked automatically by responding to the login: prompt on the user's
 14974	terminal. login may be special to the shell and may not be invoked as a
 14975	sub-process. Typically, login is treated by the shell as exec login which
 14976	causes the user to exit from the current shell. Attempting to execute login
 14977	from any shell but the login shell will produce an error message.
 14978	
 14979	When invoked from the login: prompt, the user may enter environmental variables
 14980	after the username. These variables are entered in the form NAME=VALUE. Not all
 14981	variables may be set in the fashion, notably PATH, HOME and SHELL.
 14982	Additionally, IFS may be inhibited if the user's login shell is /bin/sh.
 14983	
 14984	Standard Options
 14985	
 14986	-p
 14987	   
 14988	    preserves environment.
 14989	   
 14990	-f
 14991	   
 14992	    does not perform authentication, user is preauthenticated.
 14993	   
 14994	-h
 14995	   
 14996	    specifies the name of the remote host for this login.
 14997	   
 14998	-r
 14999	   
 15000	    performs autologin protocol for rlogin.
 15001	   
 15002	lpr
 15003	
 15004	Name
 15005	
 15006	lpr -- off line print
 15007	
 15008	Synopsis
 15009	
 15010	lpr [-l] [-p] [-Pprinter] [-h] [-s] [-#copies] [-J name]
 15011	    [-T title] [name ...]
 15012	
 15013	Description
 15014	
 15015	lpr uses a spooling daemon to print the named files when facilities become
 15016	available. If no names appear, the standard input is assumed.
 15017	
 15018	Standard Options
 15019	
 15020	-l
 15021	   
 15022	    identifies binary data that is not to be filtered but sent as raw input to
 15023	    printer.
 15024	   
 15025	-p
 15026	   
 15027	    formats with "pr" before sending to printer.
 15028	   
 15029	-Pprinter
 15030	   
 15031	    sends output to the printer named printer instead of the default printer.
 15032	   
 15033	-h
 15034	   
 15035	    suppresses header page.
 15036	   
 15037	-s
 15038	   
 15039	    uses symbolic links.
 15040	   
 15041	-#copies
 15042	   
 15043	    specifies copies as the number of copies to print.
 15044	   
 15045	-J name
 15046	   
 15047	    specifies name as the job name for the header page.
 15048	   
 15049	-T title
 15050	   
 15051	    specifies title as the title used for "pr".
 15052	   
 15053	ls
 15054	
 15055	Name
 15056	
 15057	ls -- list directory contents
 15058	
 15059	Description
 15060	
 15061	ls is as specified in the SUS, but with differences listed below.
 15062	
 15063	Differences
 15064	
 15065	-p
 15066	   
 15067	    displays the *, @, and | characters for executables, links, and FIFOs,
 15068	    respectively (in addition to the slash declared by the SUS).
 15069	   
 15070	lsb_release
 15071	
 15072	Name
 15073	
 15074	lsb_release -- print distribution specific information
 15075	
 15076	Synopsis
 15077	
 15078	lsb_release [OPTION]...
 15079	
 15080	Description
 15081	
 15082	The lsb_release command prints certain LSB (Linux Standard Base) and
 15083	Distribution information.
 15084	
 15085	With no option, same as -v.
 15086	
 15087	Options
 15088	
 15089	-v, --version
 15090	   
 15091	    displays version of LSB against which distribution is compliant.
 15092	   
 15093	-i, --id
 15094	   
 15095	    displays string id of distributor.
 15096	   
 15097	-d, --description
 15098	   
 15099	    displays single line text description of distribution.
 15100	   
 15101	-r, --release
 15102	   
 15103	    displays release number of distribution.
 15104	   
 15105	-c, --codename
 15106	   
 15107	    displays codename according to distribution release.
 15108	   
 15109	-a, --all
 15110	   
 15111	    displays all of the above information.
 15112	   
 15113	-s, --short
 15114	   
 15115	    displays all of the above information in short output format.
 15116	   
 15117	-h, --help
 15118	   
 15119	    displays a human-readable help message.
 15120	   
 15121	m4
 15122	
 15123	Name
 15124	
 15125	m4 -- macro processor
 15126	
 15127	Description
 15128	
 15129	m4 is as specified in the SUS but with differences as listed below.
 15130	
 15131	Differences
 15132	
 15133	--version
 15134	   
 15135	    outputs version information and exits.
 15136	   
 15137	-e, --interactive
 15138	   
 15139	    unbuffers output, ignores interrupts.
 15140	   
 15141	-E, --fatal-warnings
 15142	   
 15143	    stops execution after first warning.
 15144	   
 15145	-Q, --quiet, --silent
 15146	   
 15147	    suppresses some warnings for builtins.
 15148	   
 15149	-P, --prefix-builtins
 15150	   
 15151	    forces a m4_ prefix to all builtins.
 15152	   
 15153	-I, --include=DIRECTORY
 15154	   
 15155	    searches this directory second for includes.
 15156	   
 15157	--define=NAME[=VALUE]
 15158	   
 15159	    is equivalent to -D.
 15160	   
 15161	--undefine=NAME
 15162	   
 15163	    deletes builtin NAME.
 15164	   
 15165	--synclines
 15166	   
 15167	    is equivalent to -s.
 15168	   
 15169	-G, --traditional
 15170	   
 15171	    suppresses all GNU extensions.
 15172	   
 15173	-H, --hashsize=PRIME
 15174	   
 15175	    sets symbol lookup hash table size.
 15176	   
 15177	-L, --nesting-limit=NUMBER
 15178	   
 15179	    changes artificial nesting limit.
 15180	   
 15181	-F, --freeze-state=FILE
 15182	   
 15183	    produces a frozen state on FILE at end.
 15184	   
 15185	-R, --reload-state=FILE
 15186	   
 15187	    reloads a frozen state from FILE at start.
 15188	   
 15189	-d, --debug=[FLAGS]
 15190	   
 15191	    sets debug level (no FLAGS implies 'aeq'). FLAGS is any of:
 15192	   
 15193	    t
 15194	       
 15195	        traces for all macro calls, not only 'ed.
 15196	       
 15197	    a
 15198	       
 15199	        shows actual arguments.
 15200	       
 15201	    e
 15202	       
 15203	        shows expansion.
 15204	       
 15205	    q
 15206	       
 15207	        quotes values as necessary, with a or e flag.
 15208	       
 15209	    c
 15210	       
 15211	        shows before collect, after collect and after call.
 15212	       
 15213	    x
 15214	       
 15215	        adds a unique macro call id, useful with c flag.
 15216	       
 15217	    f
 15218	       
 15219	        says current input file name.
 15220	       
 15221	    l
 15222	       
 15223	        says current input line number.
 15224	       
 15225	    p
 15226	       
 15227	        shows results of path searches.
 15228	       
 15229	    i
 15230	       
 15231	        shows changes in input files.
 15232	       
 15233	    V
 15234	       
 15235	        is shorthand for all of the above flags.
 15236	       
 15237	-t, --trace=NAME
 15238	   
 15239	    traces NAME when it will be defined.
 15240	   
 15241	-l, --arglength=NUM
 15242	   
 15243	    restricts macro tracing size.
 15244	   
 15245	-o, --error-output=FILE
 15246	   
 15247	    redirects debug and traces output.
 15248	   
 15249	make
 15250	
 15251	Name
 15252	
 15253	make -- maintain, update and regenerate groups of programs
 15254	
 15255	Description
 15256	
 15257	make is as specified in the SUS but with differences as listed below. The GNU 
 15258	make command contains syntax extensions beyond those specified in the SUS.
 15259	
 15260	Differences
 15261	
 15262	-C dir
 15263	   
 15264	    changes to directory dir before reading the makefiles or doing anything
 15265	    else. If multiple -C options are specified, each is interpreted relative to
 15266	    the previous one: -C / -C etc is equivalent to -C /etc. This is typically
 15267	    used with recursive invocations of make.
 15268	   
 15269	-d
 15270	   
 15271	    prints debugging information in addition to normal processing. The
 15272	    debugging information says which files are being considered for remaking,
 15273	    which filetimes are being compared and with what results, which files
 15274	    actually need to be remade, which implicit rules are considered and which
 15275	    are applied---everything interesting about how make decides what to do.
 15276	   
 15277	-I dir
 15278	   
 15279	    specifies a directory dir to search for included makefiles. If several -I
 15280	    options are used to specify several directories, the directories are
 15281	    searched in the order specified. Unlike the arguments to other flags of
 15282	    make, directories given with -I flags may come directly after the flag:
 15283	    -Idir is allowed, as well as -I dir. This syntax is allowed for
 15284	    compatibility with the C preprocessor's -I flag.
 15285	   
 15286	-j jobs
 15287	   
 15288	    specifies the number of jobs (commands) to run simultaneously. If there is
 15289	    more than one -j option, the last one is effective. If the -j option is
 15290	    given without an argument, make will not limit the number of jobs that can
 15291	    run simultaneously.
 15292	   
 15293	-l [load]
 15294	   
 15295	    specifies that no new jobs (commands) should be started if there are others
 15296	    jobs running and the load average is at least load (a floating-point
 15297	    number). With no argument, removes a previous load limit.
 15298	   
 15299	-o file
 15300	   
 15301	    does not remake the file file even if it is older than its dependencies,
 15302	    and do not remake anything on account of changes in file. Essentially the
 15303	    file is treated as very old and its rules are ignored.
 15304	   
 15305	-v
 15306	   
 15307	    prints the version of the make program plus a copyright, a list of authors
 15308	    and a notice that there is no warranty.
 15309	   
 15310	-w
 15311	   
 15312	    prints a message containing the working directory before and after other
 15313	    processing. This may be use­ ful for tracking down errors from complicated
 15314	    nests of recursive make commands.
 15315	   
 15316	-W file
 15317	   
 15318	    pretends that the target file has just been modified. When used with the -n
 15319	    flag, this shows you what would happen if you were to modify that file.
 15320	    Without -n, it is almost the same as running a touch command on the given
 15321	    file before running make, except that the modification time is changed only
 15322	    in the imagination of make.
 15323	   
 15324	man
 15325	
 15326	Name
 15327	
 15328	man -- display system documentation
 15329	
 15330	Description
 15331	
 15332	man is as specified in the SUS. While additional features my be found in Linux
 15333	versions of this command, the SUS specified interface is correctly and
 15334	completely implemented.
 15335	
 15336	md5sum
 15337	
 15338	Name
 15339	
 15340	md5sum -- generates or checks MD5 message digests
 15341	
 15342	Synopsis
 15343	
 15344	md5sum [-b] [-c [file]] | [file...]
 15345	
 15346	Options
 15347	
 15348	-b
 15349	   
 15350	    uses binary mode.
 15351	   
 15352	-c [file]
 15353	   
 15354	    checks md5sum of all files listed in file against the checksum listed in
 15355	    the same file. The actual format of that file is the same as output of
 15356	    md5sum. That is, each line in the file describes a file.
 15357	   
 15358	mkdir
 15359	
 15360	Name
 15361	
 15362	mkdir -- make directories
 15363	
 15364	Description
 15365	
 15366	mkdir is as specified in the SUS but with differences as listed below.
 15367	
 15368	Differences
 15369	
 15370	--verbose
 15371	   
 15372	    prints a message for each created directory.
 15373	   
 15374	--version
 15375	   
 15376	    outputs version information and exits.
 15377	   
 15378	mknod
 15379	
 15380	Name
 15381	
 15382	mknod -- make block or character special files
 15383	
 15384	Synopsis
 15385	
 15386	mknod [OPTION]... NAME TYPE [MAJOR MINOR]
 15387	
 15388	Description
 15389	
 15390	Create the special file NAME of the given TYPE.
 15391	
 15392	MAJOR MINOR are forbidden for TYPE p, mandatory otherwise. TYPE may be:
 15393	
 15394	b
 15395	   
 15396	    creates a block (buffered) special file.
 15397	   
 15398	c, u
 15399	   
 15400	    creates a character (unbuffered) special file.
 15401	   
 15402	p
 15403	   
 15404	    creates a FIFO.
 15405	   
 15406	Standard Options
 15407	
 15408	-m, --mode=MODE
 15409	   
 15410	    sets permission mode (as in chmod), not a=rw - umask.
 15411	   
 15412	--version
 15413	   
 15414	    outputs version information and exits.
 15415	   
 15416	mktemp
 15417	
 15418	Name
 15419	
 15420	mktemp -- make temporary file name (unique)
 15421	
 15422	Synopsis
 15423	
 15424	mktemp [-q] [-u] template
 15425	
 15426	Description
 15427	
 15428	mktemp takes the given file name template and overwrites a portion of it to
 15429	create a file name. This file name is unique and suitable for use by the
 15430	application.
 15431	
 15432	Options
 15433	
 15434	-q
 15435	   
 15436	    fails silently if an error occurs. This is useful if a script does not want
 15437	    error output to go to standard error.
 15438	   
 15439	-u
 15440	   
 15441	    operates in `unsafe' mode. The temp file will be unlinked before mktemp
 15442	    exits. This is slightly better than mktemp(3) but still introduces a race
 15443	    condition. Use of this option is not encouraged.
 15444	   
 15445	more
 15446	
 15447	Name
 15448	
 15449	more -- file perusal filter for crt viewing
 15450	
 15451	Description
 15452	
 15453	more is as specified in the SUS but with differences as listed below.
 15454	
 15455	Differences
 15456	
 15457	-num
 15458	   
 15459	    specifies an integer which is the screen size (in lines).
 15460	   
 15461	-d
 15462	   
 15463	    prompts user with the message "[Press space to continue, 'q' to quit.]" and
 15464	    will display "[Press 'h' for instructions.]" instead of ringing the bell
 15465	    when an illegal key is pressed.
 15466	   
 15467	-e
 15468	   
 15469	    has implementation-dependent behavior.
 15470	   
 15471	-l
 15472	   
 15473	    prevents the typical behavior where more treats ^L (form feed) as a special
 15474	    character and pauses after any line that contains a form feed.
 15475	   
 15476	-i
 15477	   
 15478	    has implementation-dependent behavior.
 15479	   
 15480	-f
 15481	   
 15482	    counts logical, rather than screen lines (i.e., long lines are not folded).
 15483	   
 15484	-n
 15485	   
 15486	    has implementation-dependent behavior.
 15487	   
 15488	-p
 15489	   
 15490	    does not scroll. Instead, clear the whole screen and then display the text.
 15491	   
 15492	+/
 15493	   
 15494	    specifies a string that will be searched for before each file is displayed.
 15495	   
 15496	+num
 15497	   
 15498	    starts at line number num.
 15499	   
 15500	mount
 15501	
 15502	Name
 15503	
 15504	mount -- mount a file system
 15505	
 15506	Synopsis
 15507	
 15508	mount [-hV]
 15509	mount -a [-fFnrsvw] [-t vfstype]
 15510	mount [-fnrsvw] [-o options [,...]] device | dir
 15511	mount [-fnrsvw] [-t vfstype] [-o options] device dir
 15512	
 15513	Description
 15514	
 15515	All files accessible in a Unix system are arranged in one big tree, the file
 15516	hierarchy, rooted at /. These files can be spread out over several devices. 
 15517	mount serves to attach the file system found on some device to the big file
 15518	tree. Conversely, umount(8) will detach it again.
 15519	
 15520	Standard Options
 15521	
 15522	-V
 15523	   
 15524	    outputs version.
 15525	   
 15526	-v
 15527	   
 15528	    invokes verbose mode.
 15529	   
 15530	-a
 15531	   
 15532	    mounts all filesystems (of the given types) mentioned in fstab.
 15533	   
 15534	-F
 15535	   
 15536	    combines with -a. to fork off a new incarnation of mount for each device.
 15537	    This will do the mounts on different devices or different NFS servers in
 15538	    parallel.
 15539	   
 15540	-f
 15541	   
 15542	    causes everything to be done except for the actual system call; if it's not
 15543	    obvious, this `fakes' mounting the file system.
 15544	   
 15545	-n
 15546	   
 15547	    mounts without writing in /etc/mtab. This is necessary for example when /
 15548	    etc is on a read-only file system.
 15549	   
 15550	-s
 15551	   
 15552	    tolerates sloppy mount options rather than failing. This will ignore mount
 15553	    options not supported by a filesystem type. Not all filesystems support
 15554	    this option.
 15555	   
 15556	-r
 15557	   
 15558	    mounts the file system read-only. A synonym is -o ro.
 15559	   
 15560	-w
 15561	   
 15562	    mounts the file system read/write. (default) A synonym is -o rw.
 15563	   
 15564	-L label
 15565	   
 15566	    mounts the partition that has the specified label.
 15567	   
 15568	-U uuid
 15569	   
 15570	    mounts the partition that has the specified uuid. These two options require
 15571	    the file /proc/partitions to exist.
 15572	   
 15573	-t vfstype
 15574	   
 15575	    indicates a file system type of vfstype.
 15576	   
 15577	    More than one type may be specified in a comma separated list. The list of
 15578	    file system types can be prefixed with no to specify the file system types
 15579	    on which no action should be taken.
 15580	   
 15581	-o
 15582	   
 15583	    options are specified with a -o flag followed by a comma-separated string
 15584	    of options. Some of these options are only useful when they appear in the /
 15585	    etc/fstab file. The following options apply to any file system that is
 15586	    being mounted:
 15587	   
 15588	    async
 15589	       
 15590	        does all I/O to the file system asynchronously.
 15591	       
 15592	    atime
 15593	       
 15594	        updates inode access time for each access. (default)
 15595	       
 15596	    auto
 15597	       
 15598	        is mountable with -a.
 15599	       
 15600	    defaults
 15601	       
 15602	        uses default options: rw, suid, dev, exec, auto, nouser, and async.
 15603	       
 15604	    dev
 15605	       
 15606	        interprets character or block special devices on the file system.
 15607	       
 15608	    exec
 15609	       
 15610	        permits execution of binaries.
 15611	       
 15612	    noatime
 15613	       
 15614	        does not update inode access times on this file system.
 15615	       
 15616	    noauto
 15617	       
 15618	        is only explicitly mountable.
 15619	       
 15620	    nodev
 15621	       
 15622	        does not interpret character or block special devices on the file
 15623	        system.
 15624	       
 15625	    noexec
 15626	       
 15627	        does not allow execution of any binaries on the mounted file system.
 15628	       
 15629	    nosuid
 15630	       
 15631	        does not allow set-user-identifier or set-group-identifier bits to take
 15632	        effect.
 15633	       
 15634	    nouser
 15635	       
 15636	        forbids an ordinary (i.e., non-root) user to mount the file system.
 15637	        (default)
 15638	       
 15639	    remount
 15640	       
 15641	        attempts to remount an already-mounted file system. This is commonly
 15642	        used to change the mount flags for a file system, especially to make a
 15643	        read-only file system writable.
 15644	       
 15645	    ro
 15646	       
 15647	        mounts the file system read-only.
 15648	       
 15649	    rw
 15650	       
 15651	        mounts the file system read-write.
 15652	       
 15653	    suid
 15654	       
 15655	        allows set-user-identifier or set-group-identifier bits to take effect.
 15656	       
 15657	    sync
 15658	       
 15659	        does all I/O to the file system synchronously.
 15660	       
 15661	    user
 15662	       
 15663	        allows an ordinary user to mount the file system. This option implies
 15664	        the options noexec, nosuid, and nodev (unless overridden by subsequent
 15665	        options, as in the option line user,exec,dev,suid).
 15666	       
 15667	mv
 15668	
 15669	Name
 15670	
 15671	mv -- move (rename) files
 15672	
 15673	Description
 15674	
 15675	mv is as specified in the SUS but with differences as listed below.
 15676	
 15677	Differences
 15678	
 15679	-b, --backup[=CONTROL]
 15680	   
 15681	    makes backup before removal.
 15682	   
 15683	-S, --suffix=SUFFIX
 15684	   
 15685	    overrides the usual backup suffix.
 15686	   
 15687	--strip-trailing-slashes
 15688	   
 15689	    removes any trailing slashes from each SOURCE argument.
 15690	   
 15691	-S, --suffix=SUFFIX
 15692	   
 15693	    overrides the usual backup suffix.
 15694	   
 15695	--target-directory=DIRECTORY
 15696	   
 15697	    moves all SOURCE arguments into DIRECTORY.
 15698	   
 15699	-u, --update
 15700	   
 15701	    moves only older or brand new non-directories.
 15702	   
 15703	-v, --verbose
 15704	   
 15705	    explains what is being done.
 15706	   
 15707	--version
 15708	   
 15709	    outputs version information and exits.
 15710	   
 15711	Notes
 15712	
 15713	The backup suffix is ~, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The
 15714	version control method may be selected via the --backup option or through the
 15715	VERSION_CONTROL environment variable. Here are the values:
 15716	
 15717	none, off
 15718	   
 15719	    makes no backups (even if --backup is given).
 15720	   
 15721	numbered, t
 15722	   
 15723	    makes numbered backups.
 15724	   
 15725	existing, nil
 15726	   
 15727	    is numbered if numbered backups exist, simple otherwise.
 15728	   
 15729	simple, never
 15730	   
 15731	    makes simple backups.
 15732	   
 15733	newgrp
 15734	
 15735	Name
 15736	
 15737	newgrp -- change group ID
 15738	
 15739	Synopsis
 15740	
 15741	newgrp [-] [group]
 15742	
 15743	Description
 15744	
 15745	newgrp changes the current group ID during a login session. If the optional -
 15746	flag is given, the user's environment will be reinitialized as though the user
 15747	had logged in, otherwise the current environment, including current working
 15748	directory, remains unchanged.
 15749	
 15750	nice
 15751	
 15752	Name
 15753	
 15754	nice -- run a program with modified scheduling priority
 15755	
 15756	Description
 15757	
 15758	nice is as specified in the SUS but with differences as listed below.
 15759	
 15760	Differences
 15761	
 15762	-ADJUST
 15763	   
 15764	    increments priority by ADJUST first.
 15765	   
 15766	--help
 15767	   
 15768	    displays this help and exits.
 15769	   
 15770	--version
 15771	   
 15772	    outputs version information and exits.
 15773	   
 15774	nl
 15775	
 15776	Name
 15777	
 15778	nl -- number lines of files
 15779	
 15780	Description
 15781	
 15782	nl is as specified in the SUS but with differences as listed below.
 15783	
 15784	Differences
 15785	
 15786	--help
 15787	   
 15788	    displays this help and exits.
 15789	   
 15790	--version
 15791	   
 15792	    outputs version information and exits.
 15793	   
 15794	nohup
 15795	
 15796	Name
 15797	
 15798	nohup -- runs a command immune to hangups, with output to a non-tty
 15799	
 15800	Description
 15801	
 15802	nohup is as specified in the SUS but with differences as listed below.
 15803	
 15804	Differences
 15805	
 15806	--help
 15807	   
 15808	    displays this help and exits.
 15809	   
 15810	--version
 15811	   
 15812	    outputs version information and exits.
 15813	   
 15814	od
 15815	
 15816	Name
 15817	
 15818	od -- dump files in octal and other formats
 15819	
 15820	Description
 15821	
 15822	od is as specified in the SUS but with differences as listed below.
 15823	
 15824	Differences
 15825	
 15826	-w, --width[=BYTES]
 15827	   
 15828	    outputs BYTES bytes per output line.
 15829	   
 15830	--traditional
 15831	   
 15832	    accepts arguments in pre-POSIX form.
 15833	   
 15834	--help
 15835	   
 15836	    displays this help and exits.
 15837	   
 15838	--version
 15839	   
 15840	    outputs version information and exits.
 15841	   
 15842	Pre-POSIX Specifications
 15843	
 15844	The LSB supports option intermixtures with the following pre-POSIX
 15845	specifications:
 15846	
 15847	-a
 15848	   
 15849	    is equivalent to -t a, selects named characters.
 15850	   
 15851	-f
 15852	   
 15853	    is equivalent to -t fF, selects floats.
 15854	   
 15855	-h
 15856	   
 15857	    is equivalent to -t x2, selects hexadecimal shorts.
 15858	   
 15859	-i
 15860	   
 15861	    is equivalent to -t d2, selects decimal shorts.
 15862	   
 15863	-l
 15864	   
 15865	    is equivalent to -t d4, selects decimal longs.
 15866	   
 15867	passwd
 15868	
 15869	Name
 15870	
 15871	passwd -- change user password
 15872	
 15873	Synopsis
 15874	
 15875	passwd [-g] [-r|R] group
 15876	passwd [-x max] [-n min] [-w warn] [-i inact] name
 15877	passwd {-l|-u} name
 15878	
 15879	Description
 15880	
 15881	passwd changes passwords for user and group accounts. A normal user may only
 15882	change the password for their own account, the super user may change the
 15883	password for any account. The administrator of a group may change the password
 15884	for the group. passwd also changes password expiry dates and intervals.
 15885	
 15886	Options
 15887	
 15888	-g
 15889	   
 15890	    changes the password for the named group.
 15891	   
 15892	-r
 15893	   
 15894	    combines with -g to remove the current password from the named group.
 15895	   
 15896	-R
 15897	   
 15898	    combines with -g to restrict the named group for all users.
 15899	   
 15900	-x max
 15901	   
 15902	    sets the maximum number of days a password remains valid.
 15903	   
 15904	-n min
 15905	   
 15906	    sets the minimum number of days before a password may be changed.
 15907	   
 15908	-w warn
 15909	   
 15910	    sets the number of days warning the user will receive before their password
 15911	    will expire.
 15912	   
 15913	-i inactive
 15914	   
 15915	    disables an account after the password has been expired for the given
 15916	    number of days.
 15917	   
 15918	-l
 15919	   
 15920	    disables an account by changing the password to a value which matches no
 15921	    possible encrypted value.
 15922	   
 15923	-u
 15924	   
 15925	    re-enables an account by changing the password back to its previous value.
 15926	   
 15927	paste
 15928	
 15929	Name
 15930	
 15931	paste -- merge lines of files
 15932	
 15933	Description
 15934	
 15935	paste is as specified in the SUS but with differences as listed below.
 15936	
 15937	Differences
 15938	
 15939	--help
 15940	   
 15941	    displays this help and exits.
 15942	   
 15943	--version
 15944	   
 15945	    outputs version information and exits.
 15946	   
 15947	patch
 15948	
 15949	Name
 15950	
 15951	patch -- apply a diff file to an original
 15952	
 15953	Description
 15954	
 15955	patch is as specified in the SUS but with differences as listed below.
 15956	
 15957	Differences
 15958	
 15959	--backup-if-mismatch
 15960	   
 15961	    backs up a file if the patch does not match the file exactly and if backups
 15962	    are not otherwise requested.
 15963	   
 15964	--no-backup-if-mismatch
 15965	   
 15966	    does not back up a file if the patch does not match the file exactly and if
 15967	    backups are not otherwise requested.
 15968	   
 15969	-B pref, --prefix=pref
 15970	   
 15971	    prefixes pref to a file name when generating its simple backup file name.
 15972	   
 15973	--binary
 15974	   
 15975	    reads and write all files in binary mode, except for standard output and /
 15976	    dev/tty. This option has no effect on POSIX-compliant systems.
 15977	   
 15978	--dry-run
 15979	   
 15980	    prints the results of applying the patches without actually changing any
 15981	    files.
 15982	   
 15983	-E, --remove-empty-files
 15984	   
 15985	    removes output files that are empty after the patches have been applied.
 15986	    When patch removes a file, it also attempts to remove any empty ancestor
 15987	    directories.
 15988	   
 15989	-f, --force
 15990	   
 15991	    skips patches whose headers do not say which file is to be patched; patches
 15992	    files even though they have the wrong version for the Prereq: line in the
 15993	    patch; assumes that patches are not reversed even if they look like they
 15994	    are.
 15995	   
 15996	-F num, --fuzz=num
 15997	   
 15998	    sets the maximum fuzz factor. This option only applies to diffs that have
 15999	    context, and ignores up to that many lines in looking for places to install
 16000	    a hunk.
 16001	   
 16002	-g num, --get=num
 16003	   
 16004	    controls patch behavior when a file is under RCS or SCCS control and does
 16005	    not exist or is read-only and matches the default version. If num is
 16006	    positive, patch gets (or checks out) the file from the revision control
 16007	    system; if zero, patch ignores RCS and SCCS and does not get the file; and
 16008	    if negative, patch asks the user where to get the file.
 16009	   
 16010	-s, --silent, --quiet
 16011	   
 16012	    works silently, unless an error occurs.
 16013	   
 16014	-t, --batch
 16015	   
 16016	    suppresses questions like -f, but makes some different assumptions: skips
 16017	    patches whose headers do not contain file names; skips patches for which
 16018	    the file has the wrong version for the Prereq: line in the patch; and
 16019	    assumes that patches are reversed if they look like they are.
 16020	   
 16021	-T, --set-time
 16022	   
 16023	    sets the modification and access times of patched files from time stamps
 16024	    given in context diff headers, assuming that the context diff headers use
 16025	    local time.
 16026	   
 16027	-u, --unified
 16028	   
 16029	    interprets the patch file as a unified context diff.
 16030	   
 16031	-v, --version
 16032	   
 16033	    prints out patch's revision header and patch level, and exits.
 16034	   
 16035	-V method, --version-control=method
 16036	   
 16037	    uses method to determine backup file names. The method can also be given by
 16038	    the PATCH_VERSION_CONTROL environment variable, which is overridden by this
 16039	    option.
 16040	   
 16041	--verbose
 16042	   
 16043	    outputs extra information about the work being done.
 16044	   
 16045	-Y pref, --basename-prefix=pref
 16046	   
 16047	    prefixes pref to the basename of a file name when generating its simple
 16048	    backup file name.
 16049	   
 16050	-z suffix, --suffix=suffix
 16051	   
 16052	    uses suffix as the simple backup suffix.
 16053	   
 16054	-Z, --set-utc
 16055	   
 16056	    sets the modification and access times of patched files from time stamps
 16057	    given in context diff headers.
 16058	   
 16059	--help
 16060	   
 16061	    displays this help and exits.
 16062	   
 16063	pathchk
 16064	
 16065	Name
 16066	
 16067	pathchk -- check whether file names are valid or portable
 16068	
 16069	Description
 16070	
 16071	pathchk is as specified in the SUS but with differences as listed below.
 16072	
 16073	Differences
 16074	
 16075	--help
 16076	   
 16077	    displays this help and exits.
 16078	   
 16079	--version
 16080	   
 16081	    outputs version information and exits.
 16082	   
 16083	pidof
 16084	
 16085	Name
 16086	
 16087	pidof -- find the process ID of a running program
 16088	
 16089	Synopsis
 16090	
 16091	pidof [-s] [-x] [-o omitpid..] program [program..]
 16092	
 16093	Options
 16094	
 16095	-s
 16096	   
 16097	    instructs the program to only return one pid.
 16098	   
 16099	-x
 16100	   
 16101	    causes the program to also return process id's of shells running the named
 16102	    scripts.
 16103	   
 16104	-o
 16105	   
 16106	    omits processes with specified process id.
 16107	   
 16108	pr
 16109	
 16110	Name
 16111	
 16112	pr -- split a file into sections determined by context lines
 16113	
 16114	Description
 16115	
 16116	pr is as specified in the SUS but with differences as listed below.
 16117	
 16118	Differences
 16119	
 16120	-P
 16121	   
 16122	    has implementation-dependent behavior.
 16123	   
 16124	-c, --show-control-chars
 16125	   
 16126	    uses hat notation (^G) and octal backslash notation.
 16127	   
 16128	-J, --join-lines
 16129	   
 16130	    merges full lines, turns off -W line truncation, no column alignment.
 16131	   
 16132	-N NUMBER, --first-line-number=NUMBER
 16133	   
 16134	    starts counting with NUMBER at 1st line of first page printed.
 16135	   
 16136	-S[STRING], --sep-string=[=STRING]
 16137	   
 16138	    separates columns by an optional STRING, doesn't use -S "STRING", -S only:
 16139	    No separator used without -S.
 16140	   
 16141	-T, --omit-pagination
 16142	   
 16143	    omits page headers and trailers, eliminates any pagination by form feeds
 16144	    set in input files.
 16145	   
 16146	-v, --show-nonprinting
 16147	   
 16148	    uses octal backslash notation.
 16149	   
 16150	-W PAGE_WIDTH, --page-width=PAGE_WIDTH
 16151	   
 16152	    sets page width to PAGE_WIDTH (72) characters always, truncates lines,
 16153	    except -J option is set, no interference with -S or -s.
 16154	   
 16155	--help
 16156	   
 16157	    displays this help and exits.
 16158	   
 16159	--version
 16160	   
 16161	    outputs version information and exits.
 16162	   
 16163	printf
 16164	
 16165	Name
 16166	
 16167	printf -- format and print data
 16168	
 16169	Description
 16170	
 16171	printf is as specified in the SUS but with differences as listed below.
 16172	
 16173	Differences
 16174	
 16175	--help
 16176	   
 16177	    displays this help and exits.
 16178	   
 16179	--version
 16180	   
 16181	    outputs version information and exits.
 16182	   
 16183	pwd
 16184	
 16185	Name
 16186	
 16187	pwd -- print name of current/working directory
 16188	
 16189	Description
 16190	
 16191	pwd is as specified in the SUS but with differences as listed below.
 16192	
 16193	Differences
 16194	
 16195	--help
 16196	   
 16197	    displays this help and exits.
 16198	   
 16199	--version
 16200	   
 16201	    outputs version information and exits.
 16202	   
 16203	renice
 16204	
 16205	Name
 16206	
 16207	renice -- alter priority of running processes
 16208	
 16209	Description
 16210	
 16211	renice is as specified in the SUS but with differences as listed below.
 16212	
 16213	Differences
 16214	
 16215	-n increment
 16216	   
 16217	    has implementation-dependent behavior.
 16218	   
 16219	rm
 16220	
 16221	Name
 16222	
 16223	rm -- remove files or directories
 16224	
 16225	Description
 16226	
 16227	rm is as specified in the SUS but with differences as listed below.
 16228	
 16229	Differences
 16230	
 16231	-v, --verbose
 16232	   
 16233	    explains what is being done.
 16234	   
 16235	--help
 16236	   
 16237	    displays this help and exits.
 16238	   
 16239	--version
 16240	   
 16241	    outputs version information and exits.
 16242	   
 16243	rmdir
 16244	
 16245	Name
 16246	
 16247	rmdir -- remove empty directories
 16248	
 16249	Description
 16250	
 16251	rmdir is as specified in the SUS but with differences as listed below.
 16252	
 16253	Differences
 16254	
 16255	--ignore-fail-on-non-empty
 16256	   
 16257	    ignores each failure that is solely because a directory is non-empty.
 16258	   
 16259	--verbose
 16260	   
 16261	    outputs a diagnostic for every directory processed.
 16262	   
 16263	--help
 16264	   
 16265	    displays this help and exits.
 16266	   
 16267	--version
 16268	   
 16269	    outputs version information and exits.
 16270	   
 16271	rsync
 16272	
 16273	Name
 16274	
 16275	rsync -- faster, flexible replacement for rcp
 16276	
 16277	Synopsis
 16278	
 16279	rsync [OPTION]... SRC [SRC]... [USER@]HOST:DEST
 16280	rsync [OPTION]... [USER@]HOST:SRC DEST
 16281	rsync [OPTION]... SRC [SRC]... DEST
 16282	rsync [OPTION]... [USER@]HOST::SRC [DEST]
 16283	rsync [OPTION]... SRC [SRC]... [USER@]HOST::DEST
 16284	rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]
 16285	
 16286	Description
 16287	
 16288	rsync behaves in much the same way that rcp does, but has many more options and
 16289	uses its remote-update protocol to greatly speedup file transfers when the
 16290	destination file already exists.
 16291	
 16292	The remote-update protocol allows rsync to transfer just the differences
 16293	between two sets of files across the network link, using an efficient
 16294	checksum-search algorithm described in the technical report that accompanies
 16295	this package.
 16296	
 16297	Standard Options
 16298	
 16299	--version
 16300	   
 16301	    prints the rsync version number and exits.
 16302	   
 16303	-v, --verbose
 16304	   
 16305	    increases the amount of information given during the transfer. By default, 
 16306	    rsync works silently. A single -v gives information about what files are
 16307	    being transferred and a brief summary at the end. Two -v flags give
 16308	    information on what files are being skipped and slightly more information
 16309	    at the end.
 16310	   
 16311	-q, --quiet
 16312	   
 16313	    decreases the amount of information given during the transfer, notably
 16314	    suppressing information messages from the remote server. This flag is
 16315	    useful when invoking rsync from cron.
 16316	   
 16317	-I, --ignore-times
 16318	   
 16319	    turns off the skipping of files that are already the same length and have
 16320	    the same time-stamp.
 16321	   
 16322	-c, --checksum
 16323	   
 16324	    forces the sender to checksum all files using a 128-bit MD4 checksum before
 16325	    transfer. The checksum is then explicitly checked on the receiver and any
 16326	    files of the same name which already exist and have the same checksum and
 16327	    size on the receiver are skipped. This option can be quite slow.
 16328	   
 16329	-a, --archive
 16330	   
 16331	    is a shortcut for specifying recursion and to preserve all attributes.
 16332	   
 16333	-r, --recursive
 16334	   
 16335	    copies directories recursively. If not specified, rsync will not copy
 16336	    directories at all.
 16337	   
 16338	-R, --relative
 16339	   
 16340	    uses relative paths. This means that the full path names specified on the
 16341	    command line are sent to the server rather than just the last parts of the
 16342	    filenames.
 16343	   
 16344	-b, --backup
 16345	   
 16346	    renames preexisting destination files with a ~ extension as each file is
 16347	    transferred. You can control the backup suffix using the --suffix option.
 16348	   
 16349	--backup-dir=DIR
 16350	   
 16351	    combines with --backup to store all backups in the specified directory.
 16352	    This is very useful for incremental backups.
 16353	   
 16354	--suffix=SUFFIX
 16355	   
 16356	    overrides the default backup suffix used with the -b option. The default is
 16357	    a ~.
 16358	   
 16359	-u, --update
 16360	   
 16361	    skips any files for which the destination file already exists and has a
 16362	    date later than the source file.
 16363	   
 16364	-l, --links
 16365	   
 16366	    recreates symbolic links on the remote system to be the same as the local
 16367	    system. Without this option, all symbolic links are skipped.
 16368	   
 16369	-L, --copy-links
 16370	   
 16371	    transfers the file referenced by a symbolic link, rather than recreating
 16372	    the link.
 16373	   
 16374	--copy-unsafe-links
 16375	   
 16376	    treats symbolic links that point outside the source tree like ordinary
 16377	    files. Absolute symlinks are also treated like ordinary files, and so are
 16378	    any symlinks in the source path itself when --relative is used.
 16379	   
 16380	--safe-links
 16381	   
 16382	    ignores any symbolic links that point outside the destination tree. All
 16383	    absolute symlinks are also ignored.
 16384	   
 16385	-H, --hard-links
 16386	   
 16387	    recreates hard links on the remote system to be the same as the local
 16388	    system. Without this option hard links are treated like regular files.
 16389	   
 16390	-W, --whole-file
 16391	   
 16392	    does not use the incremental rsync algorithm and sends the whole file as-is
 16393	    instead. This may be useful when using rsync with a local machine.
 16394	   
 16395	-p, --perms
 16396	   
 16397	    updates the remote permissions to be the same as the local permissions.
 16398	   
 16399	-o, --owner
 16400	   
 16401	    updates the remote owner of the file to be the same as the local owner.
 16402	    This is only available to the super-user. Note that if the source system is
 16403	    a daemon using chroot, --numeric-ids is implied because the source system
 16404	    cannot get access to the usernames.
 16405	   
 16406	-g, --group
 16407	   
 16408	    updates the remote group of the file to be the same as the local group. If
 16409	    the receiving system is not running as the super-user, only groups that the
 16410	    receiver is a member of will be preserved (by group name, not group id
 16411	    number).
 16412	   
 16413	-D, --devices
 16414	   
 16415	    transfers character and block device information to the remote system to
 16416	    recreate these devices. This option is only available to the super-user.
 16417	   
 16418	-t, --times
 16419	   
 16420	    transfers modification times along with the files and updates them on the
 16421	    remote system.
 16422	   
 16423	-n, --dry-run
 16424	   
 16425	    does not perform any file transfers, but simply reports the actions it
 16426	    would have taken.
 16427	   
 16428	-x, --one-file-system
 16429	   
 16430	    does not cross filesystem boundaries when recursing.
 16431	   
 16432	--existing
 16433	   
 16434	    does not create any new files - only updates files that already exist on
 16435	    the destination.
 16436	   
 16437	--max-delete=NUM
 16438	   
 16439	    does not delete more than NUM files or directories.
 16440	   
 16441	--delete
 16442	   
 16443	    deletes any files on the receiving side that are not on the sending side.
 16444	    Files that are excluded from transfer are excluded from being deleted
 16445	    unless --delete-excluded is specified.
 16446	   
 16447	    has no effect if directory recursion is not selected.
 16448	   
 16449	--delete-excluded
 16450	   
 16451	    deletes any files on the receiving side that are excluded, in addition to
 16452	    deleting the files on the receiving side that are not on the sending side.
 16453	    (See --exclude.)
 16454	   
 16455	--delete-after
 16456	   
 16457	    processes file deletions after transferring files, as opposed to the
 16458	    default behavior of deleting before the transfer to ensure that there is
 16459	    sufficient space on the receiving filesystem.
 16460	   
 16461	-B, --block-size=BLOCKSIZE
 16462	   
 16463	    controls the block size used in the rsync algorithm. See the technical
 16464	    report for details.
 16465	   
 16466	-e, --rsh=COMMAND
 16467	   
 16468	    specifies the remote shell program to use for communication between the
 16469	    local and remote copies of rsync.
 16470	   
 16471	    You can also choose the remote shell program using the RSYNC_RSH
 16472	    environment variable.
 16473	   
 16474	--rsync-path=PATH
 16475	   
 16476	    specifies the path to the copy of rsync on the remote machine. Note that
 16477	    this is the full path to the binary, not just the directory that the binary
 16478	    is in.
 16479	   
 16480	--exclude=PATTERN
 16481	   
 16482	    selectively excludes certain files from the list of files to be
 16483	    transferred.
 16484	   
 16485	    You may use as many --exclude options on the command line as you like to
 16486	    build up the list of files to exclude.
 16487	   
 16488	--exclude-from=FILE
 16489	   
 16490	    is like the --exclude option, but instead adds all exclude patterns listed
 16491	    in the file FILE to the exclude list. Blank lines in FILE and lines
 16492	    starting with ´;´ or ´#´ are ignored.
 16493	   
 16494	--include=PATTERN
 16495	   
 16496	    does not exclude the specified pattern of filenames. This is useful as it
 16497	    allows you to build up quite complex exclude/include rules.
 16498	   
 16499	--include-from=FILE
 16500	   
 16501	    specifies a list of include patterns from a file.
 16502	   
 16503	-T, --temp-dir=DIR
 16504	   
 16505	    instructs rsync to use DIR as a scratch directory when creating temporary
 16506	    copies of the files transferred on the receiving side. The default behavior
 16507	    is to create the temporary files in the receiving directory.
 16508	   
 16509	-z, --compress
 16510	   
 16511	    compresses any data from the source file(s) that it sends to the
 16512	    destination machine.
 16513	   
 16514	--numeric-ids
 16515	   
 16516	    transfers numeric group and user ids rather than using user and group names
 16517	    and mapping them at both ends.
 16518	   
 16519	    By default rsync will use the user name and group name to determine what
 16520	    ownership to give files. The special uid 0 and the special group 0 are
 16521	    never mapped via user/group names even if --numeric-ids is not specified.
 16522	   
 16523	--timeout=TIMEOUT
 16524	   
 16525	    sets a maximum IO timeout in seconds. If no data is transferred for the
 16526	    specified time, rsync will exit. The default is 0, which means no timeout.
 16527	   
 16528	--port=PORT
 16529	   
 16530	    specifies an alternate TCP port number to use rather than the default port
 16531	    873. This only has effect when using rsync to connect to a remote rsync
 16532	    daemon.
 16533	   
 16534	--blocking-io
 16535	   
 16536	    specifies whether rsync will use blocking IO when launching a remote shell
 16537	    transport. You may find this is needed for some remote shells that can´t
 16538	    handle the default non-blocking IO.
 16539	   
 16540	--partial
 16541	   
 16542	    keeps any partially-transferred file in the event of an incomplete transfer
 16543	    (causing a subsequent transfer of the file remainder to process more
 16544	    rapidly) as opposed to the default behavior of rsync where an incomplete
 16545	    file is deleted.
 16546	   
 16547	--progress
 16548	   
 16549	    prints information showing the progress of the transfer.
 16550	   
 16551	-P
 16552	   
 16553	    is equivalent to --partial --progress.
 16554	   
 16555	--password-file
 16556	   
 16557	    allows you to provide a password in a file for accessing a remote rsync
 16558	    server. Note that this option is only useful when accessing a rsync server
 16559	    using the built in transport, not when using a remote shell as the
 16560	    transport. The file must not be world readable. It should contain just the
 16561	    password as a single line.
 16562	   
 16563	--bwlimit=KBPS
 16564	   
 16565	    specifies a maximum transfer rate in kilobytes per second. A value of zero
 16566	    specifies no limit.
 16567	   
 16568	sed
 16569	
 16570	Name
 16571	
 16572	sed -- stream editor
 16573	
 16574	Description
 16575	
 16576	sed is as specified in the SUS but with differences as listed below.
 16577	
 16578	Differences
 16579	
 16580	-V, --version
 16581	   
 16582	    prints out the version of sed that is being run and a copyright notice,
 16583	    then exits.
 16584	   
 16585	--quiet, --silent
 16586	   
 16587	    is equivalent to -n.
 16588	   
 16589	--expression
 16590	   
 16591	    is equivalent to -e.
 16592	   
 16593	--file=script-file
 16594	   
 16595	    is equivalent to -f.
 16596	   
 16597	sendmail
 16598	
 16599	Name
 16600	
 16601	sendmail -- an electronic mail transport agent
 16602	
 16603	Synopsis
 16604	
 16605	sendmail [flags] [address ...]
 16606	
 16607	Description
 16608	
 16609	To deliver electronic mail (email), applications shall support the interface
 16610	provided by /usr/sbin/sendmail (described here). This interface shall be the
 16611	default delivery method for applications.
 16612	
 16613	This program sends an email message to one or more recipients, routing the
 16614	message as necessary. This program is not intended as a user interface routine.
 16615	
 16616	With no flags, sendmail reads its standard input up to an end-of-file or a line
 16617	consisting only of a single dot and sends a copy of the message found there to
 16618	all of the addresses listed. It determines the network(s) to use based on the
 16619	syntax and contents of the addresses.
 16620	
 16621	It is recommended that applications use as few flags as necessary, none if
 16622	possible.
 16623	
 16624	Some agents allow aliasing on the local system to be prevented by preceding the
 16625	address with a backslash.
 16626	
 16627	The format of messages must be as defined in RFC 2822.
 16628	
 16629	Options
 16630	
 16631	-bm
 16632	   
 16633	    reads mail from standard input and delivers to the recipient addresses.
 16634	    This is the default mode of operation.
 16635	   
 16636	-bp
 16637	   
 16638	    lists information about messages currently in the input mail queue.
 16639	   
 16640	-bs
 16641	   
 16642	    uses the SMTP protocol as described in RFC 2821; reads SMTP commands on
 16643	    standard input and writes SMTP responses on standard output.
 16644	   
 16645	    Note that RFC 2821 specifies \r\n (CR-LF) be used at the end of each line,
 16646	    but Unix pipes almost always use \n (LF) instead. To deal with this, agents
 16647	    will accept both \r\n and \n at the end of each line. When accepting \r\n,
 16648	    the \r before the \n is silently discarded.
 16649	   
 16650	-F fullname
 16651	   
 16652	    explicitly sets the full name of the sender for incoming mail unless the
 16653	    message already contains a From: message header.
 16654	   
 16655	    If the user running sendmail is not sufficiently trusted, then the actual
 16656	    sender may be indicated in the message, depending on the behavior of the
 16657	    agent.
 16658	   
 16659	-f name
 16660	   
 16661	    explicitly sets the envelope sender address for incoming mail. If there is
 16662	    no From: header, the address specified in the From: header will also be
 16663	    set.
 16664	   
 16665	    If the user running sendmail is not sufficiently trusted, then the actual
 16666	    sender will be indicated in the message.
 16667	   
 16668	-i
 16669	   
 16670	    ignores dots alone on lines by themselves in incoming messages. This option
 16671	    is ignored when -bs is used.
 16672	   
 16673	-odb
 16674	   
 16675	    delivers any mail in background, if supported; otherwise ignored.
 16676	   
 16677	-odf
 16678	   
 16679	    delivers any mail in foreground, if supported; otherwise ignored.
 16680	   
 16681	-oem or -em
 16682	   
 16683	    mails errors back to the sender. (default)
 16684	   
 16685	-oep or -ep
 16686	   
 16687	    writes errors to the standard error output.
 16688	   
 16689	-oeq or -eq
 16690	   
 16691	    does not send notification of errors to the sender. This only works for
 16692	    mail delivered locally.
 16693	   
 16694	-oew or -ew
 16695	   
 16696	    writes errors to the sender's terminal using the write(1) command, if he is
 16697	    logged in. Otherwise, mails errors back to the sender. If not supported,
 16698	    reports errors in the same manner as -oem.
 16699	   
 16700	-oi
 16701	   
 16702	    is equivalent to -i.
 16703	   
 16704	-om
 16705	   
 16706	    indicates that the sender of a message should receive a copy of the message
 16707	    if the sender appears in an alias expansion. Ignored if aliases are not
 16708	    supported.
 16709	   
 16710	-t
 16711	   
 16712	    reads the message to obtain recipients from the To:, Cc:, and Bcc: headers
 16713	    in the message instead of from the command arguments. If a Bcc: header is
 16714	    present, it is removed from the message unless there is no To: or Cc:
 16715	    header, in which case a Bcc: header with no data is created, in accordance
 16716	    with RFC 2822.
 16717	   
 16718	    If there are any arguments, they specify addresses to which the message is
 16719	    not to be delivered. That is, the argument addresses are removed from the
 16720	    recipients list obtained from the headers. Note: some agents implement this
 16721	    behavior in reverse, adding addresses instead of removing them. Others may
 16722	    disallow addresses in argument list. Therefore, applications should not put
 16723	    addresses in the argument list if -t is used.
 16724	   
 16725	    This option is sometimes ignored when not in -bm mode (the default).
 16726	   
 16727	-v
 16728	   
 16729	    is more verbose. Additional -v options may make the software increasingly
 16730	    verbose.
 16731	   
 16732	Exit status
 16733	
 16734	0
 16735	   
 16736	    successful completion on all addresses. This does not indicate successful
 16737	    delivery.
 16738	   
 16739	>0
 16740	   
 16741	    there was an error.
 16742	   
 16743	Notes/Rationale
 16744	
 16745	This page is believed to reflect functionality provided by smail, exim and
 16746	other implementations, just not the sendmail implementation.
 16747	
 16748	There has been a suggestion to remove -oew, -ew, -om, -t, and -v. Also to
 16749	disallow -i when -bs is specified. Most of this strikes me as a good idea, but
 16750	it might want further discussion. Seems to me that the text "Some agents allow
 16751	aliasing on the local system to be prevented by preceding the address with a
 16752	backslash" needs to remain, if the behavior of different implementations really
 16753	does vary.
 16754	
 16755	shutdown
 16756	
 16757	Name
 16758	
 16759	shutdown -- bring the system down
 16760	
 16761	Synopsis
 16762	
 16763	/sbin/shutdown [-t sec] [-arkhcfF] time [warning-message]
 16764	
 16765	Description
 16766	
 16767	shutdown brings the system down in a secure way. All logged-in users are
 16768	notified that the system is going down, and login(1) is blocked. It is possible
 16769	to shut the system down immediately or after a specified delay. All processes
 16770	are first notified that the system is going down by the signal SIGTERM.
 16771	
 16772	Standard Options
 16773	
 16774	-a
 16775	   
 16776	    uses /etc/shutdown.allow.
 16777	   
 16778	-t sec
 16779	   
 16780	    tells init(8) to wait sec seconds between sending processes the warning and
 16781	    the kill signal, before changing to another runlevel.
 16782	   
 16783	-k
 16784	   
 16785	    doesn't really shutdown; only sends the warning messages to everybody.
 16786	   
 16787	-r
 16788	   
 16789	    reboots after shutdown.
 16790	   
 16791	-h
 16792	   
 16793	    halts after shutdown.
 16794	   
 16795	-f
 16796	   
 16797	    skips fsck on reboot.
 16798	   
 16799	-F
 16800	   
 16801	    forces fsck on reboot.
 16802	   
 16803	-c
 16804	   
 16805	    cancels an already running shutdown. With this option, it is of course not
 16806	    possible to give the time argument, but you can enter a explanatory message
 16807	    on the command line that will be sent to all users.
 16808	   
 16809	time
 16810	   
 16811	    specifies when to shut down.
 16812	   
 16813	    The time argument can have different formats. First, it can be an absolute
 16814	    time in the format hh:mm, in which hh is the hour (1 or 2 digits) and mm is
 16815	    the minute of the hour (in two digits). Second, it can be in the format +m,
 16816	    in which m is the number of minutes to wait. The word now is an alias for
 16817	    +0.
 16818	   
 16819	    If shutdown is called with a delay, it creates the advisory file /etc/
 16820	    nologin which causes programs such as login(1) to not allow new user
 16821	    logins. shutdown only removes this file if it is stopped before it can
 16822	    signal init (i.e. it is cancelled or something goes wrong). Otherwise it is
 16823	    the responsibility of the system shutdown or startup scripts to remove this
 16824	    file so that users can login.
 16825	   
 16826	warning-message
 16827	   
 16828	    specifies message to send all users.
 16829	   
 16830	sleep
 16831	
 16832	Name
 16833	
 16834	sleep -- delay for a specified amount of time
 16835	
 16836	Synopsis
 16837	
 16838	sleep [OPTION]... NUMBER[SUFFIX]
 16839	
 16840	Description
 16841	
 16842	Pause for NUMBER seconds. SUFFIX may be s to keep seconds, m for minutes, h for
 16843	hours or d for days.
 16844	
 16845	Standard Options
 16846	
 16847	--help
 16848	   
 16849	    displays help and exits.
 16850	   
 16851	--version
 16852	   
 16853	    outputs version information and exits.
 16854	   
 16855	sort
 16856	
 16857	Name
 16858	
 16859	sort -- sort, merge or sequence check text files
 16860	
 16861	Description
 16862	
 16863	sort is as specified in the SUS but with differences as listed below.
 16864	
 16865	Differences
 16866	
 16867	-g
 16868	   
 16869	    compares according to general numerical value, implies -b.
 16870	   
 16871	-M
 16872	   
 16873	    compares (unknown) < JAN < ... < DEC, imply -b.
 16874	   
 16875	-s
 16876	   
 16877	    stabilizes sort by disabling last resort comparison.
 16878	   
 16879	-T DIRECTORY
 16880	   
 16881	    uses DIRECTORY for temporary files, not $TMPDIR or /tmp.
 16882	   
 16883	-z
 16884	   
 16885	    has implementation-dependent behavior.
 16886	   
 16887	--version
 16888	   
 16889	    outputs version information and exits.
 16890	   
 16891	split
 16892	
 16893	Name
 16894	
 16895	split -- split a file into pieces
 16896	
 16897	Description
 16898	
 16899	split is as specified in the SUS but with differences as listed below.
 16900	
 16901	Differences
 16902	
 16903	-a suffix_length
 16904	   
 16905	    has implementation-dependent behavior.
 16906	   
 16907	--bytes=SIZE
 16908	   
 16909	    is equivalent to -b.
 16910	   
 16911	-C, --line-bytes
 16912	   
 16913	    puts at most SIZE bytes of lines per output file.
 16914	   
 16915	--lines
 16916	   
 16917	    is equivalent to -l.
 16918	   
 16919	--verbose
 16920	   
 16921	    prints a diagnostic to standard error.
 16922	   
 16923	--version
 16924	   
 16925	    outputs version information and exits.
 16926	   
 16927	strip
 16928	
 16929	Name
 16930	
 16931	strip -- remove unnecessary information from executable files
 16932	
 16933	Description
 16934	
 16935	strip is as specified in the SUS but with differences as listed below.
 16936	
 16937	Differences
 16938	
 16939	-F bdfname, --target=bfdname
 16940	   
 16941	    treats the original objfile as a file with the object code format bfdname,
 16942	    and rewrites it in the same format.
 16943	   
 16944	-I bfdname, --input-target=bfdname
 16945	   
 16946	    treats the original objfile as a file with the object code format bfdname.
 16947	   
 16948	-O bdfname, --output-target=bfdname
 16949	   
 16950	    replaces objfile with a file in the output format bfdname.
 16951	   
 16952	-R sectionname, --remove-section=sectionname
 16953	   
 16954	    removes the named section from the file. This option may be given more than
 16955	    once. Note that using this option inappropriately may make the object file
 16956	    unusable.
 16957	   
 16958	-s, --strip-all
 16959	   
 16960	    removes all symbols.
 16961	   
 16962	-S, -g, --strip-debug
 16963	   
 16964	    removes debugging symbols only.
 16965	   
 16966	--strip-unneeded
 16967	   
 16968	    strips all symbols that are not needed for relocation processing.
 16969	   
 16970	-N symbolname, --strip-symbol=symbolname
 16971	   
 16972	    removes symbol symbolname from the source file. This option may be given
 16973	    more than once, and may be combined with other strip options.
 16974	   
 16975	-o file
 16976	   
 16977	    puts the stripped output in file, rather than replacing the existing file.
 16978	    When this argument is used, only one objfile argument may be specified.
 16979	   
 16980	-p, --preserve-dates
 16981	   
 16982	    preserves the access and modification dates of the file.
 16983	   
 16984	-x, --discard-all
 16985	   
 16986	    removes non-global symbols.
 16987	   
 16988	-X, --discard-locals
 16989	   
 16990	    removes compiler-generated local symbols. (These usually start with `L' or
 16991	    `.'.)
 16992	   
 16993	-K symbolname, --keep-symbol=symbolname
 16994	   
 16995	    copies only symbol symbolname from the source file. This option may be
 16996	    given more than once.
 16997	   
 16998	-N symbolname, --strip-symbol=symbolname
 16999	   
 17000	    does not copy symbol symbolname from the source file. This option may be
 17001	    given more than once, and may be combined with strip options other than -K.
 17002	   
 17003	-v, --verbose
 17004	   
 17005	    lists all object files modified. In the case of archives, lists all members
 17006	    of the archive.
 17007	   
 17008	--version
 17009	   
 17010	    shows the version number for strip and exits.
 17011	   
 17012	su
 17013	
 17014	Name
 17015	
 17016	su -- change user ID or become super-user
 17017	
 17018	Synopsis
 17019	
 17020	su [OPTS] [-] [username [ARGS]]
 17021	
 17022	Description
 17023	
 17024	su is used to become another user during a login session. Invoked without a
 17025	username, su defaults to becoming the super user. The optional argument - may
 17026	be used to provide an environment similar to what the user would expect had the
 17027	user logged in directly.
 17028	
 17029	The user will be prompted for a password, if appropriate. Invalid passwords
 17030	will produce an error message. All attempts, both valid and invalid, are logged
 17031	to detect abuses of the system.
 17032	
 17033	An optional command can be executed. This is done by the shell specified in /
 17034	etc/passwd for the target user unless the -s or -m options are used. Any
 17035	arguments supplied after the username will be passed to the invoked shell
 17036	(shell must support the -c command line option in order for a command to be
 17037	passed to it).
 17038	
 17039	The current environment is passed to the new shell. The value of $PATH is reset
 17040	to /bin:/usr/bin for normal users, or /sbin:/bin:/usr/sbin:/usr/bin for the
 17041	super user. This may be changed with the ENV_PATH and ENV_SUPATH definitions in
 17042	/etc/login.defs. When using the -m or -p options, the user's environment is not
 17043	changed.
 17044	
 17045	A subsystem login is indicated by the presense of a "*" as the first character
 17046	of the login shell. The given home directory will be used as the root of a new
 17047	filesystem which the user is actually logged into.
 17048	
 17049	Standard Options
 17050	
 17051	-
 17052	   
 17053	    makes this a login shell.
 17054	   
 17055	-c, --comand=command
 17056	   
 17057	    passes command to the invoked shell. It is passed directly to the invoked
 17058	    shell (using the shell's -c option), so its syntax is whatever that shell
 17059	    will accept.
 17060	   
 17061	-m, -p, --preserve-environment
 17062	   
 17063	    does not reset environment variables, and keeps the same shell if it is
 17064	    present in /etc/shells.
 17065	   
 17066	-s, --shell=shell
 17067	   
 17068	    uses shell instead of the default in /etc/passwd. The shell specified must
 17069	    be present in /etc/shells.
 17070	   
 17071	sum
 17072	
 17073	Name
 17074	
 17075	sum -- print checksum and block count of a file
 17076	
 17077	Description
 17078	
 17079	sum is as specified in the SUS but with differences as listed below.
 17080	
 17081	Differences
 17082	
 17083	-s, --sysv
 17084	   
 17085	    uses System V sum algorithm, uses 512 bytes blocks.
 17086	   
 17087	--version
 17088	   
 17089	    outputs version information and exits.
 17090	   
 17091	sync
 17092	
 17093	Name
 17094	
 17095	sync -- flush filesystem buffers
 17096	
 17097	Synopsis
 17098	
 17099	sync [OPTION]
 17100	
 17101	Description
 17102	
 17103	Force changed blocks to disk, update the super block.
 17104	
 17105	Standard Options
 17106	
 17107	--help
 17108	   
 17109	    displays help and exits.
 17110	   
 17111	--version
 17112	   
 17113	    outputs version information and exits.
 17114	   
 17115	tail
 17116	
 17117	Name
 17118	
 17119	tail -- output the last part of files
 17120	
 17121	Description
 17122	
 17123	tail is as specified in the SUS but with differences as listed below.
 17124	
 17125	Differences
 17126	
 17127	--retry
 17128	   
 17129	    tries to open a file even if it is inaccessible when tail starts or if it
 17130	    becomes inaccessible later; useful only with -f.
 17131	   
 17132	--bytes=N
 17133	   
 17134	    outputs the last N bytes.
 17135	   
 17136	--follow
 17137	   
 17138	    is equivalent to -f.
 17139	   
 17140	--lines=N
 17141	   
 17142	    is equivalent to -n.
 17143	   
 17144	--max-unchanged-stats=N
 17145	   
 17146	    performs open/fstat of a file specified by name (if there have been N
 17147	    consecutive iterations for which the size has remained the same) to
 17148	    determine if that file name is still associated with the same device/
 17149	    inode-number pair as before.
 17150	   
 17151	--max-consecutive-size-changes=N
 17152	   
 17153	    if a file has been specified by name, controls how long tail follows the
 17154	    descriptor of a file that continues growing at a rapid pace even after it
 17155	    is deleted or renamed. After detecting N consecutive size changes for a
 17156	    file, open/fstat the file to determine if that file name is still
 17157	    associated with the same device/inode-number pair as before.
 17158	   
 17159	--pid=PID
 17160	   
 17161	    terminates after process ID PID dies (only may be specified if -f is).
 17162	   
 17163	-q, --quiet, --silent
 17164	   
 17165	    does not outputs headers giving file names.
 17166	   
 17167	-s, --sleep-interval=S
 17168	   
 17169	    sleeps S seconds between iterations (only may be specified if -f is).
 17170	   
 17171	-v, --verbose
 17172	   
 17173	    outputs headers giving file names.
 17174	   
 17175	+NUMBER, -NUMBER
 17176	   
 17177	    supports b, k and m as suffixes (referring to multipliers 512, 1024 and
 17178	    1048576, respectively), as opposed to the c or l suffixes as stated in the
 17179	    SUS.
 17180	   
 17181	tar
 17182	
 17183	Name
 17184	
 17185	tar -- file archiver
 17186	
 17187	Description
 17188	
 17189	tar is as specified in the SUS but with differences as listed below.
 17190	
 17191	Differences
 17192	
 17193	-A, --catenate, --concatenate
 17194	   
 17195	    appends tar files to an archive.
 17196	   
 17197	--create
 17198	   
 17199	    is equivalent to -c.
 17200	   
 17201	-d, --diff, --compare
 17202	   
 17203	    finds differences between archive and file system.
 17204	   
 17205	--delete
 17206	   
 17207	    deletes from the archive. (Not for use on mag tapes!)
 17208	   
 17209	--apend
 17210	   
 17211	    is equivalent to -r.
 17212	   
 17213	--list
 17214	   
 17215	    is equivalent to -t.
 17216	   
 17217	--update
 17218	   
 17219	    is equivalent to -u.
 17220	   
 17221	--extract, --get
 17222	   
 17223	    extracts files from an archive.
 17224	   
 17225	--atime-preserve
 17226	   
 17227	    does not change access times on dumped files.
 17228	   
 17229	--block-size N
 17230	   
 17231	    is equivalent to -b.
 17232	   
 17233	-B, --read-full-blocks
 17234	   
 17235	    reblocks as we read; for reading 4.2BSD pipes.
 17236	   
 17237	-C, --directory DIR
 17238	   
 17239	    changes to directory DIR.
 17240	   
 17241	--checkpoint
 17242	   
 17243	    prints directory names while reading the archive.
 17244	   
 17245	-f, --file [HOSTNAME:]F
 17246	   
 17247	    uses archive file or device F. The default is "-", meaning stdin/stdout.
 17248	   
 17249	--force-local
 17250	   
 17251	    specifies that archive file is local even if has a colon.
 17252	   
 17253	-F, --info-script F, --new-volume-script F
 17254	   
 17255	    runs script at end of each tape; implies -M.
 17256	   
 17257	-G, --incremental
 17258	   
 17259	    creates/lists/extracts old GNU-format incremental backup.
 17260	   
 17261	-g, --listed-incremental F
 17262	   
 17263	    creates/lists/extracts new GNU-format incremental backup.
 17264	   
 17265	-h, --dereference
 17266	   
 17267	    doesn't dump symlinks; dumps the files they point to.
 17268	   
 17269	-i, --ignore-zeros
 17270	   
 17271	    ignores blocks of zeros in archive that normally mean EOF.
 17272	   
 17273	--bzip2
 17274	   
 17275	    filters archive through bzip2; used to decompress .bz2 files.
 17276	   
 17277	--ignore-failed-read
 17278	   
 17279	    doesn't exit with non-zero status on unreadable files.
 17280	   
 17281	-k, --keep-old-files
 17282	   
 17283	    keeps existing files; doesn't overwrite them from archive.
 17284	   
 17285	-K, --starting-file F
 17286	   
 17287	    begins at file F in the archive.
 17288	   
 17289	-l, --one-file-system
 17290	   
 17291	    stays in local file system when creating an archive.
 17292	   
 17293	-L, --tape-length N
 17294	   
 17295	    changes tapes after writing N*1024 bytes.
 17296	   
 17297	--modification-time
 17298	   
 17299	    is equivalent to -m.
 17300	   
 17301	-M, --multi-volume
 17302	   
 17303	    creates/lists/extracts multi-volume archive.
 17304	   
 17305	-N, --after-date DATE, --newer DATE
 17306	   
 17307	    stores only files newer than DATE.
 17308	   
 17309	-o, --old-archive, --portability
 17310	   
 17311	    writes a V7 format archive, rather than ANSI format. Note that for -o the
 17312	    behavior is different than what is specified in the SUSv2.
 17313	   
 17314	-O, --to-stdout
 17315	   
 17316	    extracts files to standard output.
 17317	   
 17318	-p, --same-permissions, --preserve-permissions
 17319	   
 17320	    extracts all protection information.
 17321	   
 17322	-P, --absolute-paths
 17323	   
 17324	    does not strip leading /s from file names.
 17325	   
 17326	--preserve
 17327	   
 17328	    is equivalent to -p -s.
 17329	   
 17330	-R, --record-number
 17331	   
 17332	    shows record number within archive with each message.
 17333	   
 17334	--remove-files
 17335	   
 17336	    removes files after adding them to the archive.
 17337	   
 17338	-s, --same-order, --preserve-order
 17339	   
 17340	    sorts list of names to extract to match archive.
 17341	   
 17342	--same-owner
 17343	   
 17344	    creates extracted files with the same ownership.
 17345	   
 17346	-S, --sparse
 17347	   
 17348	    handles sparse files efficiently.
 17349	   
 17350	-T, --files-from F
 17351	   
 17352	    gets names to extract or create from file F.
 17353	   
 17354	--null
 17355	   
 17356	    causes -T to read null-terminated names; disables -C.
 17357	   
 17358	--totals
 17359	   
 17360	    prints total bytes written with --create.
 17361	   
 17362	--verbose
 17363	   
 17364	    is equivalent to -v.
 17365	   
 17366	-V, --label NAME
 17367	   
 17368	    creates archive with volume name NAME.
 17369	   
 17370	--version
 17371	   
 17372	    prints tar program version number.
 17373	   
 17374	-w, --interactive, --confirmation
 17375	   
 17376	    asks for confirmation for every action.
 17377	   
 17378	-W, --verify
 17379	   
 17380	    attempts to verify the archive after writing it.
 17381	   
 17382	--exclude FILE
 17383	   
 17384	    excludes file FILE.
 17385	   
 17386	-X, --exclude-from FILE
 17387	   
 17388	    excludes files listed in FILE.
 17389	   
 17390	-Z, --compress, --uncompress
 17391	   
 17392	    filters the archive through compress.
 17393	   
 17394	-z, --gzip, --ungzip
 17395	   
 17396	    filters the archive through gzip.
 17397	   
 17398	--use-compress-program PROG
 17399	   
 17400	    filters the archive through PROG (which must accept -d)
 17401	   
 17402	--block-compress
 17403	   
 17404	    blocks the output of compression program for tapes.
 17405	   
 17406	-[0-7][lmh]
 17407	   
 17408	    specifies drive and density.
 17409	   
 17410	tee
 17411	
 17412	Name
 17413	
 17414	tee -- read from standard input and write to standard output and files
 17415	
 17416	Description
 17417	
 17418	tee is as specified in the SUS but with differences as listed below.
 17419	
 17420	Differences
 17421	
 17422	--append
 17423	   
 17424	    is equivalent to -a.
 17425	   
 17426	--ignore-interrupts
 17427	   
 17428	    is equivalent to -i.
 17429	   
 17430	--version
 17431	   
 17432	    outputs version information and exits.
 17433	   
 17434	test
 17435	
 17436	Name
 17437	
 17438	test -- check file types and compare values
 17439	
 17440	Description
 17441	
 17442	test is as specified in the SUS but with differences as listed below.
 17443	
 17444	Differences
 17445	
 17446	-G FILE
 17447	   
 17448	    FILE exists and is owned by the effective group ID.
 17449	   
 17450	-k FILE
 17451	   
 17452	    FILE exists and has its sticky bit set.
 17453	   
 17454	-L FILE
 17455	   
 17456	    FILE exists and is a symbolic link.
 17457	   
 17458	-O FILE
 17459	   
 17460	    FILE exists and is owned by the effective user ID.
 17461	   
 17462	-S
 17463	   
 17464	    FILE exists and is a socket.
 17465	   
 17466	time
 17467	
 17468	Name
 17469	
 17470	time -- run programs and summarize system resource usage
 17471	
 17472	Description
 17473	
 17474	time is as specified in the SUS but with differences as listed below.
 17475	
 17476	Differences
 17477	
 17478	-o FILE, --output=FILE
 17479	   
 17480	    writes the resource use statistics to FILE instead of to the standard error
 17481	    stream. By default, this overwrites the file, destroying the file's
 17482	    previous contents.
 17483	   
 17484	-a, --append
 17485	   
 17486	    appends the resource use information to the output file instead of
 17487	    overwriting it.
 17488	   
 17489	-f FORMAT, --format=FORMAT
 17490	   
 17491	    uses FORMAT as the format string that controls the output of time. See
 17492	    "Formatting the Output" below more information.
 17493	   
 17494	--portability
 17495	   
 17496	    is equivalent to -p.
 17497	   
 17498	-v, --verbose
 17499	   
 17500	    displays each available piece of information on the program's resource use
 17501	    on its own line, with an English description of its meaning.
 17502	   
 17503	-V, --version
 17504	   
 17505	    prints the version number of time and exits.
 17506	   
 17507	Formatting the Output
 17508	
 17509	The format string FORMAT controls the contents of the time output. The format
 17510	string can be set using the -f or --format, -v or --verbose, or -p or
 17511	--portability options. If they are not given, but the TIME environment variable
 17512	is set, its value is used as the format string. Otherwise, a built-in default
 17513	format is used.
 17514	
 17515	The default format is:
 17516	
 17517	%Uuser %Ssystem %Eelapsed %PCPU (%Xtext+%Ddata %Mmax)k
 17518	%Iinputs+%Ooutputs (%Fmajor+%Rminor)pagefaults %Wswaps
 17519	
 17520	The format string usually consists of resource specifiers interspersed with
 17521	plain text. A percent sign (%) in the format string causes the following
 17522	character to be interpreted as a resource specifier, which is similar to the
 17523	formatting characters in the printf(3) function.
 17524	
 17525	A backslash (\) introduces a backslash escape, which is translated into a
 17526	single printing character upon output. \t outputs a tab character, \n outputs a
 17527	newline, and \\ outputs a backslash. A backslash followed by any other
 17528	character outputs a question mark (?) followed by a backslash, to indicate that
 17529	an invalid backslash escape was given.
 17530	
 17531	Other text in the format string is copied verbatim to the output. time always
 17532	prints a newline after printing the resource use information, so normally
 17533	format strings do not end with a newline character (or 0).
 17534	
 17535	There are many resource specifications. Not all resources are measured by all
 17536	versions of Unix, so some of the values might be reported as zero. Any
 17537	character following a percent sign that is not listed in the table below causes
 17538	a question mark (`?') to be output, followed by that character, to indicate
 17539	that an invalid resource listed in the table below causes a question mark (`?')
 17540	to be output, followed by that character, to indicate that an invalid resource
 17541	specifier was given.
 17542	
 17543	The resource specifiers, which are a superset of those recognized by the tcsh
 17544	(1) builtin `time' command, are:
 17545	
 17546	%
 17547	   
 17548	    literal `%'.
 17549	   
 17550	C
 17551	   
 17552	    name and command line arguments of the command being timed.
 17553	   
 17554	D
 17555	   
 17556	    average size of the processs unshared data area, in units of 1024 bytes.
 17557	   
 17558	E
 17559	   
 17560	    elapsed real (wall clock) time used by the process, in [hours:]minutes:
 17561	    seconds.
 17562	   
 17563	F
 17564	   
 17565	    number of major, or I/O-requiring, page faults that occurred while the
 17566	    process was running. These are faults where the page has actually migrated
 17567	    out of primary memory.
 17568	   
 17569	I
 17570	   
 17571	    number of file system inputs by the process.
 17572	   
 17573	K
 17574	   
 17575	    average total (data+stack+text) memory use of the process, in units of 1024
 17576	    bytes.
 17577	   
 17578	M
 17579	   
 17580	    maximum resident set size of the process during its lifetime, in units of
 17581	    1024 bytes.
 17582	   
 17583	O
 17584	   
 17585	    number of file system outputs by the process.
 17586	   
 17587	P
 17588	   
 17589	    percentage of the CPU that this job got. This is just user + system times
 17590	    divided by the total running time.
 17591	   
 17592	R
 17593	   
 17594	    number of minor, or recoverable, page faults. These are pages that are not
 17595	    valid (so they fault) but which have not yet been claimed by other virtual
 17596	    pages. Thus the data in the page is still valid but the system tables must
 17597	    be updated.
 17598	   
 17599	S
 17600	   
 17601	    total number of CPU-seconds used by the system on behalf of the process (in
 17602	    kernel mode), in seconds.
 17603	   
 17604	U
 17605	   
 17606	    total number of CPU-seconds that the process used directly (in user mode),
 17607	    in seconds.
 17608	   
 17609	W
 17610	   
 17611	    number of times the process was swapped out of main memory.
 17612	   
 17613	X
 17614	   
 17615	    average amount of shared text in the process, in units of 1024 bytes.
 17616	   
 17617	Z
 17618	   
 17619	    system's page size, in bytes. This is a per-system constant, but varies
 17620	    between systems.
 17621	   
 17622	c
 17623	   
 17624	    number of times the process was context-switched involuntarily (because the
 17625	    time slice expired).
 17626	   
 17627	e
 17628	   
 17629	    elapsed real (wall clock) time used by the process, in seconds.
 17630	   
 17631	k
 17632	   
 17633	    number of signals delivered to the process.
 17634	   
 17635	p
 17636	   
 17637	    average unshared stack size of the process, in units of 1024 bytes.
 17638	   
 17639	r
 17640	   
 17641	    number of socket messages received by the process.
 17642	   
 17643	s
 17644	   
 17645	    number of socket messages sent by the process.
 17646	   
 17647	t
 17648	   
 17649	    average resident set size of the process, in units of 1024 bytes.
 17650	   
 17651	w
 17652	   
 17653	    number of times that the program was context-switched voluntarily, for
 17654	    instance while waiting for an I/O operation to complete.
 17655	   
 17656	x
 17657	   
 17658	    exit status of the command.
 17659	   
 17660	touch
 17661	
 17662	Name
 17663	
 17664	touch -- change file access and modification times
 17665	
 17666	Description
 17667	
 17668	touch is as specified in the SUS but with differences as listed below.
 17669	
 17670	Differences
 17671	
 17672	--no-create
 17673	   
 17674	    is equivalent to -c.
 17675	   
 17676	-d, --date=STRING
 17677	   
 17678	    parses STRING and uses it instead of current time.
 17679	   
 17680	--reference=FILE
 17681	   
 17682	    is equivalent to -r.
 17683	   
 17684	--time=WORD
 17685	   
 17686	    sets time given by WORD: access atime use (same as -a) modify mtime (same
 17687	    as -m).
 17688	   
 17689	--version
 17690	   
 17691	    outputs version information and exits.
 17692	   
 17693	tr
 17694	
 17695	Name
 17696	
 17697	tr -- translate or delete characters
 17698	
 17699	Description
 17700	
 17701	tr is as specified in the SUS but with differences as listed below.
 17702	
 17703	Differences
 17704	
 17705	--complement
 17706	   
 17707	    is equivalent to -c.
 17708	   
 17709	--delete
 17710	   
 17711	    is equivalent to -d.
 17712	   
 17713	--squeeze-repeats
 17714	   
 17715	    is equivalent to -s.
 17716	   
 17717	-t, --truncate-set1
 17718	   
 17719	    first truncates SET1 to length of SET2.
 17720	   
 17721	--version
 17722	   
 17723	    outputs version information and exits.
 17724	   
 17725	tty
 17726	
 17727	Name
 17728	
 17729	tty -- print the file name of the terminal connected to standard input
 17730	
 17731	Description
 17732	
 17733	tty is as specified in the SUS but with differences as listed below.
 17734	
 17735	Differences
 17736	
 17737	--silent, --quiet
 17738	   
 17739	    is equivalent to -s.
 17740	   
 17741	--delete
 17742	   
 17743	    is equivalent to -d.
 17744	   
 17745	--squeeze-repeats
 17746	   
 17747	    is equivalent to -s.
 17748	   
 17749	--version
 17750	   
 17751	    outputs version information and exits.
 17752	   
 17753	umount
 17754	
 17755	Name
 17756	
 17757	umount -- unmount file systems
 17758	
 17759	Synopsis
 17760	
 17761	umount [-hV]
 17762	umount -a [-nrv] [-t vfstype]
 17763	umount [-nrv] device | dir [...]
 17764	
 17765	Description
 17766	
 17767	umount detaches the file system(s) mentioned from the file hierarchy. A file
 17768	system is specified by giving the directory where it has been mounted.
 17769	
 17770	Standard Options
 17771	
 17772	-V
 17773	   
 17774	    print version and exits.
 17775	   
 17776	-v
 17777	   
 17778	    invokes verbose mode.
 17779	   
 17780	-n
 17781	   
 17782	    unmounts without writing in /etc/mtab.
 17783	   
 17784	-r
 17785	   
 17786	    tries to remount read-only if unmounting fails.
 17787	   
 17788	-a
 17789	   
 17790	    unmounts all of the file systems described in /etc/mtab except for the proc
 17791	    filesystem.
 17792	   
 17793	-t vfstype
 17794	   
 17795	    indicates that the actions should only be taken on file systems of the
 17796	    specified type. More than one type may be specified in a comma separated
 17797	    list. The list of file system types can be prefixed with no to specify the
 17798	    file system types on which no action should be taken.
 17799	   
 17800	-f
 17801	   
 17802	    forces unmount (in case of an unreachable NFS system).
 17803	   
 17804	uname
 17805	
 17806	Name
 17807	
 17808	uname -- return system name
 17809	
 17810	Description
 17811	
 17812	uname is as specified in the SUS but with differences as listed below.
 17813	
 17814	Differences
 17815	
 17816	-a, --all
 17817	   
 17818	    prints all information (not just the options specified in the SUS).
 17819	   
 17820	--machine
 17821	   
 17822	    is equivalent to -m.
 17823	   
 17824	--nodename
 17825	   
 17826	    is equivalent to -n.
 17827	   
 17828	--release
 17829	   
 17830	    is equivalent to -r.
 17831	   
 17832	-p, --processor
 17833	   
 17834	    prints the host processor type.
 17835	   
 17836	--sysname
 17837	   
 17838	    is equivalent to -s.
 17839	   
 17840	--version
 17841	   
 17842	    outputs version information and exits.
 17843	   
 17844	unexpand
 17845	
 17846	Name
 17847	
 17848	unexpand -- convert spaces to tabs
 17849	
 17850	Description
 17851	
 17852	unexpand is as specified in the SUS but with differences as listed below.
 17853	
 17854	Differences
 17855	
 17856	--tabs=NUMBER, -NUMBER
 17857	   
 17858	    is equivalent to -t NUMBER.
 17859	   
 17860	--tabs=LIST, -LIST
 17861	   
 17862	    is equivalent to -t LIST.
 17863	   
 17864	uniq
 17865	
 17866	Name
 17867	
 17868	uniq -- remove duplicate lines from a sorted file
 17869	
 17870	Description
 17871	
 17872	uniq is as specified in the SUS but with differences as listed below.
 17873	
 17874	Differences
 17875	
 17876	--count
 17877	   
 17878	    is equivalent to -c.
 17879	   
 17880	--repeated
 17881	   
 17882	    is equivalent to -d.
 17883	   
 17884	-D, --all-repeated
 17885	   
 17886	    prints all duplicate lines.
 17887	   
 17888	--skip-fields=N
 17889	   
 17890	    is equivalent to -f fields.
 17891	   
 17892	-i, --ignore-case
 17893	   
 17894	    ignores differences in case when comparing.
 17895	   
 17896	--skip-chars=N
 17897	   
 17898	    is equivalent to -s.
 17899	   
 17900	--unique
 17901	   
 17902	    is equivalent to -u.
 17903	   
 17904	-w, --check-chars=N
 17905	   
 17906	    compares no more than N characters in lines.
 17907	   
 17908	--version
 17909	   
 17910	    outputs version information and exits.
 17911	   
 17912	useradd
 17913	
 17914	Name
 17915	
 17916	useradd -- create a new user or update default new user information
 17917	
 17918	Synopsis
 17919	
 17920	useradd [-c comment] [-d home_dir]
 17921	        [-e expire_date] [-f inactive_time]
 17922	        [-g initial_group] [-G group[,...]]
 17923	        [-m [-k skeleton_dir]] [-p passwd] [-r]
 17924	        [-s shell] [-u uid [ -o]] login
 17925	
 17926	useradd -D [-g default_group] [-b default_home]
 17927	           [-f default_inactive] [-e default_expire_date]
 17928	           [-s default_shell]
 17929	
 17930	Description
 17931	
 17932	When invoked without the -D option, useradd creates a new user account using
 17933	the values specified on the command line and the default values from the
 17934	system. The new user account will be entered into the system files as needed,
 17935	the home directory will be created, and initial files copied, depending on the
 17936	command line options.
 17937	
 17938	When invoked with the -D option, useradd will either display the current
 17939	default values, or update the default values from the command line. If no
 17940	options are specified, useradd displays the current default values.
 17941	
 17942	Standard Options
 17943	
 17944	-c comment
 17945	   
 17946	    specifies the new user's password file comment field value.
 17947	   
 17948	-d home_dir
 17949	   
 17950	    creates the new user using home_dir as the value for the user's login
 17951	    directory. The default is to append the login name to default_home and use
 17952	    that as the login directory name.
 17953	   
 17954	-e expire_date
 17955	   
 17956	    specifies the date on which the user account will be disabled. The date is
 17957	    specified in the format YYYY-MM-DD.
 17958	   
 17959	-f inactive_days
 17960	   
 17961	    specifies the number of days after a password expires until the account is
 17962	    permanently disabled. A value of 0 disables the account as soon as the
 17963	    password has expired, and a value of -1 disables the feature. The default
 17964	    value is -1.
 17965	   
 17966	-g initial_group
 17967	   
 17968	    specifies the group name or number of the user's initial login group. The
 17969	    group name must exist. A group number must refer to an already existing
 17970	    group. If -g is not specified, the implementation will follow the normal
 17971	    user default for that system. This may create a new group or choose a
 17972	    default group that normal users are placed in. Applications which require
 17973	    control of the groups into which a user is placed should specify -g.
 17974	   
 17975	-G group,[...]
 17976	   
 17977	    specifies a list of supplementary groups which the user is also a member
 17978	    of. Each group is separated from the next by a comma, with no intervening
 17979	    whitespace. The groups are subject to the same restrictions as the group
 17980	    given with the -g option. The default is for the user to belong only to the
 17981	    initial group.
 17982	   
 17983	-m [-k skeleton_dir]
 17984	   
 17985	    specifies the user's home directory will be created if it does not exist.
 17986	    The files contained in skeleton_dir will be copied to the home directory if
 17987	    the -k option is used, otherwise the files contained in /etc/skel will be
 17988	    used instead. Any directories contained in skeleton_dir or /etc/skel will
 17989	    be created in the user's home directory as well. The -k option is only
 17990	    valid in conjunction with the -m option. The default is to not create the
 17991	    directory and to not copy any files.
 17992	   
 17993	-p passwd
 17994	   
 17995	    is the encrypted password, as returned by crypt(3). The default is to
 17996	    disable the account.
 17997	   
 17998	-r
 17999	   
 18000	    creates a system account, that is, a user with a UID in the range reserved
 18001	    for system account users. If there is not a UID free in the reserved range
 18002	    the command will fail.
 18003	   
 18004	-s shell
 18005	   
 18006	    specifies the name of the user's login shell. The default is to leave this
 18007	    field blank, which causes the system to select the default login shell.
 18008	   
 18009	-u uid [-o]
 18010	   
 18011	    specifies the numerical value of the user's ID. This value must be unique,
 18012	    unless the -o option is used. The value must be non-negative. The default
 18013	    is the smallest ID value greater than 499 which is not yet used.
 18014	   
 18015	Change Default Options
 18016	
 18017	-b default_home
 18018	   
 18019	    specifies the initial path prefix for a new user's home directory. The
 18020	    user's name will be affixed to the end of default_home to create the new
 18021	    directory name if the -d option is not used when creating a new account.
 18022	   
 18023	-e default_expire_date
 18024	   
 18025	    specifies the date on which the user account is disabled.
 18026	   
 18027	-f default_inactive
 18028	   
 18029	    specifies the number of days after a password has expired before the
 18030	    account will be disabled.
 18031	   
 18032	-g default_group
 18033	   
 18034	    specifies the group name or ID for a new user's initial group. The named
 18035	    group must exist, and a numerical group ID must have an existing entry.
 18036	   
 18037	-s default_shell
 18038	   
 18039	    specifies the name of the new user's login shell. The named program will be
 18040	    used for all future new user accounts.
 18041	   
 18042	-c comment
 18043	   
 18044	    specifies the new user's password file comment field value.
 18045	   
 18046	userdel
 18047	
 18048	Name
 18049	
 18050	userdel -- delete a user account and related files
 18051	
 18052	Synopsis
 18053	
 18054	userdel [-r] login
 18055	
 18056	Description
 18057	
 18058	Delete the user account named login. If there is also a group named login, this
 18059	command may delete the group as well, or may leave it alone.
 18060	
 18061	Options
 18062	
 18063	-r
 18064	   
 18065	    removes files in the user's home directory along with the home directory
 18066	    itself. Files located in other file system will have to be searched for and
 18067	    deleted manually.
 18068	   
 18069	usermod
 18070	
 18071	Name
 18072	
 18073	usermod -- modify a user account
 18074	
 18075	Synopsis
 18076	
 18077	usermod [-c comment] [-d home_dir [ -m]]
 18078	        [-e expire_date] [-f inactive_time]
 18079	        [-g initial_group] [-G group[,...]]
 18080	        [-l login_name] [-p passwd]
 18081	        [-s shell] [-u uid [ -o]] login
 18082	
 18083	Options
 18084	
 18085	-c comment
 18086	   
 18087	    specifies the new value of the user's password file comment field.
 18088	   
 18089	-d home_dir
 18090	   
 18091	    specifies the user's new login directory. If the -m option is given the
 18092	    contents of the current home directory will be moved to the new home
 18093	    directory, which is created if it does not already exist.
 18094	   
 18095	-e expire_date
 18096	   
 18097	    specifies the date on which the user account will be disabled. The date is
 18098	    specified in the format YYYY-MM-DD.
 18099	   
 18100	-f inactive_days
 18101	   
 18102	    specifieshe number of days after a password expires until the account is
 18103	    permanently disabled. A value of 0 disables the account as soon as the
 18104	    password has expired, and a value of -1 disables the feature. The default
 18105	    value is -1.
 18106	   
 18107	-g initial_group
 18108	   
 18109	    specifies the group name or number of the user's new initial login group.
 18110	    The group name must exist. A group number must refer to an already existing
 18111	    group.
 18112	   
 18113	-G group,[...]
 18114	   
 18115	    specifies a list of supplementary groups which the user is also a member
 18116	    of. Each group is separated from the next by a comma, with no intervening
 18117	    whitespace. The groups are subject to the same restrictions as the group
 18118	    given with the -g option. If the user is currently a member of a group
 18119	    which is not listed, the user will be removed from the group.
 18120	   
 18121	-l login_name
 18122	   
 18123	    changes the name of the user from login to login_name. Nothing else is
 18124	    changed. In particular, the user's home directory name should probably be
 18125	    changed to reflect the new login name.
 18126	   
 18127	-p passwd
 18128	   
 18129	    is the encrypted password, as returned by crypt(3).
 18130	   
 18131	-s shell
 18132	   
 18133	    specifies the name of the user's new login shell. Setting this field to
 18134	    blank causes the system to select the default login shell.
 18135	   
 18136	-u uid [-o]
 18137	   
 18138	    specifies the numerical value of the user's ID. This value must be unique,
 18139	    unless the -o option is used. The value must be non-negative. Any files
 18140	    which the user owns and which are located in the directory tree rooted at
 18141	    the user's home directory will have the file user ID changed automatically.
 18142	    Files outside of the user's home directory must be altered manually.
 18143	   
 18144	wc
 18145	
 18146	Name
 18147	
 18148	wc -- print the number of bytes, words, and lines in files
 18149	
 18150	Description
 18151	
 18152	wc is as specified in the SUS but with differences as listed below.
 18153	
 18154	Differences
 18155	
 18156	--bytes, --chars
 18157	   
 18158	    is equivalent to -c.
 18159	   
 18160	--lines
 18161	   
 18162	    is equivalent to -l.
 18163	   
 18164	-L, --max-line-length
 18165	   
 18166	    prints the length of the longest line.
 18167	   
 18168	-m
 18169	   
 18170	    has implementation-dependent behavior.
 18171	   
 18172	--words
 18173	   
 18174	    is equivalent to -w.
 18175	   
 18176	--version
 18177	   
 18178	    outputs version information and exits.
 18179	   
 18180	xargs
 18181	
 18182	Name
 18183	
 18184	xargs -- build and execute command lines from standard input
 18185	
 18186	Description
 18187	
 18188	xargs is as specified in the SUS but with differences as listed below.
 18189	
 18190	Differences
 18191	
 18192	--null, -0
 18193	   
 18194	    terminates input filenames by a null character instead of by whitespace,
 18195	    and the quotes and backslash are not special (every character is taken
 18196	    literally). Disables the end of file string, which is treated like any
 18197	    other argument. Useful when arguments might contain white space, quote
 18198	    marks, or backslashes. The GNU find -print0 option produces input suitable
 18199	    for this mode.
 18200	   
 18201	--eof[=eof-str]
 18202	   
 18203	    is equivalent to -e.
 18204	   
 18205	-E
 18206	   
 18207	    has implementation-dependent behavior.
 18208	   
 18209	--replace[=replace-str]
 18210	   
 18211	    uses FORMAT as the format string that controls the output of time.
 18212	   
 18213	-I
 18214	   
 18215	    has implementation-dependent behavior.
 18216	   
 18217	--max-lines[=max-lines]
 18218	   
 18219	    is equivalent to -l.
 18220	   
 18221	-L
 18222	   
 18223	    has implementation-dependent behavior.
 18224	   
 18225	--max-args=max-args
 18226	   
 18227	    is equivalent to -n.
 18228	   
 18229	--interactive
 18230	   
 18231	    is equivalent to -p.
 18232	   
 18233	--no-run-if-empty, -r
 18234	   
 18235	    does not run this command if the standard input does not contain any
 18236	    nonblanks. Normally, the command is run once even if there is no input.
 18237	   
 18238	--max-chars
 18239	   
 18240	    is equivalent to -s.
 18241	   
 18242	--verbose
 18243	   
 18244	    is equivalent to -t.
 18245	   
 18246	--version
 18247	   
 18248	    Prints the version number of xargs and exits.
 18249	   
 18250	--exit
 18251	   
 18252	    is equivalent to -x.
 18253	   
 18254	--max-procs=max-procs, -P max-procs
 18255	   
 18256	    runs up to max-procs processes at a time; the default is 1. If max-procs is
 18257	    0, xargs will run as many processes as possible at a time. Use the -n
 18258	    option with -P; otherwise chances are that only one exec will be done.
 18259	   
 18260	IX. Standard Shell
 18261	
 18262	Table of Contents
 18263	15. Standard Shell
 18264	
 18265	-------------------------------------------------------------------------------
 18266	
 18267	Chapter 15. Standard Shell
 18268	
 18269	Introduction
 18270	
 18271	The shell is POSIX-1003.2 with the following exceptions.
 18272	
 18273	-------------------------------------------------------------------------------
 18274	
 18275	Standard Shell Exceptions
 18276	
 18277	-------------------------------------------------------------------------------
 18278	
 18279	Pathname of $0
 18280	
 18281	POSIX Standard, section 3.9.1.1, line 779-784.
 18282	
 18283	  * When the search for command name using the PATH environment variable
 18284	    succeeds, the command is executed with actions equivalent to calling
 18285	    'execve()' with the path argument set to the pathname resulting from the
 18286	    search, 'argv[0]' set to the command name and the remaining arguments set
 18287	    to the operands.
 18288	   
 18289	    if [ $0 = (basename $0) ]; then
 18290	        echo "command name: " $0
 18291	    fi
 18292	
 18293	GNU Exception:
 18294	
 18295	  * When the search for command name using the PATH environment variable
 18296	    succeeds, the command is executed with actions equivalent to calling
 18297	    'execve()' with the path argument set to the pathname resulting from the
 18298	    search, 'argv[0]' set to the full-path command name and the remaining
 18299	    arguments set to the operands.
 18300	   
 18301	    if [ $0 = (realpath $0) ]; then
 18302	        echo "full pathname: " $0
 18303	    fi
 18304	
 18305	-------------------------------------------------------------------------------
 18306	
 18307	Sourcing non-executable files
 18308	
 18309	  * When PATH is used to locate a file for the dot utility, and a matching file
 18310	    is on the PATH but is not readable, the behavior is undefined (unlike POSIX
 18311	    which apparently requires the shell to continue searching through the rest
 18312	    of the PATH, POSIX Standard, section 3.14.4, line 1493-1498).
 18313	   
 18314	-------------------------------------------------------------------------------
 18315	
 18316	Standard Shell Rationale
 18317	
 18318	Among the many shells existing at the time of evaluation, the two most
 18319	compliant were Bash and Pdksh.
 18320	
 18321	At the time of evaluation, Bash was found mostly compliant with the
 18322	POSIX-1003.2 standard, and its maintainer demonstrated interest in bringing the
 18323	shell to full compliance. Bash already enjoys wide use among shell users, and
 18324	is even included in many distributions as the default shell. Further, the
 18325	abundance of documentation found both on the Internet and in the bookstore
 18326	makes Bash an easy shell to use.
 18327	
 18328	Of course, shell scripts must avoid using bash extensions if they want to run
 18329	on any LSB system.
 18330	
 18331	The two exceptions to POSIX (concerning . and non-readable files, and argv[0])
 18332	in this section are to accommodate bash. The need for exceptions should be
 18333	reviewed if bash changes or POSIX changes to remove the conflict. Future
 18334	versions of this standard may also consider exceptions for pdksh or other
 18335	almost-compliant shells, if they seem to be warranted.
 18336	
 18337	X. Users & Groups
 18338	
 18339	Table of Contents
 18340	16. Users & Groups
 18341	
 18342	-------------------------------------------------------------------------------
 18343	
 18344	Chapter 16. Users & Groups
 18345	
 18346	A "user name" is a string that is used to identify a user. A "login name" is a
 18347	user name that is associated with a system login. A "user id" is a non negative
 18348	integer, which can be contained in an object of type uid_t, that is used to
 18349	identify a system user.
 18350	
 18351	When the identity of a user is associated with a process, a user ID value is
 18352	referred to as a real user ID, or an effective user ID. [POSIX 1003.1-1996]
 18353	
 18354	A "group name" is a string that is used to identify a set of users. A "group
 18355	id" is a non negative integer, which can be contained in a object of type
 18356	gid_t, that is used to identify a group of system users. Each system user is a
 18357	member of at least one group. When the identity of a group is associated with a
 18358	process, a group ID value is referred to as a real group ID, or an effective
 18359	group ID. [POSIX 1003.1-1996]
 18360	
 18361	-------------------------------------------------------------------------------
 18362	
 18363	User and Group Database
 18364	
 18365	The format of the User and Group databases is not specified. Programs may only
 18366	read these databases using the provided API. Changes to these databases should
 18367	be made using the provided commands.
 18368	
 18369	-------------------------------------------------------------------------------
 18370	
 18371	User & Group Names
 18372	
 18373	Below is a table of required mnemonic user and group names. This specification
 18374	makes no attempt to numerically assign uid or gid numbers. The exceptions are
 18375	the uid and gid for "root" which is equal to 0, and the uid and gid for "bin"
 18376	which is equal to 1.
 18377	
 18378	Table 16-1. Required User & Group Names
 18379	
 18380	+--------------------------------------------------------+
 18381	|User  |Group |Comments                                  |
 18382	|------+------+------------------------------------------|
 18383	|root  |root  |Administrative user with no restrictions  |
 18384	|------+------+------------------------------------------|
 18385	|bin   |bin   |Administrative user with some restrictions|
 18386	|------+------+------------------------------------------|
 18387	|daemon|daemon|Subprocess special privileges             |
 18388	+--------------------------------------------------------+
 18389	
 18390	Below is a table of optional mnemonic user and group names. This specification
 18391	makes no attempt to numerically assign uid or gid numbers. If the username
 18392	exists on a system, then they should be in the suggested corresponding group.
 18393	
 18394	Table 16-2. Optional User & Group Names
 18395	
 18396	+---------------------------------------------------+
 18397	|User    |Group   |Comments                         |
 18398	|--------+--------+---------------------------------|
 18399	|adm     |adm     |Administrative special privileges|
 18400	|--------+--------+---------------------------------|
 18401	|lp      |lp      |Printer special privileges       |
 18402	|--------+--------+---------------------------------|
 18403	|sync    |sync    |Login to sync the system         |
 18404	|--------+--------+---------------------------------|
 18405	|shutdown|shutdown|Login to shutdown the system     |
 18406	|--------+--------+---------------------------------|
 18407	|halt    |halt    |Login to halt the system         |
 18408	|--------+--------+---------------------------------|
 18409	|mail    |mail    |Mail special privileges          |
 18410	|--------+--------+---------------------------------|
 18411	|news    |news    |News special privileges          |
 18412	|--------+--------+---------------------------------|
 18413	|uucp    |uucp    |UUCP special privileges          |
 18414	|--------+--------+---------------------------------|
 18415	|operator|root    |Operator special privileges      |
 18416	|--------+--------+---------------------------------|
 18417	|man     |man     |Man special privileges           |
 18418	|--------+--------+---------------------------------|
 18419	|nobody  |nobody  |Used by NFS                      |
 18420	+---------------------------------------------------+
 18421	
 18422	The differences in numeric values of the uids and gids between systems on a
 18423	network can be reconciled via NIS, rdist(1), rsync(1), or ugidd(8). Only a
 18424	minimum working set of "user names" and their corresponding "user groups" are
 18425	required. Applications cannot assume non system user or group names will be
 18426	defined.
 18427	
 18428	Applications cannot assume any policy for the default umask or the default
 18429	directory permissions a user may have. Applications should enforce user only
 18430	file permissions on private files such as mailboxes. The location of the users
 18431	home directory is also not defined by policy other than the recommendations of
 18432	the FHS and must be obtained by the *pwnam(3) calls.
 18433	
 18434	-------------------------------------------------------------------------------
 18435	
 18436	UID Ranges
 18437	
 18438	The system UIDs from 0 to 99 should be statically allocated by the system.
 18439	These static assignments should be defined by a common registry.
 18440	
 18441	The system UIDs from 100 to 499 should be reserved for dynamically allocation
 18442	by system administrators and post install scripts using useradd(1).
 18443	
 18444	XI. Execution Environment
 18445	
 18446	Table of Contents
 18447	17. File System Hierarchy
 18448	18. Additional Recommendations
 18449	
 18450	-------------------------------------------------------------------------------
 18451	
 18452	Chapter 17. File System Hierarchy
 18453	
 18454	An LSB conforming system must adhere to the FHS 2.2.
 18455	
 18456	The FHS allows many components or subsystems to be optional. An application
 18457	must check for the existence of an optional component before using it, and
 18458	should behave in a reasonable manner if the optional component is not present.
 18459	
 18460	-------------------------------------------------------------------------------
 18461	
 18462	/dev
 18463	
 18464	The following device nodes must exist under /dev. Other devices may also exist
 18465	in /dev.
 18466	
 18467	/dev/null
 18468	   
 18469	    All data written to this device is discarded. A read from this device will
 18470	    return an EOF condition.
 18471	   
 18472	/dev/zero
 18473	   
 18474	    This device is a source of zeroed out data. All data written to this device
 18475	    is discarded. A read from this device will return as many bytes containing
 18476	    the value zero as was requested.
 18477	   
 18478	/dev/tty
 18479	   
 18480	    This device is a synonym for the controlling terminal of a process. Once
 18481	    this device is opened, all reads and writes will behave as if the actual
 18482	    controlling terminal device had been opened.
 18483	   
 18484	-------------------------------------------------------------------------------
 18485	
 18486	Chapter 18. Additional Recommendations
 18487	
 18488	Minimal granted Directory and File permissions
 18489	
 18490	In this Chapter "System" means an "LSB-compliant system" and "application"
 18491	means an "LSB-compliant (third party vendor) application".
 18492	
 18493	The system must grant to the application read and execute permissions needed to
 18494	use all system interfaces (ABIs) mentioned in the LSB document and included
 18495	standards.
 18496	
 18497	-------------------------------------------------------------------------------
 18498	
 18499	Recommendations for applications on ownership and permissions
 18500	
 18501	Directory Write Permissions
 18502	
 18503	The application should not depend on having directory write permission outside
 18504	/tmp, /var/tmp, its home directory and /var/opt/package, (where package is the
 18505	name of the application package).
 18506	
 18507	The application should not depend on owning these directories.
 18508	
 18509	For these directories the application should be able to work with directory
 18510	write permissions restricted by the "sticky bit". (Which prevents the
 18511	application from removing files owned by another user. This is classically done
 18512	with /tmp, to prevent accidental deletion of "foreign" files.)
 18513	
 18514	-------------------------------------------------------------------------------
 18515	
 18516	File Write Permissions
 18517	
 18518	The application should not depend on file write permission on files not owned
 18519	by the user it runs under with the exception of its personal inbox /var/mail/
 18520	username
 18521	
 18522	-------------------------------------------------------------------------------
 18523	
 18524	File Read and execute Permissions
 18525	
 18526	The application should not depend on having read permission to every file and
 18527	directory.
 18528	
 18529	-------------------------------------------------------------------------------
 18530	
 18531	Suid and Sgid Permissions
 18532	
 18533	The application should not depend on the suid/sgid permissions of a file not
 18534	packaged with the application. Instead, the distribution is responsible for
 18535	assuming that all system commands have the required permissions and work
 18536	correctly.
 18537	
 18538	Rationale: Let us make security officers happy. Let's give them the freedom to
 18539	take sgid/suid perms away, as long as they do not break the system's
 18540	functionality.
 18541	
 18542	-------------------------------------------------------------------------------
 18543	
 18544	Privileged users
 18545	
 18546	"Normal" applications should not depend on running as a privileged user.
 18547	
 18548	Special applications that have a reason to run under a privileged user, should
 18549	outline these reasons clearly in their documentation, if they are not obvious
 18550	as in the case of a backup/restore program. Users of the application should be
 18551	informed, that "this application demands security privileges, which could
 18552	interfere with system security".
 18553	
 18554	The application should not contain binary-only software that requires being run
 18555	as root, as this makes security auditing harder or even impossible.
 18556	
 18557	-------------------------------------------------------------------------------
 18558	
 18559	Changing permissions
 18560	
 18561	The application should not change permissions of files and directories that do
 18562	not belong to its own package. To do so without a warning notice in the
 18563	documentation is regarded as unfriendly act.
 18564	
 18565	-------------------------------------------------------------------------------
 18566	
 18567	Removable Media (Cdrom, Floppy, etc.)
 18568	
 18569	The application should be prepared to address removable media being mounted
 18570	with options such as "noauto", "nouser", "nosuid" or "nodev". Also, the mount
 18571	options "uid=X", "gid=X" should be awaited with a non-zero uid/gid value X.
 18572	
 18573	Rationale: System vendors and local system administrators want to run
 18574	applications from removable media, but want the possibility to control what the
 18575	application can do.
 18576	
 18577	Run-from-removable media applications should not depend on logging in as a
 18578	privileged user.
 18579	
 18580	-------------------------------------------------------------------------------
 18581	
 18582	Installable applications
 18583	
 18584	If the installation of an application requires the execution of programs with
 18585	superuser privileges, such programs should also be supplied in a human-readable
 18586	form.
 18587	
 18588	Without this, the local system administrator would have to blindly trust a
 18589	piece of software, particularly its security.
 18590	
 18591	XII. System Initialization
 18592	
 18593	Table of Contents
 18594	19. System Initialization
 18595	
 18596	-------------------------------------------------------------------------------
 18597	
 18598	Chapter 19. System Initialization
 18599	
 18600	Cron Jobs
 18601	
 18602	Packages may not touch the configuration file /etc/crontab, nor may they modify
 18603	the files in /var/spool/cron/crontabs.
 18604	
 18605	If a package wants to install a job that has to be executed via cron, it shall
 18606	place a file with the name of the package in one of the following directories:
 18607	
 18608	/etc/cron.daily
 18609	/etc/cron.weekly
 18610	/etc/cron.monthly
 18611	
 18612	As these directory names say, the files within them are executed on a daily,
 18613	weekly, or monthly basis, respectively.
 18614	
 18615	 If a certain job has to be executed more frequently than daily, the package
 18616	shall install a file /etc/cron.d/<package-name> tagged as configuration file.
 18617	This file uses the same syntax as /etc/crontab and is processed by cron
 18618	automatically.
 18619	
 18620	It is recommended that files installed in any of these directories be scripts
 18621	(shell scripts, Perl scripts, etc.) so that they may be modified by the local
 18622	system administrator. In addition, they must be registered as configuration
 18623	file.
 18624	
 18625	The scripts in these directories have to check, if all necessary programs are
 18626	installed before they try to execute them. Otherwise, problems will arise when
 18627	a package was removed (but not purged), since the configuration files are kept
 18628	on the system in this situation.
 18629	
 18630	To avoid namespace conflicts in the /etc/cron.* directories, the filenames used
 18631	by LSB-compliant packages in /etc/cron.daily, /etc/cron.weekly, /etc/
 18632	cron.monthly, or /etc/cron.d must come from a managed namespace. These
 18633	filenames may be assigned using one of the following methods:
 18634	
 18635	  * Assigned namespace. This namespace consists of names which only use the
 18636	    character set [a-z0-9]. In order to avoid conflicts these cron script names
 18637	    must be reserved through the Linux Assigned Names and Numbers Authority
 18638	    (LANANA). Information about the LANANA may be found at www.lanana.org.
 18639	   
 18640	    Commonly used names shall be reserved in advance; developers for projects
 18641	    should be encouraged reserve names from LANA, so that each distribution can
 18642	    use the same name, and to avoid conflicts with other projects.
 18643	   
 18644	  * Hierarchical namespace. This namespace consists of scripts names which look
 18645	    like this: [hier1]-[hier2]-...-[name], where name is again taken the
 18646	    character set [a-z0-9], and where there may be one or more [hier-n]
 18647	    components. [hier1] may either be an LSB provider name assigned by the
 18648	    LANANA, or it may be owners' DNS name in lower case, with at least one '.'.
 18649	    I.e., "debian.org", "staroffice.sun.com", etc. The LSB provider name
 18650	    assigned by LANANA must only consist of the ASCII characters [a-z0-9].
 18651	   
 18652	  * Reserved namespace. This namespace consists of script names which begin
 18653	    with the character '_', and is reserved for distribution use only. This
 18654	    namespace should be used for core packages only, and in general use of this
 18655	    namespace is highly discouraged.
 18656	   
 18657	-------------------------------------------------------------------------------
 18658	
 18659	Run Levels
 18660	
 18661	0 halt                                                    
 18662	1 single user mode                                        
 18663	2 multiuser with no network services exported             
 18664	3 normal/full multiuser                                   
 18665	4 reserved for local use, default is normal/full multiuser
 18666	5 multiuser with xdm or equivalent                        
 18667	6 reboot                                                  
 18668	
 18669	-------------------------------------------------------------------------------
 18670	
 18671	Init Script Actions
 18672	
 18673	Init files shall accept one argument, saying what to do:
 18674	
 18675	start        start the service                                                 
 18676	stop         stop the service                                                  
 18677	restart      stop and restart the service if the service is already running,   
 18678	             otherwise start the service                                       
 18679	reload       cause the configuration of the service to be reloaded without     
 18680	             actually stopping and restarting the service                      
 18681	force-reload cause the configuration to be reloaded if the service supports    
 18682	             this, otherwise restart the service                               
 18683	status       print the current status of the service                           
 18684	
 18685	The start, stop, restart, force-reload, and status commands must be supported
 18686	by all init files; the reload option is optional. Other init script actions may
 18687	be defined by the init script.
 18688	
 18689	Init files must ensure that they will behave sensibly if invoked with start
 18690	when the service is already running, or with stop when it isn't, and that they
 18691	don't kill unfortunately-named user processes. The best way to achieve this is
 18692	to use the init-script functions provided by /lib/lsb/init-functions.
 18693	
 18694	If a service reloads its configuration automatically (as in the case of cron,
 18695	for example), the reload option of the init file must behave as if the
 18696	configuration has been reloaded successfully.
 18697	
 18698	These executable files must not fail obscurely when the configuration files
 18699	remain but the package has been removed, as the default in [the packaging
 18700	system] is to leave configuration files on the system after the package has
 18701	been removed. Only when it is executed with the [purge] option will [the
 18702	packaging system] remove configuration files. Therefore, you should include a
 18703	test statement at the top of the file, like this:
 18704	test -f program-executed-later-in-file || exit 5
 18705	or take the equivalent action if the init file is not a shell script.
 18706	
 18707	If the status command is given, the init script will return the following exit
 18708	status codes.
 18709	
 18710	0       program is running or service is OK           
 18711	1       program is dead and /var/run pid file exists  
 18712	2       program is dead and /var/lock lock file exists
 18713	3       program is stopped                            
 18714	4       program or service status is unknown          
 18715	5-99    reserved for future LSB use                   
 18716	100-149 reserved for distribution use                 
 18717	150-199 reserved for application use                  
 18718	200-254 reserved                                      
 18719	
 18720	In the case of init script commands other than "status" (i.e., "start", "stop",
 18721	"restart", "reload", and "force-reload"), the init script must return an exit
 18722	status of zero if the action described by the argument has been successful.
 18723	Otherwise, the exit status shall be non-zero, as defined below. In addition to
 18724	straightforward success, the following situations are also to be considered
 18725	successful:
 18726	
 18727	  * restarting a service (instead of reloading it) with the "force-reload"
 18728	    argument
 18729	   
 18730	  * running "start" on a service already running
 18731	   
 18732	  * running "stop" on a service already stopped or not running
 18733	   
 18734	  * running "restart" on a service already stopped or not running
 18735	   
 18736	 
 18737	
 18738	In case of an error, while processing any init script action except for
 18739	"status", the init script must print an error message and return one of the
 18740	following non-zero exit status codes.
 18741	
 18742	1       generic or unspecified error (current practice)
 18743	2       invalid or excess argument(s)                  
 18744	3       unimplemented feature (for example, "reload")  
 18745	4       user had insufficient privilege                
 18746	5       program is not installed                       
 18747	6       program is not configured                      
 18748	7       program is not running                         
 18749	8-99    reserved for future LSB use                    
 18750	100-149 reserved for distribution use                  
 18751	150-199 reserved for application use                   
 18752	200-254 reserved                                       
 18753	
 18754	All error messages must be printed on standard error. All status messages must
 18755	be printed on standard output.
 18756	
 18757	Since init files may be run manually by a system administrator with
 18758	non-standard environment variable values for PATH, USER, LOGNAME, etc. init
 18759	files must not depend on the values of these environment variables. They should
 18760	set them to some known/default values if they are needed. 
 18761	
 18762	-------------------------------------------------------------------------------
 18763	
 18764	Comment conventions for init scripts
 18765	
 18766	LSB applications which need to execute script(s) at bootup and/or shutdown may
 18767	provide one or more init.d files. These files are installed by the
 18768	install_initd program described below, which copies it into a standard
 18769	directory and makes whatever other adjustments (creation of symlinks, creation
 18770	of entries in a database, etc.) are necessary so that the script can be run at
 18771	boot-time. [39]
 18772	
 18773	In the init.d file, information about the shell script shall be delimited by
 18774	the lines "### BEGIN INIT INFO" and "### END INIT INFO". These delimiter lines
 18775	may containg trailing whitespace, which shall be ignored. Inside this block
 18776	there shall be lines of the form "# {keyword}: [arg1] [arg2] ...". (All lines
 18777	inside this block start with a hash ('#') character in the first column, so
 18778	that shell treats them as comments.) The following keywords, with their
 18779	arguments are defined in this specification:
 18780	
 18781	        # Provides: boot_facility_1 [ boot_facility_2 ...]
 18782	        # Required-Start: boot_facility_1 [ boot_facility_2 ...]
 18783	        # Required-Stop: boot_facility_1 [ boot_facility_2 ...]
 18784	        # Default-Start: run_level_1 [ run_level_2 ...]
 18785	        # Default-Stop: run_level_1 [ run_level_2 ...]
 18786	        # Short-Description: short_description
 18787	        # Description: multiline_description
 18788	
 18789	Additional keywords may be defined in future LSB specifications. Distributions
 18790	may define local extensions by using the prefix "X-[distribution name]" --- for
 18791	example, "X-RedHat-foobardecl", or "X-Debian-xyzzydecl".
 18792	
 18793	An init.d shell script may declare using the "Required-Start: " header that it
 18794	must not be run until certain boot facilities are provided. This information is
 18795	used by the installation tool or the boot-time boot-script execution facility
 18796	to assure that init scripts are run in the correct order. When an init script
 18797	is run with a "start" argument, the boot facility or facilities specified in
 18798	the "Provides" header shall be considered present, and hence init scripts which
 18799	require those boot facilities would then be eligble to be run. When an init
 18800	script is run with a "stop" argument, the boot facilities specified in the
 18801	"Provides" header are considered no longer present. Details about how the
 18802	naming conventions used by boot facilities, and system facilties defined by
 18803	this specification can be found in a following section.
 18804	
 18805	Similarly, the "Required-Stop:" header defines which facilities must still be
 18806	available during the shutdown of that service. Hence, the init script system
 18807	should avoid stopping shell scripts which provide those facilities until this
 18808	shell script is stopped.
 18809	
 18810	The "Default-Start" and "Default-Stop" headers define which run levels should
 18811	by default run the script with a start or stop argument, respectively, to start
 18812	or stop the services controlled by the init script.
 18813	
 18814	The "Short-Description" and "Description" header fields are used to provide
 18815	text which describes the actions of the init script. The "short_description"
 18816	shall be a relatively short, pithy description of the init script, where as the
 18817	"multiline_description" can be a much longer piece of text that may span
 18818	mulitple lines. In a multiline description, each continuation line must begin
 18819	with a '#' followed by tab character or a '#' followed by at least two space
 18820	characters. The multiline description is terminated by the first line that does
 18821	not match this criteria.
 18822	
 18823	-------------------------------------------------------------------------------
 18824	
 18825	Installation and removal of init.d files
 18826	
 18827	An init.d file is installed by copying it into /etc/init.d (which may be a
 18828	symlink to another location). This can be done by the package installer. During
 18829	the package's postinstall script, the program "/usr/lib/lsb/install_initd"
 18830	configures the distribution's boot script system to call the package's init.d
 18831	file at the appropriate time.
 18832	
 18833	The install_initd program takes a single argument, the pathanme to the /etc/
 18834	init.d file. For example:
 18835	
 18836	        /usr/lib/lsb/install_initd /etc/init.d/inet
 18837	
 18838	When a software package is removed, the package's preuninstall script shall
 18839	call /usr/lib/lsb/remove_initd and pass the pathname to the /etc/init.d file.
 18840	The package manager is still responsible for removing the /etc/init.d file; the
 18841	remove_initd program is provided in case the distribution needs to clean up any
 18842	other modifications in the distribution's boot script system that might have
 18843	been made by the install_initd program. For example:
 18844	
 18845	        /usr/lib/lsb/remove_initd /etc/init.d/inet
 18846	
 18847	There should be a tool available to the user (e.g., RedHat's chkconfig) which
 18848	can be used by the system administrator to easily manipulate at which init
 18849	levels a particular init.d script is started or stopped. This specification
 18850	currently does not specify such an interface, however.
 18851	
 18852	-------------------------------------------------------------------------------
 18853	
 18854	Facility names
 18855	
 18856	Boot facilities are used to indicate dependencies in init scripts, as defined
 18857	in a previous section. Facility names that begin with a dollar sign ('$') are
 18858	system facility names, defined by the LSB, and MUST be provided by
 18859	distributions. LSB applications must not provide system facilities. This
 18860	document defines the following system facility names:
 18861	
 18862	$local_fs   all local filesystems are mounted                                  
 18863	$network    low level networking (ethernet card; may imply PCMCIA running)     
 18864	$named      named is operational                                               
 18865	            all remote filesystems are mounted (note in some cases /usr may be 
 18866	$remote_fs  remote. Most applications that care will probably require both     
 18867	            $local_fs and $remote_fs)                                          
 18868	$syslog     system logger is operational                                       
 18869	$netdaemons all network daemons are running                                    
 18870	
 18871	Other (non-system) facilities may be defined by other LSB applications. These
 18872	facilities shall be named using the same conventions defined for naming init.d
 18873	script names. Commonly, the facility provided by an LSB application init.d
 18874	script will have the same name as the name assigned to the init.d script.
 18875	
 18876	-------------------------------------------------------------------------------
 18877	
 18878	Script names
 18879	
 18880	Since the init.d scripts must live in a single directory, they must come from a
 18881	single namespace. Three means of assigning names from this namespace are
 18882	available:
 18883	
 18884	  * Assigned namespace. This namespace consists of names which only use the
 18885	    character set [a-z0-9]. This space is desirable for scripts which system
 18886	    administrators may often wish to run manually: e.g., "/etc/init.d/named
 18887	    restart" In order to avoid conflicts these init.d names must be reserved
 18888	    through the Linux Assigned Names and Numbers Authority (LANANA).
 18889	    Information about the LANANA may be found at www.lanana.org.
 18890	   
 18891	    Commonly used names shall be reserved in advance; developers for projects
 18892	    should be encouraged to reserve names from LANANA, so that each
 18893	    distribution can use the same name, and to avoid conflicts with other
 18894	    projects.
 18895	   
 18896	  * Hierarchical namespace. This namespace consists of scripts names which look
 18897	    like this: [hier1]-[hier2]-...-[name], where name is again taken the
 18898	    character set [a-z0-9], and where there may be one or more [hier-n]
 18899	    components. [hier1] may either be an LSB provider name assigned by the
 18900	    LANANA, or it may be owners' DNS name in lower case, with at least one '.'
 18901	    (e.g., "debian.org", "staroffice.sun.com"). The LSB provider name assigned
 18902	    by LANANA must only consist of the ASCII characters [a-z0-9].
 18903	   
 18904	  * Reserved namespace. This namespace consists of script names which begin
 18905	    with the character '_', and is reserved for distribution use only. This
 18906	    namespace should be used for core packages only, and in general use of this
 18907	    namespace is highly discouraged.  
 18908	   
 18909	In general, if a package or some system function is likely to be used on
 18910	multiple systems, the package developers or the distribution SHOULD get a
 18911	registered name through LANANA, and distributions should strive to use the same
 18912	name whenever possible. For applications which may not be "core" or may not be
 18913	commonly installed, the hierarchical namespace may be more appropriate. An
 18914	advantage to the hierarchical namespace is that there is no need to consult
 18915	with the LANANA before obtaining an assigned name.
 18916	
 18917	Short names are highly desirable, since many system administrators like to use
 18918	them to manually start and stop services. Given this, they should be
 18919	standardized on a per-package basis. This is the rationale behind having a
 18920	LANANA organization to assign these names. The LANANA may be called upon to
 18921	handle other namespace issues, such as package/prerequisites naming (which is
 18922	essential to making prerequisites to work correctly).
 18923	
 18924	This specification shall pre-define the following script names as being
 18925	reserved to the LANA. They reflect names which are commonly in use today by
 18926	distributions to start up various system programs/daemons. The behavior of
 18927	these scripts are not specified here, and not all distributions may use all of
 18928	these script names.
 18929	
 18930	  * autofs
 18931	   
 18932	  * apmd
 18933	   
 18934	  * atd
 18935	   
 18936	  * crond
 18937	   
 18938	  * dhclient
 18939	   
 18940	  * dhcpcd
 18941	   
 18942	  * gpm
 18943	   
 18944	  * exim
 18945	   
 18946	  * halt
 18947	   
 18948	  * identd
 18949	   
 18950	  * inet
 18951	   
 18952	  * httpd
 18953	   
 18954	  * kudzu
 18955	   
 18956	  * klogd
 18957	   
 18958	  * lpd
 18959	   
 18960	  * mcserv
 18961	   
 18962	  * named
 18963	   
 18964	  * nfs
 18965	   
 18966	  * nfslock
 18967	   
 18968	  * pcmcia
 18969	   
 18970	  * portmap
 18971	   
 18972	  * postfix
 18973	   
 18974	  * random
 18975	   
 18976	  * routed
 18977	   
 18978	  * rstatd
 18979	   
 18980	  * rusersd
 18981	   
 18982	  * rwhod
 18983	   
 18984	  * sendmail
 18985	   
 18986	  * samba
 18987	   
 18988	  * smb
 18989	   
 18990	  * snmpd
 18991	   
 18992	  * sshd
 18993	   
 18994	  * syslog
 18995	   
 18996	  * xfs
 18997	   
 18998	  * xntpd
 18999	   
 19000	  * ypbind
 19001	   
 19002	-------------------------------------------------------------------------------
 19003	
 19004	Init script Functions
 19005	
 19006	Each LSB-compliant init.d script must source the file /lib/lsb/init-functions.
 19007	This file must cause the following shell script commands to be defined. This
 19008	can be done either by adding a directory to the PATH variable which defines
 19009	these commands, or by defining sh aliases. While the distribution-provided
 19010	aliases may choose to use bash extensions (at the distribution's option), the
 19011	LSB init.d files themselves should only depend in /bin/sh features as defined
 19012	by POSIX.2.
 19013	
 19014	start_daemon    This runs the specified program as a daemon. start_daemon will 
 19015	[-f] [-n        check to see if there is a program named "daemon" already      
 19016	nicelevel]      running. If so, it will not start another copy of the daemon   
 19017	pathname [args] unless the -f option is given. The -n option specifies a nice  
 19018	                level. See nice(1).                                            
 19019	killproc        This stops the specified program. The program is found using   
 19020	basename        the algorithm given by pidofproc. If a signal is specified, the
 19021	[signal]        program is sent that signal. Otherwise, a SIGTERM followed by a
 19022	                SIGKILL after some number of seconds is sent.                  
 19023	                This function returns one or more pid(s) for a particular      
 19024	                daemon. If an entry is found in /var/run/basename.pid, then    
 19025	                that value is returned. Compliant implementations of the LSB   
 19026	                may attempt other mechanisms for determining the pid(s),       
 19027	pidofproc       although this is not required (and not recommended, since a    
 19028	basename        user can trick startup scripts by creating processes that      
 19029	                appear to be system programs in the process list thus creating 
 19030	                a potential security exposure). Hence, LSB-complaint           
 19031	                applications who wish to use the pidofproc function in their   
 19032	                init scripts must store the pid in /var/run/basename.pid.      
 19033	log_success_msg This requests the distribution to print a success message. The 
 19034	"message"       message should be relatively short; no More than 60 characters 
 19035	                is highly desirable.                                           
 19036	log_failure_msg This requests the distribution to print a failure message. The 
 19037	"message"       message should be relatively short; no more than 60 characters 
 19038	                is highly desirable.                                           
 19039	log_warning_msg This requests the distribution to print a warning message. The 
 19040	"message"       message should be relatively short; no more than 60 characters 
 19041	                is highly desirable.                                           
 19042	
 19043	-------------------------------------------------------------------------------
 19044	
 19045	Appendix A. Alphabetical Listing of Interfaces
 19046	
 19047	-------------------------------------------------------------------------------
 19048	
 19049	libX11
 19050	
 19051	The behaviour of the interfaces in this library is specified by the following
 19052	Standards.
 19053	
 19054	X11R6.4 Xlib - C library
 19055	
 19056	Table A-1. libX11 Function Interfaces
 19057	
 19058	+-----------------------------------------------------------------------------------------+
 19059	|XActivateScreenSaver[23]    |XInternalConnectionNumbers[23]  |XcmsCIELuvClipLuv[23]      |
 19060	|----------------------------+--------------------------------+---------------------------|
 19061	|XAddConnectionWatch[23]     |XIntersectRegion[23]            |XcmsCIELuvClipuv[23]       |
 19062	|----------------------------+--------------------------------+---------------------------|
 19063	|XAddExtension[23]           |XKeycodeToKeysym[23]            |XcmsCIELuvQueryMaxC[23]    |
 19064	|----------------------------+--------------------------------+---------------------------|
 19065	|XAddHost[23]                |XKeysymToKeycode[23]            |XcmsCIELuvQueryMaxL[23]    |
 19066	|----------------------------+--------------------------------+---------------------------|
 19067	|XAddHosts[23]               |XKeysymToString[23]             |XcmsCIELuvQueryMaxLC[23]   |
 19068	|----------------------------+--------------------------------+---------------------------|
 19069	|XAddPixel[23]               |XKillClient[23]                 |XcmsCIELuvQueryMinL[23]    |
 19070	|----------------------------+--------------------------------+---------------------------|
 19071	|XAddToExtensionList[23]     |XLastKnownRequestProcessed[23]  |XcmsCIELuvToCIEuvY[23]     |
 19072	|----------------------------+--------------------------------+---------------------------|
 19073	|XAddToSaveSet[23]           |XListDepths[23]                 |XcmsCIELuvWhiteShiftColors |
 19074	|                            |                                |[23]                       |
 19075	|----------------------------+--------------------------------+---------------------------|
 19076	|XAllPlanes[23]              |XListExtensions[23]             |XcmsCIEXYZToCIELab[23]     |
 19077	|----------------------------+--------------------------------+---------------------------|
 19078	|XAllocClassHint[23]         |XListFonts[23]                  |XcmsCIEXYZToCIEuvY[23]     |
 19079	|----------------------------+--------------------------------+---------------------------|
 19080	|XAllocColor[23]             |XListFontsWithInfo[23]          |XcmsCIEXYZToCIExyY[23]     |
 19081	|----------------------------+--------------------------------+---------------------------|
 19082	|XAllocColorCells[23]        |XListHosts[23]                  |XcmsCIEXYZToRGBi[23]       |
 19083	|----------------------------+--------------------------------+---------------------------|
 19084	|XAllocColorPlanes[23]       |XListInstalledColormaps[23]     |XcmsCIEuvYToCIELuv[23]     |
 19085	|----------------------------+--------------------------------+---------------------------|
 19086	|XAllocIconSize[23]          |XListPixmapFormats[23]          |XcmsCIEuvYToCIEXYZ[23]     |
 19087	|----------------------------+--------------------------------+---------------------------|
 19088	|XAllocNamedColor[23]        |XListProperties[23]             |XcmsCIEuvYToTekHVC[23]     |
 19089	|----------------------------+--------------------------------+---------------------------|
 19090	|XAllocSizeHints[23]         |XLoadFont[23]                   |XcmsCIExyYToCIEXYZ[23]     |
 19091	|----------------------------+--------------------------------+---------------------------|
 19092	|XAllocStandardColormap[23]  |XLoadQueryFont[23]              |XcmsClientWhitePointOfCCC  |
 19093	|                            |                                |[23]                       |
 19094	|----------------------------+--------------------------------+---------------------------|
 19095	|XAllocWMHints[23]           |XLocaleOfFontSet[23]            |XcmsConvertColors[23]      |
 19096	|----------------------------+--------------------------------+---------------------------|
 19097	|XAllowEvents[23]            |XLocaleOfIM[23]                 |XcmsCreateCCC[23]          |
 19098	|----------------------------+--------------------------------+---------------------------|
 19099	|XAutoRepeatOff[23]          |XLocaleOfOM[23]                 |XcmsDefaultCCC[23]         |
 19100	|----------------------------+--------------------------------+---------------------------|
 19101	|XAutoRepeatOn[23]           |XLockDisplay[23]                |XcmsDisplayOfCCC[23]       |
 19102	|----------------------------+--------------------------------+---------------------------|
 19103	|XBaseFontNameListOfFontSet  |XLookupColor[23]                |XcmsFormatOfPrefix[23]     |
 19104	|[23]                        |                                |                           |
 19105	|----------------------------+--------------------------------+---------------------------|
 19106	|XBell[23]                   |XLookupKeysym[23]               |XcmsFreeCCC[23]            |
 19107	|----------------------------+--------------------------------+---------------------------|
 19108	|XBitmapBitOrder[23]         |XLookupString[23]               |XcmsLookupColor[23]        |
 19109	|----------------------------+--------------------------------+---------------------------|
 19110	|XBitmapPad[23]              |XLowerWindow[23]                |XcmsPrefixOfFormat[23]     |
 19111	|----------------------------+--------------------------------+---------------------------|
 19112	|XBitmapUnit[23]             |XMapRaised[23]                  |XcmsQueryBlack[23]         |
 19113	|----------------------------+--------------------------------+---------------------------|
 19114	|XBlackPixel[23]             |XMapSubwindows[23]              |XcmsQueryBlue[23]          |
 19115	|----------------------------+--------------------------------+---------------------------|
 19116	|XBlackPixelOfScreen[23]     |XMapWindow[23]                  |XcmsQueryColor[23]         |
 19117	|----------------------------+--------------------------------+---------------------------|
 19118	|XCellsOfScreen[23]          |XMaskEvent[23]                  |XcmsQueryColors[23]        |
 19119	|----------------------------+--------------------------------+---------------------------|
 19120	|XChangeActivePointerGrab[23]|XMatchVisualInfo[23]            |XcmsQueryGreen[23]         |
 19121	|----------------------------+--------------------------------+---------------------------|
 19122	|XChangeGC[23]               |XMaxCmapsOfScreen[23]           |XcmsQueryRed[23]           |
 19123	|----------------------------+--------------------------------+---------------------------|
 19124	|XChangeKeyboardControl[23]  |XMaxRequestSize[23]             |XcmsQueryWhite[23]         |
 19125	|----------------------------+--------------------------------+---------------------------|
 19126	|XChangeKeyboardMapping[23]  |XMinCmapsOfScreen[23]           |XcmsRGBToRGBi[23]          |
 19127	|----------------------------+--------------------------------+---------------------------|
 19128	|XChangePointerControl[23]   |XMoveResizeWindow[23]           |XcmsRGBiToCIEXYZ[23]       |
 19129	|----------------------------+--------------------------------+---------------------------|
 19130	|XChangeProperty[23]         |XMoveWindow[23]                 |XcmsRGBiToRGB[23]          |
 19131	|----------------------------+--------------------------------+---------------------------|
 19132	|XChangeSaveSet[23]          |XNewModifiermap[23]             |XcmsScreenNumberOfCCC[23]  |
 19133	|----------------------------+--------------------------------+---------------------------|
 19134	|XChangeWindowAttributes[23] |XNextEvent[23]                  |XcmsScreenWhitePointOfCCC  |
 19135	|                            |                                |[23]                       |
 19136	|----------------------------+--------------------------------+---------------------------|
 19137	|XCheckIfEvent[23]           |XNextRequest[23]                |XcmsSetCCCOfColormap[23]   |
 19138	|----------------------------+--------------------------------+---------------------------|
 19139	|XCheckMaskEvent[23]         |XNoOp[23]                       |XcmsSetCompressionProc[23] |
 19140	|----------------------------+--------------------------------+---------------------------|
 19141	|XCheckTypedEvent[23]        |XOMOfOC[23]                     |XcmsSetWhiteAdjustProc[23] |
 19142	|----------------------------+--------------------------------+---------------------------|
 19143	|XCheckTypedWindowEvent[23]  |XOffsetRegion[23]               |XcmsSetWhitePoint[23]      |
 19144	|----------------------------+--------------------------------+---------------------------|
 19145	|XCheckWindowEvent[23]       |XOpenDisplay[23]                |XcmsStoreColor[23]         |
 19146	|----------------------------+--------------------------------+---------------------------|
 19147	|XCirculateSubwindows[23]    |XOpenIM[23]                     |XcmsStoreColors[23]        |
 19148	|----------------------------+--------------------------------+---------------------------|
 19149	|XCirculateSubwindowsDown[23]|XOpenOM[23]                     |XcmsTekHVCClipC[23]        |
 19150	|----------------------------+--------------------------------+---------------------------|
 19151	|XCirculateSubwindowsUp[23]  |XParseColor[23]                 |XcmsTekHVCClipV[23]        |
 19152	|----------------------------+--------------------------------+---------------------------|
 19153	|XClearArea[23]              |XParseGeometry[23]              |XcmsTekHVCClipVC[23]       |
 19154	|----------------------------+--------------------------------+---------------------------|
 19155	|XClearWindow[23]            |XPeekEvent[23]                  |XcmsTekHVCQueryMaxC[23]    |
 19156	|----------------------------+--------------------------------+---------------------------|
 19157	|XClipBox[23]                |XPeekIfEvent[23]                |XcmsTekHVCQueryMaxV[23]    |
 19158	|----------------------------+--------------------------------+---------------------------|
 19159	|XCloseDisplay[23]           |XPending[23]                    |XcmsTekHVCQueryMaxVC[23]   |
 19160	|----------------------------+--------------------------------+---------------------------|
 19161	|XCloseIM[23]                |XPlanesOfScreen[23]             |XcmsTekHVCQueryMaxVSamples |
 19162	|                            |                                |[23]                       |
 19163	|----------------------------+--------------------------------+---------------------------|
 19164	|XCloseOM[23]                |XPointInRegion[23]              |XcmsTekHVCQueryMinV[23]    |
 19165	|----------------------------+--------------------------------+---------------------------|
 19166	|XConfigureWindow[23]        |XPolygonRegion[23]              |XcmsTekHVCToCIEuvY[23]     |
 19167	|----------------------------+--------------------------------+---------------------------|
 19168	|XConnectionNumber[23]       |XProcessInternalConnection[23]  |XcmsTekHVCWhiteShiftColors |
 19169	|                            |                                |[23]                       |
 19170	|----------------------------+--------------------------------+---------------------------|
 19171	|XContextDependentDrawing[23]|XProtocolRevision[23]           |XcmsVisualOfCCC[23]        |
 19172	|----------------------------+--------------------------------+---------------------------|
 19173	|XContextualDrawing[23]      |XProtocolVersion[23]            |XkbAllocClientMap[23]      |
 19174	|----------------------------+--------------------------------+---------------------------|
 19175	|XConvertCase[23]            |XPutBackEvent[23]               |XkbAllocCompatMap[23]      |
 19176	|----------------------------+--------------------------------+---------------------------|
 19177	|XConvertSelection[23]       |XPutImage[23]                   |XkbAllocControls[23]       |
 19178	|----------------------------+--------------------------------+---------------------------|
 19179	|XCopyArea[23]               |XPutPixel[23]                   |XkbAllocGeomColors[23]     |
 19180	|----------------------------+--------------------------------+---------------------------|
 19181	|XCopyColormapAndFree[23]    |XQLength[23]                    |XkbAllocGeomDoodads[23]    |
 19182	|----------------------------+--------------------------------+---------------------------|
 19183	|XCopyGC[23]                 |XQueryBestCursor[23]            |XkbAllocGeomKeyAliases[23] |
 19184	|----------------------------+--------------------------------+---------------------------|
 19185	|XCopyPlane[23]              |XQueryBestSize[23]              |XkbAllocGeomKeys[23]       |
 19186	|----------------------------+--------------------------------+---------------------------|
 19187	|XCreateBitmapFromData[23]   |XQueryBestStipple[23]           |XkbAllocGeomOutlines[23]   |
 19188	|----------------------------+--------------------------------+---------------------------|
 19189	|XCreateColormap[23]         |XQueryBestTile[23]              |XkbAllocGeomOverlayKeys[23]|
 19190	|----------------------------+--------------------------------+---------------------------|
 19191	|XCreateFontCursor[23]       |XQueryColor[23]                 |XkbAllocGeomOverlayRows[23]|
 19192	|----------------------------+--------------------------------+---------------------------|
 19193	|XCreateFontSet[23]          |XQueryColors[23]                |XkbAllocGeomOverlays[23]   |
 19194	|----------------------------+--------------------------------+---------------------------|
 19195	|XCreateGC[23]               |XQueryExtension[23]             |XkbAllocGeomPoints[23]     |
 19196	|----------------------------+--------------------------------+---------------------------|
 19197	|XCreateGlyphCursor[23]      |XQueryFont[23]                  |XkbAllocGeomProps[23]      |
 19198	|----------------------------+--------------------------------+---------------------------|
 19199	|XCreateIC[23]               |XQueryKeymap[23]                |XkbAllocGeomRows[23]       |
 19200	|----------------------------+--------------------------------+---------------------------|
 19201	|XCreateImage[23]            |XQueryPointer[23]               |XkbAllocGeomSectionDoodads |
 19202	|                            |                                |[23]                       |
 19203	|----------------------------+--------------------------------+---------------------------|
 19204	|XCreateOC[23]               |XQueryTextExtents[23]           |XkbAllocGeomSections[23]   |
 19205	|----------------------------+--------------------------------+---------------------------|
 19206	|XCreatePixmap[23]           |XQueryTextExtents16[23]         |XkbAllocGeomShapes[23]     |
 19207	|----------------------------+--------------------------------+---------------------------|
 19208	|XCreatePixmapCursor[23]     |XQueryTree[23]                  |XkbAllocGeometry[23]       |
 19209	|----------------------------+--------------------------------+---------------------------|
 19210	|XCreatePixmapFromBitmapData |XRaiseWindow[23]                |XkbAllocIndicatorMaps[23]  |
 19211	|[23]                        |                                |                           |
 19212	|----------------------------+--------------------------------+---------------------------|
 19213	|XCreateRegion[23]           |XReadBitmapFile[23]             |XkbAllocKeyboard[23]       |
 19214	|----------------------------+--------------------------------+---------------------------|
 19215	|XCreateSimpleWindow[23]     |XReadBitmapFileData[23]         |XkbAllocNames[23]          |
 19216	|----------------------------+--------------------------------+---------------------------|
 19217	|XCreateWindow[23]           |XRebindKeysym[23]               |XkbAllocServerMap[23]      |
 19218	|----------------------------+--------------------------------+---------------------------|
 19219	|XDefaultColormap[23]        |XRecolorCursor[23]              |XkbApplyCompatMapToKey[23] |
 19220	|----------------------------+--------------------------------+---------------------------|
 19221	|XDefaultColormapOfScreen[23]|XReconfigureWMWindow[23]        |XkbBell[23]                |
 19222	|----------------------------+--------------------------------+---------------------------|
 19223	|XDefaultDepth[23]           |XRectInRegion[23]               |XkbBellEvent[23]           |
 19224	|----------------------------+--------------------------------+---------------------------|
 19225	|XDefaultDepthOfScreen[23]   |XRefreshKeyboardMapping[23]     |XkbChangeEnabledControls   |
 19226	|                            |                                |[23]                       |
 19227	|----------------------------+--------------------------------+---------------------------|
 19228	|XDefaultGC[23]              |XRegisterIMInstantiateCallback  |XkbChangeMap[23]           |
 19229	|                            |[23]                            |                           |
 19230	|----------------------------+--------------------------------+---------------------------|
 19231	|XDefaultGCOfScreen[23]      |XRemoveConnectionWatch[23]      |XkbChangeNames[23]         |
 19232	|----------------------------+--------------------------------+---------------------------|
 19233	|XDefaultRootWindow[23]      |XRemoveFromSaveSet[23]          |XkbChangeTypesOfKey[23]    |
 19234	|----------------------------+--------------------------------+---------------------------|
 19235	|XDefaultScreen[23]          |XRemoveHost[23]                 |XkbComputeEffectiveMap[23] |
 19236	|----------------------------+--------------------------------+---------------------------|
 19237	|XDefaultScreenOfDisplay[23] |XRemoveHosts[23]                |XkbComputeRowBounds[23]    |
 19238	|----------------------------+--------------------------------+---------------------------|
 19239	|XDefaultString[23]          |XReparentWindow[23]             |XkbComputeSectionBounds[23]|
 19240	|----------------------------+--------------------------------+---------------------------|
 19241	|XDefaultVisual[23]          |XResetScreenSaver[23]           |XkbComputeShapeBounds[23]  |
 19242	|----------------------------+--------------------------------+---------------------------|
 19243	|XDefaultVisualOfScreen[23]  |XResizeWindow[23]               |XkbComputeShapeTop[23]     |
 19244	|----------------------------+--------------------------------+---------------------------|
 19245	|XDefineCursor[23]           |XResourceManagerString[23]      |XkbCopyKeyType[23]         |
 19246	|----------------------------+--------------------------------+---------------------------|
 19247	|XDeleteContext[23]          |XRestackWindows[23]             |XkbCopyKeyTypes[23]        |
 19248	|----------------------------+--------------------------------+---------------------------|
 19249	|XDeleteModifiermapEntry[23] |XRootWindow[23]                 |XkbFindOverlayForKey[23]   |
 19250	|----------------------------+--------------------------------+---------------------------|
 19251	|XDeleteProperty[23]         |XRootWindowOfScreen[23]         |XkbForceBell[23]           |
 19252	|----------------------------+--------------------------------+---------------------------|
 19253	|XDestroyIC[23]              |XRotateBuffers[23]              |XkbFreeClientMap[23]       |
 19254	|----------------------------+--------------------------------+---------------------------|
 19255	|XDestroyImage[23]           |XRotateWindowProperties[23]     |XkbFreeCompatMap[23]       |
 19256	|----------------------------+--------------------------------+---------------------------|
 19257	|XDestroyOC[23]              |XSaveContext[23]                |XkbFreeComponentList[23]   |
 19258	|----------------------------+--------------------------------+---------------------------|
 19259	|XDestroyRegion[23]          |XScreenCount[23]                |XkbFreeControls[23]        |
 19260	|----------------------------+--------------------------------+---------------------------|
 19261	|XDestroySubwindows[23]      |XScreenNumberOfScreen[23]       |XkbFreeGeomColors[23]      |
 19262	|----------------------------+--------------------------------+---------------------------|
 19263	|XDestroyWindow[23]          |XScreenOfDisplay[23]            |XkbFreeGeomDoodads[23]     |
 19264	|----------------------------+--------------------------------+---------------------------|
 19265	|XDirectionalDependentDrawing|XScreenResourceString[23]       |XkbFreeGeomKeyAliases[23]  |
 19266	|[23]                        |                                |                           |
 19267	|----------------------------+--------------------------------+---------------------------|
 19268	|XDisableAccessControl[23]   |XSelectInput[23]                |XkbFreeGeomKeys[23]        |
 19269	|----------------------------+--------------------------------+---------------------------|
 19270	|XDisplayCells[23]           |XSendEvent[23]                  |XkbFreeGeomOutlines[23]    |
 19271	|----------------------------+--------------------------------+---------------------------|
 19272	|XDisplayHeight[23]          |XServerVendor[23]               |XkbFreeGeomOverlayKeys[23] |
 19273	|----------------------------+--------------------------------+---------------------------|
 19274	|XDisplayHeightMM[23]        |XSetAccessControl[23]           |XkbFreeGeomOverlayRows[23] |
 19275	|----------------------------+--------------------------------+---------------------------|
 19276	|XDisplayKeycodes[23]        |XSetAfterFunction[23]           |XkbFreeGeomOverlays[23]    |
 19277	|----------------------------+--------------------------------+---------------------------|
 19278	|XDisplayMotionBufferSize[23]|XSetArcMode[23]                 |XkbFreeGeomPoints[23]      |
 19279	|----------------------------+--------------------------------+---------------------------|
 19280	|XDisplayName[23]            |XSetAuthorization[23]           |XkbFreeGeomProperties[23]  |
 19281	|----------------------------+--------------------------------+---------------------------|
 19282	|XDisplayOfIM[23]            |XSetBackground[23]              |XkbFreeGeomRows[23]        |
 19283	|----------------------------+--------------------------------+---------------------------|
 19284	|XDisplayOfOM[23]            |XSetClassHint[23]               |XkbFreeGeomSections[23]    |
 19285	|----------------------------+--------------------------------+---------------------------|
 19286	|XDisplayOfScreen[23]        |XSetClipMask[23]                |XkbFreeGeomShapes[23]      |
 19287	|----------------------------+--------------------------------+---------------------------|
 19288	|XDisplayPlanes[23]          |XSetClipOrigin[23]              |XkbFreeGeometry[23]        |
 19289	|----------------------------+--------------------------------+---------------------------|
 19290	|XDisplayString[23]          |XSetClipRectangles[23]          |XkbFreeIndicatorMaps[23]   |
 19291	|----------------------------+--------------------------------+---------------------------|
 19292	|XDisplayWidth[23]           |XSetCloseDownMode[23]           |XkbFreeKeyboard[23]        |
 19293	|----------------------------+--------------------------------+---------------------------|
 19294	|XDisplayWidthMM[23]         |XSetCommand[23]                 |XkbFreeNames[23]           |
 19295	|----------------------------+--------------------------------+---------------------------|
 19296	|XDoesBackingStore[23]       |XSetDashes[23]                  |XkbFreeServerMap[23]       |
 19297	|----------------------------+--------------------------------+---------------------------|
 19298	|XDoesSaveUnders[23]         |XSetErrorHandler[23]            |XkbGetAutoRepeatRate[23]   |
 19299	|----------------------------+--------------------------------+---------------------------|
 19300	|XDrawArc[23]                |XSetFillRule[23]                |XkbGetCompatMap[23]        |
 19301	|----------------------------+--------------------------------+---------------------------|
 19302	|XDrawArcs[23]               |XSetFillStyle[23]               |XkbGetControls[23]         |
 19303	|----------------------------+--------------------------------+---------------------------|
 19304	|XDrawImageString[23]        |XSetFont[23]                    |XkbGetGeometry[23]         |
 19305	|----------------------------+--------------------------------+---------------------------|
 19306	|XDrawImageString16[23]      |XSetFontPath[23]                |XkbGetIndicatorMap[23]     |
 19307	|----------------------------+--------------------------------+---------------------------|
 19308	|XDrawLine[23]               |XSetForeground[23]              |XkbGetIndicatorState[23]   |
 19309	|----------------------------+--------------------------------+---------------------------|
 19310	|XDrawLines[23]              |XSetFunction[23]                |XkbGetKeyActions[23]       |
 19311	|----------------------------+--------------------------------+---------------------------|
 19312	|XDrawPoint[23]              |XSetGraphicsExposures[23]       |XkbGetKeyBehaviors[23]     |
 19313	|----------------------------+--------------------------------+---------------------------|
 19314	|XDrawPoints[23]             |XSetICFocus[23]                 |XkbGetKeyExplicitComponents|
 19315	|                            |                                |[23]                       |
 19316	|----------------------------+--------------------------------+---------------------------|
 19317	|XDrawRectangle[23]          |XSetICValues[23]                |XkbGetKeyModifierMap[23]   |
 19318	|----------------------------+--------------------------------+---------------------------|
 19319	|XDrawRectangles[23]         |XSetIMValues[23]                |XkbGetKeySyms[23]          |
 19320	|----------------------------+--------------------------------+---------------------------|
 19321	|XDrawSegments[23]           |XSetIOErrorHandler[23]          |XkbGetKeyTypes[23]         |
 19322	|----------------------------+--------------------------------+---------------------------|
 19323	|XDrawString[23]             |XSetIconName[23]                |XkbGetKeyboard[23]         |
 19324	|----------------------------+--------------------------------+---------------------------|
 19325	|XDrawString16[23]           |XSetIconSizes[23]               |XkbGetKeyboardByName[23]   |
 19326	|----------------------------+--------------------------------+---------------------------|
 19327	|XDrawText[23]               |XSetInputFocus[23]              |XkbGetMap[23]              |
 19328	|----------------------------+--------------------------------+---------------------------|
 19329	|XDrawText16[23]             |XSetLineAttributes[23]          |XkbGetMapChanges[23]       |
 19330	|----------------------------+--------------------------------+---------------------------|
 19331	|XEHeadOfExtensionList[23]   |XSetLocaleModifiers[23]         |XkbGetNamedGeometry[23]    |
 19332	|----------------------------+--------------------------------+---------------------------|
 19333	|XEmptyRegion[23]            |XSetModifierMapping[23]         |XkbGetNamedIndicator[23]   |
 19334	|----------------------------+--------------------------------+---------------------------|
 19335	|XEnableAccessControl[23]    |XSetNormalHints[23]             |XkbGetNames[23]            |
 19336	|----------------------------+--------------------------------+---------------------------|
 19337	|XEqualRegion[23]            |XSetOCValues[23]                |XkbGetState[23]            |
 19338	|----------------------------+--------------------------------+---------------------------|
 19339	|XEventMaskOfScreen[23]      |XSetOMValues[23]                |XkbGetUpdatedMap[23]       |
 19340	|----------------------------+--------------------------------+---------------------------|
 19341	|XEventsQueued[23]           |XSetPlaneMask[23]               |XkbGetVirtualMods[23]      |
 19342	|----------------------------+--------------------------------+---------------------------|
 19343	|XExtendedMaxRequestSize[23] |XSetPointerMapping[23]          |XkbGetXlibControls[23]     |
 19344	|----------------------------+--------------------------------+---------------------------|
 19345	|XExtentsOfFontSet[23]       |XSetRGBColormaps[23]            |XkbIgnoreExtension[23]     |
 19346	|----------------------------+--------------------------------+---------------------------|
 19347	|XFetchBuffer[23]            |XSetRegion[23]                  |XkbInitCanonicalKeyTypes   |
 19348	|                            |                                |[23]                       |
 19349	|----------------------------+--------------------------------+---------------------------|
 19350	|XFetchBytes[23]             |XSetScreenSaver[23]             |XkbKeyTypesForCoreSymbols  |
 19351	|                            |                                |[23]                       |
 19352	|----------------------------+--------------------------------+---------------------------|
 19353	|XFetchName[23]              |XSetSelectionOwner[23]          |XkbKeycodeToKeysym[23]     |
 19354	|----------------------------+--------------------------------+---------------------------|
 19355	|XFillArc[23]                |XSetSizeHints[23]               |XkbKeysymToModifiers[23]   |
 19356	|----------------------------+--------------------------------+---------------------------|
 19357	|XFillArcs[23]               |XSetStandardColormap[23]        |XkbLatchGroup[23]          |
 19358	|----------------------------+--------------------------------+---------------------------|
 19359	|XFillPolygon[23]            |XSetStandardProperties[23]      |XkbLatchModifiers[23]      |
 19360	|----------------------------+--------------------------------+---------------------------|
 19361	|XFillRectangle[23]          |XSetState[23]                   |XkbLibraryVersion[23]      |
 19362	|----------------------------+--------------------------------+---------------------------|
 19363	|XFillRectangles[23]         |XSetStipple[23]                 |XkbListComponents[23]      |
 19364	|----------------------------+--------------------------------+---------------------------|
 19365	|XFilterEvent[23]            |XSetSubwindowMode[23]           |XkbLockGroup[23]           |
 19366	|----------------------------+--------------------------------+---------------------------|
 19367	|XFindContext[23]            |XSetTSOrigin[23]                |XkbLockModifiers[23]       |
 19368	|----------------------------+--------------------------------+---------------------------|
 19369	|XFindOnExtensionList[23]    |XSetTextProperty[23]            |XkbLookupKeyBinding[23]    |
 19370	|----------------------------+--------------------------------+---------------------------|
 19371	|XFlush[23]                  |XSetTile[23]                    |XkbLookupKeySym[23]        |
 19372	|----------------------------+--------------------------------+---------------------------|
 19373	|XFlushGC[23]                |XSetTransientForHint[23]        |XkbNoteControlsChanges[23] |
 19374	|----------------------------+--------------------------------+---------------------------|
 19375	|XFontsOfFontSet[23]         |XSetWMClientMachine[23]         |XkbNoteMapChanges[23]      |
 19376	|----------------------------+--------------------------------+---------------------------|
 19377	|XForceScreenSaver[23]       |XSetWMColormapWindows[23]       |XkbNoteNameChanges[23]     |
 19378	|----------------------------+--------------------------------+---------------------------|
 19379	|XFree[23]                   |XSetWMHints[23]                 |XkbOpenDisplay[23]         |
 19380	|----------------------------+--------------------------------+---------------------------|
 19381	|XFreeColormap[23]           |XSetWMIconName[23]              |XkbQueryExtension[23]      |
 19382	|----------------------------+--------------------------------+---------------------------|
 19383	|XFreeColors[23]             |XSetWMName[23]                  |XkbRefreshKeyboardMapping  |
 19384	|                            |                                |[23]                       |
 19385	|----------------------------+--------------------------------+---------------------------|
 19386	|XFreeCursor[23]             |XSetWMNormalHints[23]           |XkbResizeKeyActions[23]    |
 19387	|----------------------------+--------------------------------+---------------------------|
 19388	|XFreeExtensionList[23]      |XSetWMProperties[23]            |XkbResizeKeySyms[23]       |
 19389	|----------------------------+--------------------------------+---------------------------|
 19390	|XFreeFont[23]               |XSetWMProtocols[23]             |XkbResizeKeyType[23]       |
 19391	|----------------------------+--------------------------------+---------------------------|
 19392	|XFreeFontInfo[23]           |XSetWMSizeHints[23]             |XkbSelectEventDetails[23]  |
 19393	|----------------------------+--------------------------------+---------------------------|
 19394	|XFreeFontNames[23]          |XSetWindowBackground[23]        |XkbSelectEvents[23]        |
 19395	|----------------------------+--------------------------------+---------------------------|
 19396	|XFreeFontPath[23]           |XSetWindowBackgroundPixmap[23]  |XkbSetAtomFuncs[23]        |
 19397	|----------------------------+--------------------------------+---------------------------|
 19398	|XFreeFontSet[23]            |XSetWindowBorder[23]            |XkbSetAutoRepeatRate[23]   |
 19399	|----------------------------+--------------------------------+---------------------------|
 19400	|XFreeGC[23]                 |XSetWindowBorderPixmap[23]      |XkbSetAutoResetControls[23]|
 19401	|----------------------------+--------------------------------+---------------------------|
 19402	|XFreeModifiermap[23]        |XSetWindowBorderWidth[23]       |XkbSetCompatMap[23]        |
 19403	|----------------------------+--------------------------------+---------------------------|
 19404	|XFreePixmap[23]             |XSetWindowColormap[23]          |XkbSetControls[23]         |
 19405	|----------------------------+--------------------------------+---------------------------|
 19406	|XFreeStringList[23]         |XSetZoomHints[23]               |XkbSetDebuggingFlags[23]   |
 19407	|----------------------------+--------------------------------+---------------------------|
 19408	|XGContextFromGC[23]         |XShrinkRegion[23]               |XkbSetDetectableAutoRepeat |
 19409	|                            |                                |[23]                       |
 19410	|----------------------------+--------------------------------+---------------------------|
 19411	|XGeometry[23]               |XStoreBuffer[23]                |XkbSetGeometry[23]         |
 19412	|----------------------------+--------------------------------+---------------------------|
 19413	|XGetAtomName[23]            |XStoreBytes[23]                 |XkbSetIgnoreLockMods[23]   |
 19414	|----------------------------+--------------------------------+---------------------------|
 19415	|XGetAtomNames[23]           |XStoreColor[23]                 |XkbSetIndicatorMap[23]     |
 19416	|----------------------------+--------------------------------+---------------------------|
 19417	|XGetClassHint[23]           |XStoreColors[23]                |XkbSetMap[23]              |
 19418	|----------------------------+--------------------------------+---------------------------|
 19419	|XGetCommand[23]             |XStoreName[23]                  |XkbSetNamedIndicator[23]   |
 19420	|----------------------------+--------------------------------+---------------------------|
 19421	|XGetDefault[23]             |XStoreNamedColor[23]            |XkbSetNames[23]            |
 19422	|----------------------------+--------------------------------+---------------------------|
 19423	|XGetErrorDatabaseText[23]   |XStringListToTextProperty[23]   |XkbSetServerInternalMods   |
 19424	|                            |                                |[23]                       |
 19425	|----------------------------+--------------------------------+---------------------------|
 19426	|XGetErrorText[23]           |XStringToKeysym[23]             |XkbSetXlibControls[23]     |
 19427	|----------------------------+--------------------------------+---------------------------|
 19428	|XGetFontPath[23]            |XSubImage[23]                   |XkbToControl[23]           |
 19429	|----------------------------+--------------------------------+---------------------------|
 19430	|XGetFontProperty[23]        |XSubtractRegion[23]             |XkbTranslateKeyCode[23]    |
 19431	|----------------------------+--------------------------------+---------------------------|
 19432	|XGetGCValues[23]            |XSupportsLocale[23]             |XkbTranslateKeySym[23]     |
 19433	|----------------------------+--------------------------------+---------------------------|
 19434	|XGetGeometry[23]            |XSync[23]                       |XkbUpdateMapFromCore[23]   |
 19435	|----------------------------+--------------------------------+---------------------------|
 19436	|XGetICValues[23]            |XSynchronize[23]                |XkbUseExtension[23]        |
 19437	|----------------------------+--------------------------------+---------------------------|
 19438	|XGetIMValues[23]            |XTextExtents[23]                |XkbVirtualModsToReal[23]   |
 19439	|----------------------------+--------------------------------+---------------------------|
 19440	|XGetIconName[23]            |XTextExtents16[23]              |XmbDrawImageString[23]     |
 19441	|----------------------------+--------------------------------+---------------------------|
 19442	|XGetIconSizes[23]           |XTextPropertyToStringList[23]   |XmbDrawString[23]          |
 19443	|----------------------------+--------------------------------+---------------------------|
 19444	|XGetImage[23]               |XTextWidth[23]                  |XmbDrawText[23]            |
 19445	|----------------------------+--------------------------------+---------------------------|
 19446	|XGetInputFocus[23]          |XTextWidth16[23]                |XmbLookupString[23]        |
 19447	|----------------------------+--------------------------------+---------------------------|
 19448	|XGetKeyboardControl[23]     |XTranslateCoordinates[23]       |XmbResetIC[23]             |
 19449	|----------------------------+--------------------------------+---------------------------|
 19450	|XGetKeyboardMapping[23]     |XUndefineCursor[23]             |XmbSetWMProperties[23]     |
 19451	|----------------------------+--------------------------------+---------------------------|
 19452	|XGetModifierMapping[23]     |XUngrabButton[23]               |XmbTextEscapement[23]      |
 19453	|----------------------------+--------------------------------+---------------------------|
 19454	|XGetMotionEvents[23]        |XUngrabKey[23]                  |XmbTextExtents[23]         |
 19455	|----------------------------+--------------------------------+---------------------------|
 19456	|XGetNormalHints[23]         |XUngrabKeyboard[23]             |XmbTextListToTextProperty  |
 19457	|                            |                                |[23]                       |
 19458	|----------------------------+--------------------------------+---------------------------|
 19459	|XGetOCValues[23]            |XUngrabPointer[23]              |XmbTextPerCharExtents[23]  |
 19460	|----------------------------+--------------------------------+---------------------------|
 19461	|XGetOMValues[23]            |XUngrabServer[23]               |XmbTextPropertyToTextList  |
 19462	|                            |                                |[23]                       |
 19463	|----------------------------+--------------------------------+---------------------------|
 19464	|XGetPixel[23]               |XUninstallColormap[23]          |XrmCombineDatabase[23]     |
 19465	|----------------------------+--------------------------------+---------------------------|
 19466	|XGetPointerControl[23]      |XUnionRectWithRegion[23]        |XrmCombineFileDatabase[23] |
 19467	|----------------------------+--------------------------------+---------------------------|
 19468	|XGetPointerMapping[23]      |XUnionRegion[23]                |XrmDestroyDatabase[23]     |
 19469	|----------------------------+--------------------------------+---------------------------|
 19470	|XGetRGBColormaps[23]        |XUnloadFont[23]                 |XrmEnumerateDatabase[23]   |
 19471	|----------------------------+--------------------------------+---------------------------|
 19472	|XGetScreenSaver[23]         |XUnlockDisplay[23]              |XrmGetDatabase[23]         |
 19473	|----------------------------+--------------------------------+---------------------------|
 19474	|XGetSelectionOwner[23]      |XUnmapSubwindows[23]            |XrmGetFileDatabase[23]     |
 19475	|----------------------------+--------------------------------+---------------------------|
 19476	|XGetSizeHints[23]           |XUnmapWindow[23]                |XrmGetResource[23]         |
 19477	|----------------------------+--------------------------------+---------------------------|
 19478	|XGetStandardColormap[23]    |XUnregisterIMInstantiateCallback|XrmGetStringDatabase[23]   |
 19479	|                            |[23]                            |                           |
 19480	|----------------------------+--------------------------------+---------------------------|
 19481	|XGetSubImage[23]            |XUnsetICFocus[23]               |XrmInitialize[23]          |
 19482	|----------------------------+--------------------------------+---------------------------|
 19483	|XGetTextProperty[23]        |XVaCreateNestedList[23]         |XrmLocaleOfDatabase[23]    |
 19484	|----------------------------+--------------------------------+---------------------------|
 19485	|XGetTransientForHint[23]    |XVendorRelease[23]              |XrmMergeDatabases[23]      |
 19486	|----------------------------+--------------------------------+---------------------------|
 19487	|XGetVisualInfo[23]          |XVisualIDFromVisual[23]         |XrmParseCommand[23]        |
 19488	|----------------------------+--------------------------------+---------------------------|
 19489	|XGetWMClientMachine[23]     |XWMGeometry[23]                 |XrmPermStringToQuark[23]   |
 19490	|----------------------------+--------------------------------+---------------------------|
 19491	|XGetWMColormapWindows[23]   |XWarpPointer[23]                |XrmPutFileDatabase[23]     |
 19492	|----------------------------+--------------------------------+---------------------------|
 19493	|XGetWMHints[23]             |XWhitePixel[23]                 |XrmPutLineResource[23]     |
 19494	|----------------------------+--------------------------------+---------------------------|
 19495	|XGetWMIconName[23]          |XWhitePixelOfScreen[23]         |XrmPutResource[23]         |
 19496	|----------------------------+--------------------------------+---------------------------|
 19497	|XGetWMName[23]              |XWidthMMOfScreen[23]            |XrmPutStringResource[23]   |
 19498	|----------------------------+--------------------------------+---------------------------|
 19499	|XGetWMNormalHints[23]       |XWidthOfScreen[23]              |XrmQGetResource[23]        |
 19500	|----------------------------+--------------------------------+---------------------------|
 19501	|XGetWMProtocols[23]         |XWindowEvent[23]                |XrmQGetSearchList[23]      |
 19502	|----------------------------+--------------------------------+---------------------------|
 19503	|XGetWMSizeHints[23]         |XWithdrawWindow[23]             |XrmQGetSearchResource[23]  |
 19504	|----------------------------+--------------------------------+---------------------------|
 19505	|XGetWindowAttributes[23]    |XWriteBitmapFile[23]            |XrmQPutResource[23]        |
 19506	|----------------------------+--------------------------------+---------------------------|
 19507	|XGetWindowProperty[23]      |XXorRegion[23]                  |XrmQPutStringResource[23]  |
 19508	|----------------------------+--------------------------------+---------------------------|
 19509	|XGetZoomHints[23]           |XauDisposeAuth[23]              |XrmQuarkToString[23]       |
 19510	|----------------------------+--------------------------------+---------------------------|
 19511	|XGrabButton[23]             |XauFileName[23]                 |XrmSetDatabase[23]         |
 19512	|----------------------------+--------------------------------+---------------------------|
 19513	|XGrabKey[23]                |XauGetBestAuthByAddr[23]        |XrmStringToBindingQuarkList|
 19514	|                            |                                |[23]                       |
 19515	|----------------------------+--------------------------------+---------------------------|
 19516	|XGrabKeyboard[23]           |XauReadAuth[23]                 |XrmStringToQuark[23]       |
 19517	|----------------------------+--------------------------------+---------------------------|
 19518	|XGrabPointer[23]            |XcmsAddColorSpace[23]           |XrmStringToQuarkList[23]   |
 19519	|----------------------------+--------------------------------+---------------------------|
 19520	|XGrabServer[23]             |XcmsAddFunctionSet[23]          |XrmUniqueQuark[23]         |
 19521	|----------------------------+--------------------------------+---------------------------|
 19522	|XHeightMMOfScreen[23]       |XcmsAllocColor[23]              |XwcDrawImageString[23]     |
 19523	|----------------------------+--------------------------------+---------------------------|
 19524	|XHeightOfScreen[23]         |XcmsAllocNamedColor[23]         |XwcDrawString[23]          |
 19525	|----------------------------+--------------------------------+---------------------------|
 19526	|XIMOfIC[23]                 |XcmsCCCOfColormap[23]           |XwcDrawText[23]            |
 19527	|----------------------------+--------------------------------+---------------------------|
 19528	|XIconifyWindow[23]          |XcmsCIELabClipL[23]             |XwcFreeStringList[23]      |
 19529	|----------------------------+--------------------------------+---------------------------|
 19530	|XIfEvent[23]                |XcmsCIELabClipLab[23]           |XwcLookupString[23]        |
 19531	|----------------------------+--------------------------------+---------------------------|
 19532	|XImageByteOrder[23]         |XcmsCIELabClipab[23]            |XwcResetIC[23]             |
 19533	|----------------------------+--------------------------------+---------------------------|
 19534	|XInitExtension[23]          |XcmsCIELabQueryMaxC[23]         |XwcTextEscapement[23]      |
 19535	|----------------------------+--------------------------------+---------------------------|
 19536	|XInitImage[23]              |XcmsCIELabQueryMaxL[23]         |XwcTextExtents[23]         |
 19537	|----------------------------+--------------------------------+---------------------------|
 19538	|XInitThreads[23]            |XcmsCIELabQueryMaxLC[23]        |XwcTextListToTextProperty  |
 19539	|                            |                                |[23]                       |
 19540	|----------------------------+--------------------------------+---------------------------|
 19541	|XInsertModifiermapEntry[23] |XcmsCIELabQueryMinL[23]         |XwcTextPerCharExtents[23]  |
 19542	|----------------------------+--------------------------------+---------------------------|
 19543	|XInstallColormap[23]        |XcmsCIELabToCIEXYZ[23]          |XwcTextPropertyToTextList  |
 19544	|                            |                                |[23]                       |
 19545	|----------------------------+--------------------------------+---------------------------|
 19546	|XInternAtom[23]             |XcmsCIELabWhiteShiftColors[23]  |                           |
 19547	|----------------------------+--------------------------------+---------------------------|
 19548	|XInternAtoms[23]            |XcmsCIELuvClipL[23]             |                           |
 19549	+-----------------------------------------------------------------------------------------+
 19550	-------------------------------------------------------------------------------
 19551	
 19552	libXt
 19553	
 19554	The behaviour of the interfaces in this library is specified by the following
 19555	Standards.
 19556	
 19557	Linux Standard Base        
 19558	X11R.4 X Toolkit Intrinsics
 19559	
 19560	Table A-2. libXt Function Interfaces
 19561	
 19562	+-------------------------------------------------------------------------------------------+
 19563	|XtAddActions[33]             |XtCvtStringToInitialState[33]   |XtOwnSelectionIncremental   |
 19564	|                             |                                |[33]                        |
 19565	|-----------------------------+--------------------------------+----------------------------|
 19566	|XtAddCallback[33]            |XtCvtStringToInt[33]            |XtParent[33]                |
 19567	|-----------------------------+--------------------------------+----------------------------|
 19568	|XtAddCallbacks[33]           |XtCvtStringToPixel[33]          |XtParseAcceleratorTable[33] |
 19569	|-----------------------------+--------------------------------+----------------------------|
 19570	|XtAddConverter[33]           |XtCvtStringToRestartStyle[33]   |XtParseTranslationTable[33] |
 19571	|-----------------------------+--------------------------------+----------------------------|
 19572	|XtAddEventHandler[33]        |XtCvtStringToShort[33]          |XtPeekEvent[33]             |
 19573	|-----------------------------+--------------------------------+----------------------------|
 19574	|XtAddExposureToRegion[33]    |XtCvtStringToTranslationTable   |XtPending[33]               |
 19575	|                             |[33]                            |                            |
 19576	|-----------------------------+--------------------------------+----------------------------|
 19577	|XtAddGrab[33]                |XtCvtStringToUnsignedChar[33]   |XtPopdown[33]               |
 19578	|-----------------------------+--------------------------------+----------------------------|
 19579	|XtAddInput[33]               |XtCvtStringToVisual[33]         |XtPopup[33]                 |
 19580	|-----------------------------+--------------------------------+----------------------------|
 19581	|XtAddRawEventHandler[33]     |XtDatabase[33]                  |XtPopupSpringLoaded[33]     |
 19582	|-----------------------------+--------------------------------+----------------------------|
 19583	|XtAddSignal[33]              |XtDestroyApplicationContext[33] |XtProcessEvent[33]          |
 19584	|-----------------------------+--------------------------------+----------------------------|
 19585	|XtAddTimeOut[33]             |XtDestroyGC[33]                 |XtProcessLock[33]           |
 19586	|-----------------------------+--------------------------------+----------------------------|
 19587	|XtAddWorkProc[33]            |XtDestroyWidget[33]             |XtProcessUnlock[33]         |
 19588	|-----------------------------+--------------------------------+----------------------------|
 19589	|XtAllocateGC[33]             |XtDirectConvert[33]             |XtQueryGeometry[33]         |
 19590	|-----------------------------+--------------------------------+----------------------------|
 19591	|XtAppAddActionHook[33]       |XtDisownSelection[33]           |XtRealizeWidget[33]         |
 19592	|-----------------------------+--------------------------------+----------------------------|
 19593	|XtAppAddActions[33]          |XtDispatchEvent[33]             |XtRealloc[33]               |
 19594	|-----------------------------+--------------------------------+----------------------------|
 19595	|XtAppAddBlockHook[33]        |XtDispatchEventToWidget[33]     |XtRegisterCaseConverter[33] |
 19596	|-----------------------------+--------------------------------+----------------------------|
 19597	|XtAppAddConverter[33]        |XtDisplay[33]                   |XtRegisterDrawable[33]      |
 19598	|-----------------------------+--------------------------------+----------------------------|
 19599	|XtAppAddInput[33]            |XtDisplayInitialize[33]         |XtRegisterExtensionSelector |
 19600	|                             |                                |[33]                        |
 19601	|-----------------------------+--------------------------------+----------------------------|
 19602	|XtAppAddSignal[33]           |XtDisplayOfObject[33]           |XtRegisterGrabAction[33]    |
 19603	|-----------------------------+--------------------------------+----------------------------|
 19604	|XtAppAddTimeOut[33]          |XtDisplayStringConversionWarning|XtReleaseGC[33]             |
 19605	|                             |[33]                            |                            |
 19606	|-----------------------------+--------------------------------+----------------------------|
 19607	|XtAppAddWorkProc[33]         |XtDisplayToApplicationContext   |XtReleasePropertyAtom[33]   |
 19608	|                             |[33]                            |                            |
 19609	|-----------------------------+--------------------------------+----------------------------|
 19610	|XtAppCreateShell[33]         |XtError[33]                     |XtRemoveActionHook[33]      |
 19611	|-----------------------------+--------------------------------+----------------------------|
 19612	|XtAppError[33]               |XtErrorMsg[33]                  |XtRemoveAllCallbacks[33]    |
 19613	|-----------------------------+--------------------------------+----------------------------|
 19614	|XtAppErrorMsg[33]            |XtFindFile[33]                  |XtRemoveBlockHook[33]       |
 19615	|-----------------------------+--------------------------------+----------------------------|
 19616	|XtAppGetErrorDatabase[33]    |XtFree[33]                      |XtRemoveCallback[33]        |
 19617	|-----------------------------+--------------------------------+----------------------------|
 19618	|XtAppGetErrorDatabaseText[33]|XtGetActionKeysym[33]           |XtRemoveCallbacks[33]       |
 19619	|-----------------------------+--------------------------------+----------------------------|
 19620	|XtAppGetExitFlag[33]         |XtGetActionList[33]             |XtRemoveEventHandler[33]    |
 19621	|-----------------------------+--------------------------------+----------------------------|
 19622	|XtAppGetSelectionTimeout[33] |XtGetApplicationNameAndClass[33]|XtRemoveEventTypeHandler[33]|
 19623	|-----------------------------+--------------------------------+----------------------------|
 19624	|XtAppInitialize[33]          |XtGetApplicationResources[33]   |XtRemoveGrab[33]            |
 19625	|-----------------------------+--------------------------------+----------------------------|
 19626	|XtAppLock[33]                |XtGetClassExtension[33]         |XtRemoveInput[33]           |
 19627	|-----------------------------+--------------------------------+----------------------------|
 19628	|XtAppMainLoop[33]            |XtGetConstraintResourceList[33] |XtRemoveRawEventHandler[33] |
 19629	|-----------------------------+--------------------------------+----------------------------|
 19630	|XtAppNextEvent[33]           |XtGetDisplays[33]               |XtRemoveSignal[33]          |
 19631	|-----------------------------+--------------------------------+----------------------------|
 19632	|XtAppPeekEvent[33]           |XtGetErrorDatabase[33]          |XtRemoveTimeOut[33]         |
 19633	|-----------------------------+--------------------------------+----------------------------|
 19634	|XtAppPending[33]             |XtGetErrorDatabaseText[33]      |XtRemoveWorkProc[33]        |
 19635	|-----------------------------+--------------------------------+----------------------------|
 19636	|XtAppProcessEvent[33]        |XtGetGC[33]                     |XtReservePropertyAtom[33]   |
 19637	|-----------------------------+--------------------------------+----------------------------|
 19638	|XtAppReleaseCacheRefs[33]    |XtGetKeyboardFocusWidget[33]    |XtResizeWidget[33]          |
 19639	|-----------------------------+--------------------------------+----------------------------|
 19640	|XtAppSetErrorHandler[33]     |XtGetKeysymTable[33]            |XtResizeWindow[33]          |
 19641	|-----------------------------+--------------------------------+----------------------------|
 19642	|XtAppSetErrorMsgHandler[33]  |XtGetMultiClickTime[33]         |XtResolvePathname[33]       |
 19643	|-----------------------------+--------------------------------+----------------------------|
 19644	|XtAppSetExitFlag[33]         |XtGetResourceList[33]           |XtScreen[33]                |
 19645	|-----------------------------+--------------------------------+----------------------------|
 19646	|XtAppSetFallbackResources[33]|XtGetSelectionParameters[33]    |XtScreenDatabase[33]        |
 19647	|-----------------------------+--------------------------------+----------------------------|
 19648	|XtAppSetSelectionTimeout[33] |XtGetSelectionRequest[33]       |XtScreenOfObject[33]        |
 19649	|-----------------------------+--------------------------------+----------------------------|
 19650	|XtAppSetTypeConverter[33]    |XtGetSelectionTimeout[33]       |XtSendSelectionRequest[33]  |
 19651	|-----------------------------+--------------------------------+----------------------------|
 19652	|XtAppSetWarningHandler[33]   |XtGetSelectionValue[33]         |XtSessionGetToken[33]       |
 19653	|-----------------------------+--------------------------------+----------------------------|
 19654	|XtAppSetWarningMsgHandler[33]|XtGetSelectionValueIncremental  |XtSessionReturnToken[33]    |
 19655	|                             |[33]                            |                            |
 19656	|-----------------------------+--------------------------------+----------------------------|
 19657	|XtAppUnlock[33]              |XtGetSelectionValues[33]        |XtSetErrorHandler[33]       |
 19658	|-----------------------------+--------------------------------+----------------------------|
 19659	|XtAppWarning[33]             |XtGetSelectionValuesIncremental |XtSetErrorMsgHandler[33]    |
 19660	|                             |[33]                            |                            |
 19661	|-----------------------------+--------------------------------+----------------------------|
 19662	|XtAppWarningMsg[33]          |XtGetSubresources[33]           |XtSetEventDispatcher[33]    |
 19663	|-----------------------------+--------------------------------+----------------------------|
 19664	|XtAugmentTranslations[33]    |XtGetSubvalues[33]              |XtSetKeyTranslator[33]      |
 19665	|-----------------------------+--------------------------------+----------------------------|
 19666	|XtBuildEventMask[33]         |XtGetValues[33]                 |XtSetKeyboardFocus[33]      |
 19667	|-----------------------------+--------------------------------+----------------------------|
 19668	|XtCallAcceptFocus[33]        |XtGrabButton[33]                |XtSetLanguageProc[33]       |
 19669	|-----------------------------+--------------------------------+----------------------------|
 19670	|XtCallActionProc[33]         |XtGrabKey[33]                   |XtSetMappedWhenManaged[33]  |
 19671	|-----------------------------+--------------------------------+----------------------------|
 19672	|XtCallCallbackList[33]       |XtGrabKeyboard[33]              |XtSetMultiClickTime[33]     |
 19673	|-----------------------------+--------------------------------+----------------------------|
 19674	|XtCallCallbacks[33]          |XtGrabPointer[33]               |XtSetSelectionParameters[33]|
 19675	|-----------------------------+--------------------------------+----------------------------|
 19676	|XtCallConverter[33]          |XtHasCallbacks[33]              |XtSetSelectionTimeout[33]   |
 19677	|-----------------------------+--------------------------------+----------------------------|
 19678	|XtCallbackExclusive[33]      |XtHooksOfDisplay[33]            |XtSetSensitive[33]          |
 19679	|-----------------------------+--------------------------------+----------------------------|
 19680	|XtCallbackNone[33]           |XtInitialize[33]                |XtSetSubvalues[33]          |
 19681	|-----------------------------+--------------------------------+----------------------------|
 19682	|XtCallbackNonexclusive[33]   |XtInitializeWidgetClass[33]     |XtSetTypeConverter[33]      |
 19683	|-----------------------------+--------------------------------+----------------------------|
 19684	|XtCallbackPopdown[33]        |XtInsertEventHandler[33]        |XtSetValues[33]             |
 19685	|-----------------------------+--------------------------------+----------------------------|
 19686	|XtCallbackReleaseCacheRef[33]|XtInsertEventTypeHandler[33]    |XtSetWMColormapWindows[33]  |
 19687	|-----------------------------+--------------------------------+----------------------------|
 19688	|XtCallbackReleaseCacheRefList|XtInsertRawEventHandler[33]     |XtSetWarningHandler[33]     |
 19689	|[33]                         |                                |                            |
 19690	|-----------------------------+--------------------------------+----------------------------|
 19691	|XtCalloc[33]                 |XtInstallAccelerators[33]       |XtSetWarningMsgHandler[33]  |
 19692	|-----------------------------+--------------------------------+----------------------------|
 19693	|XtCancelSelectionRequest[33] |XtInstallAllAccelerators[33]    |XtStringConversionWarning   |
 19694	|                             |                                |[33]                        |
 19695	|-----------------------------+--------------------------------+----------------------------|
 19696	|XtChangeManagedSet[33]       |XtIsApplicationShell[33]        |XtSuperclass[33]            |
 19697	|-----------------------------+--------------------------------+----------------------------|
 19698	|XtClass[33]                  |XtIsComposite[33]               |XtToolkitInitialize[33]     |
 19699	|-----------------------------+--------------------------------+----------------------------|
 19700	|XtCloseDisplay[33]           |XtIsConstraint[33]              |XtToolkitThreadInitialize   |
 19701	|                             |                                |[33]                        |
 19702	|-----------------------------+--------------------------------+----------------------------|
 19703	|XtConfigureWidget[33]        |XtIsManaged[33]                 |XtTranslateCoords[33]       |
 19704	|-----------------------------+--------------------------------+----------------------------|
 19705	|XtConvert[33]                |XtIsObject[33]                  |XtTranslateKey[33]          |
 19706	|-----------------------------+--------------------------------+----------------------------|
 19707	|XtConvertAndStore[33]        |XtIsOverrideShell[33]           |XtTranslateKeycode[33]      |
 19708	|-----------------------------+--------------------------------+----------------------------|
 19709	|XtConvertCase[33]            |XtIsRealized[33]                |XtUngrabButton[33]          |
 19710	|-----------------------------+--------------------------------+----------------------------|
 19711	|XtCreateApplicationContext   |XtIsRectObj[33]                 |XtUngrabKey[33]             |
 19712	|[33]                         |                                |                            |
 19713	|-----------------------------+--------------------------------+----------------------------|
 19714	|XtCreateApplicationShell[33] |XtIsSensitive[33]               |XtUngrabKeyboard[33]        |
 19715	|-----------------------------+--------------------------------+----------------------------|
 19716	|XtCreateManagedWidget[33]    |XtIsSessionShell[33]            |XtUngrabPointer[33]         |
 19717	|-----------------------------+--------------------------------+----------------------------|
 19718	|XtCreatePopupShell[33]       |XtIsShell[33]                   |XtUninstallTranslations[33] |
 19719	|-----------------------------+--------------------------------+----------------------------|
 19720	|XtCreateSelectionRequest[33] |XtIsSubclass[33]                |XtUnmanageChild[33]         |
 19721	|-----------------------------+--------------------------------+----------------------------|
 19722	|XtCreateWidget[33]           |XtIsTopLevelShell[33]           |XtUnmanageChildren[33]      |
 19723	|-----------------------------+--------------------------------+----------------------------|
 19724	|XtCreateWindow[33]           |XtIsTransientShell[33]          |XtUnmapWidget[33]           |
 19725	|-----------------------------+--------------------------------+----------------------------|
 19726	|XtCvtColorToPixel[33]        |XtIsVendorShell[33]             |XtUnrealizeWidget[33]       |
 19727	|-----------------------------+--------------------------------+----------------------------|
 19728	|XtCvtIntToBool[33]           |XtIsWMShell[33]                 |XtUnregisterDrawable[33]    |
 19729	|-----------------------------+--------------------------------+----------------------------|
 19730	|XtCvtIntToBoolean[33]        |XtIsWidget[33]                  |XtVaAppCreateShell[33]      |
 19731	|-----------------------------+--------------------------------+----------------------------|
 19732	|XtCvtIntToColor[33]          |XtKeysymToKeycodeList[33]       |XtVaAppInitialize[33]       |
 19733	|-----------------------------+--------------------------------+----------------------------|
 19734	|XtCvtIntToFloat[33]          |XtLastEventProcessed[33]        |XtVaCreateArgsList[33]      |
 19735	|-----------------------------+--------------------------------+----------------------------|
 19736	|XtCvtIntToFont[33]           |XtLastTimestampProcessed[33]    |XtVaCreateManagedWidget[33] |
 19737	|-----------------------------+--------------------------------+----------------------------|
 19738	|XtCvtIntToPixel[33]          |XtMainLoop[33]                  |XtVaCreatePopupShell[33]    |
 19739	|-----------------------------+--------------------------------+----------------------------|
 19740	|XtCvtIntToPixmap[33]         |XtMakeGeometryRequest[33]       |XtVaCreateWidget[33]        |
 19741	|-----------------------------+--------------------------------+----------------------------|
 19742	|XtCvtIntToShort[33]          |XtMakeResizeRequest[33]         |XtVaGetApplicationResources |
 19743	|                             |                                |[33]                        |
 19744	|-----------------------------+--------------------------------+----------------------------|
 19745	|XtCvtIntToUnsignedChar[33]   |XtMalloc[33]                    |XtVaGetSubresources[33]     |
 19746	|-----------------------------+--------------------------------+----------------------------|
 19747	|XtCvtStringToAcceleratorTable|XtManageChild[33]               |XtVaGetSubvalues[33]        |
 19748	|[33]                         |                                |                            |
 19749	|-----------------------------+--------------------------------+----------------------------|
 19750	|XtCvtStringToAtom[33]        |XtManageChildren[33]            |XtVaGetValues[33]           |
 19751	|-----------------------------+--------------------------------+----------------------------|
 19752	|XtCvtStringToBool[33]        |XtMapWidget[33]                 |XtVaOpenApplication[33]     |
 19753	|-----------------------------+--------------------------------+----------------------------|
 19754	|XtCvtStringToBoolean[33]     |XtMenuPopupAction[33]           |XtVaSetSubvalues[33]        |
 19755	|-----------------------------+--------------------------------+----------------------------|
 19756	|XtCvtStringToCommandArgArray |XtMergeArgLists[33]             |XtVaSetValues[33]           |
 19757	|[33]                         |                                |                            |
 19758	|-----------------------------+--------------------------------+----------------------------|
 19759	|XtCvtStringToCursor[33]      |XtMoveWidget[33]                |XtWarning[33]               |
 19760	|-----------------------------+--------------------------------+----------------------------|
 19761	|XtCvtStringToDimension[33]   |XtName[33]                      |XtWarningMsg[33]            |
 19762	|-----------------------------+--------------------------------+----------------------------|
 19763	|XtCvtStringToDirectoryString |XtNameToWidget[33]              |XtWidgetToApplicationContext|
 19764	|[33]                         |                                |[33]                        |
 19765	|-----------------------------+--------------------------------+----------------------------|
 19766	|XtCvtStringToDisplay[33]     |XtNewString[33]                 |XtWindow[33]                |
 19767	|-----------------------------+--------------------------------+----------------------------|
 19768	|XtCvtStringToFile[33]        |XtNextEvent[33]                 |XtWindowOfObject[33]        |
 19769	|-----------------------------+--------------------------------+----------------------------|
 19770	|XtCvtStringToFloat[33]       |XtNoticeSignal[33]              |XtWindowToWidget[33]        |
 19771	|-----------------------------+--------------------------------+----------------------------|
 19772	|XtCvtStringToFont[33]        |XtOpenApplication[33]           |_XtCopyFromArg[32]          |
 19773	|-----------------------------+--------------------------------+----------------------------|
 19774	|XtCvtStringToFontSet[33]     |XtOpenDisplay[33]               |_XtInherit[32]              |
 19775	|-----------------------------+--------------------------------+----------------------------|
 19776	|XtCvtStringToFontStruct[33]  |XtOverrideTranslations[33]      |_XtIsSubclassOf[32]         |
 19777	|-----------------------------+--------------------------------+----------------------------|
 19778	|XtCvtStringToGravity[33]     |XtOwnSelection[33]              |                            |
 19779	+-------------------------------------------------------------------------------------------+
 19780	
 19781	Table A-3. libXt Data Interfaces
 19782	
 19783	+------------------------------------------------------------------------------+
 19784	|XtCXtToolkitError[33]      |objectClass[33]         |topLevelShellClassRec[33]|
 19785	|---------------------------+------------------------+-------------------------|
 19786	|XtShellStrings[33]         |objectClassRec[33]      |topLevelShellWidgetClass |
 19787	|                           |                        |[33]                     |
 19788	|---------------------------+------------------------+-------------------------|
 19789	|XtStrings[33]              |overrideShellClassRec   |transientShellClassRec   |
 19790	|                           |[33]                    |[33]                     |
 19791	|---------------------------+------------------------+-------------------------|
 19792	|_XtInheritTranslations[32] |overrideShellWidgetClass|transientShellWidgetClass|
 19793	|                           |[33]                    |[33]                     |
 19794	|---------------------------+------------------------+-------------------------|
 19795	|applicationShellWidgetClass|rectObjClass[33]        |widgetClass[33]          |
 19796	|[33]                       |                        |                         |
 19797	|---------------------------+------------------------+-------------------------|
 19798	|compositeClassRec[33]      |rectObjClassRec[33]     |widgetClassRec[33]       |
 19799	|---------------------------+------------------------+-------------------------|
 19800	|compositeWidgetClass[33]   |sessionShellClassRec[33]|wmShellClassRec[33]      |
 19801	|---------------------------+------------------------+-------------------------|
 19802	|constraintClassRec[33]     |sessionShellWidgetClass |wmShellWidgetClass[33]   |
 19803	|                           |[33]                    |                         |
 19804	|---------------------------+------------------------+-------------------------|
 19805	|constraintWidgetClass[33]  |shellClassRec[33]       |                         |
 19806	|---------------------------+------------------------+-------------------------|
 19807	|coreWidgetClass[33]        |shellWidgetClass[33]    |                         |
 19808	+------------------------------------------------------------------------------+
 19809	-------------------------------------------------------------------------------
 19810	
 19811	libm
 19812	
 19813	The behaviour of the interfaces in this library is specified by the following
 19814	Standards.
 19815	
 19816	ISO/IEC 9899: 1999, Programming Languages --C                                  
 19817	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 19818	(ISBN: 1-85912-181-0, C606)                                                    
 19819	
 19820	Table A-4. libm Function Interfaces
 19821	
 19822	+-----------------------------------------------------------------------------+
 19823	|acos(GLIBC_2.0)[12]   |csinhf(GLIBC_2.0)[11]       |llroundl(GLIBC_2.0)[11]  |
 19824	|----------------------+----------------------------+-------------------------|
 19825	|acosf(GLIBC_2.0)[11]  |csinhl(GLIBC_2.0)[11]       |log(GLIBC_2.0)[12]       |
 19826	|----------------------+----------------------------+-------------------------|
 19827	|acosh(GLIBC_2.0)[12]  |csinl(GLIBC_2.0)[11]        |log10(GLIBC_2.0)[12]     |
 19828	|----------------------+----------------------------+-------------------------|
 19829	|acoshf(GLIBC_2.0)[11] |csqrt(GLIBC_2.0)[11]        |log1p(GLIBC_2.0)[12]     |
 19830	|----------------------+----------------------------+-------------------------|
 19831	|acoshl(GLIBC_2.0)[11] |csqrtf(GLIBC_2.0)[11]       |logb(GLIBC_2.0)[12]      |
 19832	|----------------------+----------------------------+-------------------------|
 19833	|acosl(GLIBC_2.0)[11]  |csqrtl(GLIBC_2.0)[11]       |lrint(GLIBC_2.0)[11]     |
 19834	|----------------------+----------------------------+-------------------------|
 19835	|asin(GLIBC_2.0)[12]   |ctan(GLIBC_2.0)[11]         |lrintf(GLIBC_2.0)[11]    |
 19836	|----------------------+----------------------------+-------------------------|
 19837	|asinf(GLIBC_2.0)[11]  |ctanf(GLIBC_2.0)[11]        |lrintl(GLIBC_2.0)[11]    |
 19838	|----------------------+----------------------------+-------------------------|
 19839	|asinh(GLIBC_2.0)[12]  |ctanh(GLIBC_2.0)[11]        |lround(GLIBC_2.0)[11]    |
 19840	|----------------------+----------------------------+-------------------------|
 19841	|asinhf(GLIBC_2.0)[11] |ctanhf(GLIBC_2.0)[11]       |lroundf(GLIBC_2.0)[11]   |
 19842	|----------------------+----------------------------+-------------------------|
 19843	|asinhl(GLIBC_2.0)[11] |ctanhl(GLIBC_2.0)[11]       |lroundl(GLIBC_2.0)[11]   |
 19844	|----------------------+----------------------------+-------------------------|
 19845	|asinl(GLIBC_2.0)[11]  |ctanl(GLIBC_2.0)[11]        |matherr(GLIBC_2.0)[11]   |
 19846	|----------------------+----------------------------+-------------------------|
 19847	|atan(GLIBC_2.0)[12]   |dremf(GLIBC_2.0)[11]        |modf(GLIBC_2.0)[12]      |
 19848	|----------------------+----------------------------+-------------------------|
 19849	|atan2(GLIBC_2.0)[12]  |dreml(GLIBC_2.0)[11]        |modff(GLIBC_2.0)[11]     |
 19850	|----------------------+----------------------------+-------------------------|
 19851	|atan2f(GLIBC_2.0)[11] |erf(GLIBC_2.0)[12]          |modfl(GLIBC_2.0)[11]     |
 19852	|----------------------+----------------------------+-------------------------|
 19853	|atan2l(GLIBC_2.0)[11] |erfc(GLIBC_2.0)[12]         |nan(GLIBC_2.0)[11]       |
 19854	|----------------------+----------------------------+-------------------------|
 19855	|atanf(GLIBC_2.0)[11]  |erfcf(GLIBC_2.0)[11]        |nanf(GLIBC_2.0)[11]      |
 19856	|----------------------+----------------------------+-------------------------|
 19857	|atanh(GLIBC_2.0)[12]  |erfcl(GLIBC_2.0)[11]        |nanl(GLIBC_2.0)[11]      |
 19858	|----------------------+----------------------------+-------------------------|
 19859	|atanhf(GLIBC_2.0)[11] |erff(GLIBC_2.0)[11]         |nearbyint(GLIBC_2.0)[11] |
 19860	|----------------------+----------------------------+-------------------------|
 19861	|atanhl(GLIBC_2.0)[11] |erfl(GLIBC_2.0)[11]         |nearbyintf(GLIBC_2.0)[11]|
 19862	|----------------------+----------------------------+-------------------------|
 19863	|atanl(GLIBC_2.0)[11]  |exp(GLIBC_2.0)[12]          |nearbyintl(GLIBC_2.0)[11]|
 19864	|----------------------+----------------------------+-------------------------|
 19865	|cabs(GLIBC_2.1)[12]   |expm1(GLIBC_2.1)[12]        |nextafter(GLIBC_2.1)[12] |
 19866	|----------------------+----------------------------+-------------------------|
 19867	|cabsf(GLIBC_2.1)[11]  |fabs(GLIBC_2.1)[12]         |nextafterf(GLIBC_2.1)[11]|
 19868	|----------------------+----------------------------+-------------------------|
 19869	|cabsl(GLIBC_2.1)[11]  |fabsf(GLIBC_2.1)[11]        |nextafterl(GLIBC_2.1)[11]|
 19870	|----------------------+----------------------------+-------------------------|
 19871	|cacos(GLIBC_2.1)[11]  |fabsl(GLIBC_2.1)[11]        |nexttoward(GLIBC_2.1)[11]|
 19872	|----------------------+----------------------------+-------------------------|
 19873	|cacosf(GLIBC_2.1)[11] |fdim(GLIBC_2.1)[11]         |nexttowardf(GLIBC_2.1)   |
 19874	|                      |                            |[11]                     |
 19875	|----------------------+----------------------------+-------------------------|
 19876	|cacosh(GLIBC_2.1)[11] |fdimf(GLIBC_2.1)[11]        |nexttowardl(GLIBC_2.1)   |
 19877	|                      |                            |[11]                     |
 19878	|----------------------+----------------------------+-------------------------|
 19879	|cacoshf(GLIBC_2.1)[11]|fdiml(GLIBC_2.1)[11]        |pow(GLIBC_2.1)[12]       |
 19880	|----------------------+----------------------------+-------------------------|
 19881	|cacoshl(GLIBC_2.1)[11]|feclearexcept(GLIBC_2.1)[11]|pow10(GLIBC_2.1)[11]     |
 19882	|----------------------+----------------------------+-------------------------|
 19883	|cacosl(GLIBC_2.1)[11] |fegetenv(GLIBC_2.1)[11]     |pow10f(GLIBC_2.1)[11]    |
 19884	|----------------------+----------------------------+-------------------------|
 19885	|carg(GLIBC_2.1)[11]   |fegetexceptflag(GLIBC_2.1)  |pow10l(GLIBC_2.1)[11]    |
 19886	|                      |[11]                        |                         |
 19887	|----------------------+----------------------------+-------------------------|
 19888	|cargf(GLIBC_2.1)[11]  |fegetround(GLIBC_2.1)[11]   |powf(GLIBC_2.1)[11]      |
 19889	|----------------------+----------------------------+-------------------------|
 19890	|cargl(GLIBC_2.1)[11]  |feholdexcept(GLIBC_2.1)[11] |powl(GLIBC_2.1)[11]      |
 19891	|----------------------+----------------------------+-------------------------|
 19892	|casin(GLIBC_2.1)[11]  |feraiseexcept(GLIBC_2.1)[11]|remainder(GLIBC_2.1)[12] |
 19893	|----------------------+----------------------------+-------------------------|
 19894	|casinf(GLIBC_2.1)[11] |fesetenv(GLIBC_2.1)[11]     |remainderf(GLIBC_2.1)[11]|
 19895	|----------------------+----------------------------+-------------------------|
 19896	|casinh(GLIBC_2.1)[11] |fesetexceptflag(GLIBC_2.1)  |remainderl(GLIBC_2.1)[11]|
 19897	|                      |[11]                        |                         |
 19898	|----------------------+----------------------------+-------------------------|
 19899	|casinhf(GLIBC_2.1)[11]|fesetround(GLIBC_2.1)[11]   |remquo(GLIBC_2.1)[11]    |
 19900	|----------------------+----------------------------+-------------------------|
 19901	|casinhl(GLIBC_2.1)[11]|fetestexcept(GLIBC_2.1)[11] |remquof(GLIBC_2.1)[11]   |
 19902	|----------------------+----------------------------+-------------------------|
 19903	|casinl(GLIBC_2.1)[11] |feupdateenv(GLIBC_2.1)[11]  |remquol(GLIBC_2.1)[11]   |
 19904	|----------------------+----------------------------+-------------------------|
 19905	|catan(GLIBC_2.1)[11]  |finite(GLIBC_2.1)[12]       |rint(GLIBC_2.1)[12]      |
 19906	|----------------------+----------------------------+-------------------------|
 19907	|catanf(GLIBC_2.1)[11] |finitef(GLIBC_2.1)[11]      |rintf(GLIBC_2.1)[11]     |
 19908	|----------------------+----------------------------+-------------------------|
 19909	|catanh(GLIBC_2.1)[11] |finitel(GLIBC_2.1)[11]      |rintl(GLIBC_2.1)[11]     |
 19910	|----------------------+----------------------------+-------------------------|
 19911	|catanhf(GLIBC_2.1)[11]|floor(GLIBC_2.1)[12]        |round(GLIBC_2.1)[11]     |
 19912	|----------------------+----------------------------+-------------------------|
 19913	|catanhl(GLIBC_2.1)[11]|floorf(GLIBC_2.1)[11]       |roundf(GLIBC_2.1)[11]    |
 19914	|----------------------+----------------------------+-------------------------|
 19915	|catanl(GLIBC_2.1)[11] |floorl(GLIBC_2.1)[11]       |roundl(GLIBC_2.1)[11]    |
 19916	|----------------------+----------------------------+-------------------------|
 19917	|cbrt(GLIBC_2.0)[12]   |fma(GLIBC_2.0)[11]          |scalb(GLIBC_2.0)[12]     |
 19918	|----------------------+----------------------------+-------------------------|
 19919	|cbrtf(GLIBC_2.0)[11]  |fmaf(GLIBC_2.0)[11]         |scalbf(GLIBC_2.0)[11]    |
 19920	|----------------------+----------------------------+-------------------------|
 19921	|cbrtl(GLIBC_2.0)[11]  |fmal(GLIBC_2.0)[11]         |scalbl(GLIBC_2.0)[11]    |
 19922	|----------------------+----------------------------+-------------------------|
 19923	|ccos(GLIBC_2.1)[11]   |fmax(GLIBC_2.1)[11]         |scalbln(GLIBC_2.1)[11]   |
 19924	|----------------------+----------------------------+-------------------------|
 19925	|ccosf(GLIBC_2.1)[11]  |fmaxf(GLIBC_2.1)[11]        |scalblnf(GLIBC_2.1)[11]  |
 19926	|----------------------+----------------------------+-------------------------|
 19927	|ccosh(GLIBC_2.1)[11]  |fmaxl(GLIBC_2.1)[11]        |scalblnl(GLIBC_2.1)[11]  |
 19928	|----------------------+----------------------------+-------------------------|
 19929	|ccoshf(GLIBC_2.1)[11] |fmin(GLIBC_2.1)[11]         |scalbn(GLIBC_2.1)[11]    |
 19930	|----------------------+----------------------------+-------------------------|
 19931	|ccoshl(GLIBC_2.1)[11] |fminf(GLIBC_2.1)[11]        |scalbnf(GLIBC_2.1)[11]   |
 19932	|----------------------+----------------------------+-------------------------|
 19933	|ccosl(GLIBC_2.1)[11]  |fminl(GLIBC_2.1)[11]        |scalbnl(GLIBC_2.1)[11]   |
 19934	|----------------------+----------------------------+-------------------------|
 19935	|ceil(GLIBC_2.0)[12]   |fmod(GLIBC_2.0)[12]         |significand(GLIBC_2.0)   |
 19936	|                      |                            |[11]                     |
 19937	|----------------------+----------------------------+-------------------------|
 19938	|ceilf(GLIBC_2.0)[11]  |fmodf(GLIBC_2.0)[11]        |significandf(GLIBC_2.0)  |
 19939	|                      |                            |[11]                     |
 19940	|----------------------+----------------------------+-------------------------|
 19941	|ceill(GLIBC_2.0)[11]  |fmodl(GLIBC_2.0)[11]        |significandl(GLIBC_2.0)  |
 19942	|                      |                            |[11]                     |
 19943	|----------------------+----------------------------+-------------------------|
 19944	|cexp(GLIBC_2.1)[11]   |frexp(GLIBC_2.1)[12]        |sin(GLIBC_2.1)[12]       |
 19945	|----------------------+----------------------------+-------------------------|
 19946	|cexpf(GLIBC_2.1)[11]  |frexpf(GLIBC_2.1)[11]       |sincos(GLIBC_2.1)[11]    |
 19947	|----------------------+----------------------------+-------------------------|
 19948	|cexpl(GLIBC_2.1)[11]  |frexpl(GLIBC_2.1)[11]       |sincosf(GLIBC_2.1)[11]   |
 19949	|----------------------+----------------------------+-------------------------|
 19950	|cimag(GLIBC_2.1)[11]  |gamma(GLIBC_2.1)[12]        |sincosl(GLIBC_2.1)[11]   |
 19951	|----------------------+----------------------------+-------------------------|
 19952	|cimagf(GLIBC_2.1)[11] |gammaf(GLIBC_2.1)[11]       |sinf(GLIBC_2.1)[11]      |
 19953	|----------------------+----------------------------+-------------------------|
 19954	|cimagl(GLIBC_2.1)[11] |gammal(GLIBC_2.1)[11]       |sinh(GLIBC_2.1)[12]      |
 19955	|----------------------+----------------------------+-------------------------|
 19956	|clog(GLIBC_2.1)[11]   |hypot(GLIBC_2.1)[12]        |sinhf(GLIBC_2.1)[11]     |
 19957	|----------------------+----------------------------+-------------------------|
 19958	|clog10(GLIBC_2.1)[11] |hypotf(GLIBC_2.1)[11]       |sinhl(GLIBC_2.1)[11]     |
 19959	|----------------------+----------------------------+-------------------------|
 19960	|clog10f(GLIBC_2.1)[11]|hypotl(GLIBC_2.1)[11]       |sinl(GLIBC_2.1)[11]      |
 19961	|----------------------+----------------------------+-------------------------|
 19962	|clog10l(GLIBC_2.1)[11]|ilogb(GLIBC_2.1)[12]        |sqrt(GLIBC_2.1)[12]      |
 19963	|----------------------+----------------------------+-------------------------|
 19964	|clogf(GLIBC_2.1)[11]  |ilogbf(GLIBC_2.1)[11]       |sqrtf(GLIBC_2.1)[11]     |
 19965	|----------------------+----------------------------+-------------------------|
 19966	|clogl(GLIBC_2.1)[11]  |ilogbl(GLIBC_2.1)[11]       |sqrtl(GLIBC_2.1)[11]     |
 19967	|----------------------+----------------------------+-------------------------|
 19968	|conj(GLIBC_2.1)[11]   |j0(GLIBC_2.1)[12]           |tan(GLIBC_2.1)[12]       |
 19969	|----------------------+----------------------------+-------------------------|
 19970	|conjf(GLIBC_2.1)[11]  |j0f(GLIBC_2.1)[11]          |tanf(GLIBC_2.1)[11]      |
 19971	|----------------------+----------------------------+-------------------------|
 19972	|conjl(GLIBC_2.1)[11]  |j0l(GLIBC_2.1)[11]          |tanh(GLIBC_2.1)[12]      |
 19973	|----------------------+----------------------------+-------------------------|
 19974	|copysign(GLIBC_2.0)   |j1(GLIBC_2.0)[12]           |tanhf(GLIBC_2.0)[11]     |
 19975	|[11]                  |                            |                         |
 19976	|----------------------+----------------------------+-------------------------|
 19977	|copysignf(GLIBC_2.0)  |j1f(GLIBC_2.0)[11]          |tanhl(GLIBC_2.0)[11]     |
 19978	|[11]                  |                            |                         |
 19979	|----------------------+----------------------------+-------------------------|
 19980	|copysignl(GLIBC_2.0)  |j1l(GLIBC_2.0)[11]          |tanl(GLIBC_2.0)[11]      |
 19981	|[11]                  |                            |                         |
 19982	|----------------------+----------------------------+-------------------------|
 19983	|cos(GLIBC_2.0)[12]    |jn(GLIBC_2.0)[12]           |tgamma(GLIBC_2.0)[11]    |
 19984	|----------------------+----------------------------+-------------------------|
 19985	|cosf(GLIBC_2.0)[11]   |jnf(GLIBC_2.0)[11]          |tgammaf(GLIBC_2.0)[11]   |
 19986	|----------------------+----------------------------+-------------------------|
 19987	|cosh(GLIBC_2.0)[12]   |jnl(GLIBC_2.0)[11]          |tgammal(GLIBC_2.0)[11]   |
 19988	|----------------------+----------------------------+-------------------------|
 19989	|coshf(GLIBC_2.0)[11]  |ldexp(GLIBC_2.0)[12]        |trunc(GLIBC_2.0)[11]     |
 19990	|----------------------+----------------------------+-------------------------|
 19991	|coshl(GLIBC_2.0)[11]  |ldexpf(GLIBC_2.0)[11]       |truncf(GLIBC_2.0)[11]    |
 19992	|----------------------+----------------------------+-------------------------|
 19993	|cosl(GLIBC_2.0)[11]   |ldexpl(GLIBC_2.0)[11]       |truncl(GLIBC_2.0)[11]    |
 19994	|----------------------+----------------------------+-------------------------|
 19995	|cpow(GLIBC_2.1)[11]   |lgamma(GLIBC_2.1)[12]       |y0(GLIBC_2.1)[12]        |
 19996	|----------------------+----------------------------+-------------------------|
 19997	|cpowf(GLIBC_2.1)[11]  |lgamma_r(GLIBC_2.1)[11]     |y0f(GLIBC_2.1)[11]       |
 19998	|----------------------+----------------------------+-------------------------|
 19999	|cpowl(GLIBC_2.1)[11]  |lgammaf(GLIBC_2.1)[11]      |y0l(GLIBC_2.1)[11]       |
 20000	|----------------------+----------------------------+-------------------------|
 20001	|cproj(GLIBC_2.1)[11]  |lgammaf_r(GLIBC_2.1)[11]    |y1(GLIBC_2.1)[12]        |
 20002	|----------------------+----------------------------+-------------------------|
 20003	|cprojf(GLIBC_2.1)[11] |lgammal(GLIBC_2.1)[11]      |y1f(GLIBC_2.1)[11]       |
 20004	|----------------------+----------------------------+-------------------------|
 20005	|cprojl(GLIBC_2.1)[11] |lgammal_r(GLIBC_2.1)[11]    |y1l(GLIBC_2.1)[11]       |
 20006	|----------------------+----------------------------+-------------------------|
 20007	|creal(GLIBC_2.1)[11]  |llrint(GLIBC_2.1)[11]       |yn(GLIBC_2.1)[12]        |
 20008	|----------------------+----------------------------+-------------------------|
 20009	|creall(GLIBC_2.1)[11] |llrintf(GLIBC_2.1)[11]      |ynf(GLIBC_2.1)[11]       |
 20010	|----------------------+----------------------------+-------------------------|
 20011	|csin(GLIBC_2.1)[11]   |llrintl(GLIBC_2.1)[11]      |ynl(GLIBC_2.1)[11]       |
 20012	|----------------------+----------------------------+-------------------------|
 20013	|csinf(GLIBC_2.1)[11]  |llround(GLIBC_2.1)[11]      |                         |
 20014	|----------------------+----------------------------+-------------------------|
 20015	|csinh(GLIBC_2.1)[11]  |llroundf(GLIBC_2.1)[11]     |                         |
 20016	+-----------------------------------------------------------------------------+
 20017	
 20018	Table A-5. libm Data Interfaces
 20019	
 20020	+----------------+
 20021	|signgam[12] | | |
 20022	+----------------+
 20023	-------------------------------------------------------------------------------
 20024	
 20025	libGL
 20026	
 20027	The behaviour of the interfaces in this library is specified by the following
 20028	Standards.
 20029	
 20030	OpenGL® Application Binary Interface for Linux
 20031	
 20032	Table A-6. libGL Function Interfaces
 20033	
 20034	+------------------------------------------------------------------------------+
 20035	|glAccum[34]                |glGetSeparableFilter[34]|glRasterPos4iv[34]       |
 20036	|---------------------------+------------------------+-------------------------|
 20037	|glActiveTextureARB[34]     |glGetString[34]         |glRasterPos4s[34]        |
 20038	|---------------------------+------------------------+-------------------------|
 20039	|glAlphaFunc[34]            |glGetTexEnvfv[34]       |glRasterPos4sv[34]       |
 20040	|---------------------------+------------------------+-------------------------|
 20041	|glAreTexturesResident[34]  |glGetTexEnviv[34]       |glReadBuffer[34]         |
 20042	|---------------------------+------------------------+-------------------------|
 20043	|glArrayElement[34]         |glGetTexGendv[34]       |glReadPixels[34]         |
 20044	|---------------------------+------------------------+-------------------------|
 20045	|glBegin[34]                |glGetTexGenfv[34]       |glRectd[34]              |
 20046	|---------------------------+------------------------+-------------------------|
 20047	|glBindTexture[34]          |glGetTexGeniv[34]       |glRectdv[34]             |
 20048	|---------------------------+------------------------+-------------------------|
 20049	|glBitmap[34]               |glGetTexImage[34]       |glRectf[34]              |
 20050	|---------------------------+------------------------+-------------------------|
 20051	|glBlendColor[34]           |glGetTexLevelParameterfv|glRectfv[34]             |
 20052	|                           |[34]                    |                         |
 20053	|---------------------------+------------------------+-------------------------|
 20054	|glBlendColorEXT[34]        |glGetTexLevelParameteriv|glRecti[34]              |
 20055	|                           |[34]                    |                         |
 20056	|---------------------------+------------------------+-------------------------|
 20057	|glBlendEquation[34]        |glGetTexParameterfv[34] |glRectiv[34]             |
 20058	|---------------------------+------------------------+-------------------------|
 20059	|glBlendEquationEXT[34]     |glGetTexParameteriv[34] |glRects[34]              |
 20060	|---------------------------+------------------------+-------------------------|
 20061	|glBlendFunc[34]            |glHint[34]              |glRectsv[34]             |
 20062	|---------------------------+------------------------+-------------------------|
 20063	|glCallList[34]             |glHistogram[34]         |glRenderMode[34]         |
 20064	|---------------------------+------------------------+-------------------------|
 20065	|glCallLists[34]            |glIndexMask[34]         |glResetHistogram[34]     |
 20066	|---------------------------+------------------------+-------------------------|
 20067	|glClear[34]                |glIndexPointer[34]      |glResetMinmax[34]        |
 20068	|---------------------------+------------------------+-------------------------|
 20069	|glClearAccum[34]           |glIndexd[34]            |glRotated[34]            |
 20070	|---------------------------+------------------------+-------------------------|
 20071	|glClearColor[34]           |glIndexdv[34]           |glRotatef[34]            |
 20072	|---------------------------+------------------------+-------------------------|
 20073	|glClearDepth[34]           |glIndexf[34]            |glScaled[34]             |
 20074	|---------------------------+------------------------+-------------------------|
 20075	|glClearIndex[34]           |glIndexfv[34]           |glScalef[34]             |
 20076	|---------------------------+------------------------+-------------------------|
 20077	|glClearStencil[34]         |glIndexi[34]            |glScissor[34]            |
 20078	|---------------------------+------------------------+-------------------------|
 20079	|glClientActiveTextureARB   |glIndexiv[34]           |glSelectBuffer[34]       |
 20080	|[34]                       |                        |                         |
 20081	|---------------------------+------------------------+-------------------------|
 20082	|glClipPlane[34]            |glIndexs[34]            |glSeparableFilter2D[34]  |
 20083	|---------------------------+------------------------+-------------------------|
 20084	|glColor3b[34]              |glIndexsv[34]           |glShadeModel[34]         |
 20085	|---------------------------+------------------------+-------------------------|
 20086	|glColor3bv[34]             |glIndexub[34]           |glStencilFunc[34]        |
 20087	|---------------------------+------------------------+-------------------------|
 20088	|glColor3d[34]              |glIndexubv[34]          |glStencilMask[34]        |
 20089	|---------------------------+------------------------+-------------------------|
 20090	|glColor3dv[34]             |glInitNames[34]         |glStencilOp[34]          |
 20091	|---------------------------+------------------------+-------------------------|
 20092	|glColor3f[34]              |glInterleavedArrays[34] |glTexCoord1d[34]         |
 20093	|---------------------------+------------------------+-------------------------|
 20094	|glColor3fv[34]             |glIsEnabled[34]         |glTexCoord1dv[34]        |
 20095	|---------------------------+------------------------+-------------------------|
 20096	|glColor3i[34]              |glIsList[34]            |glTexCoord1f[34]         |
 20097	|---------------------------+------------------------+-------------------------|
 20098	|glColor3iv[34]             |glIsTexture[34]         |glTexCoord1fv[34]        |
 20099	|---------------------------+------------------------+-------------------------|
 20100	|glColor3s[34]              |glLightModelf[34]       |glTexCoord1i[34]         |
 20101	|---------------------------+------------------------+-------------------------|
 20102	|glColor3sv[34]             |glLightModelfv[34]      |glTexCoord1iv[34]        |
 20103	|---------------------------+------------------------+-------------------------|
 20104	|glColor3ub[34]             |glLightModeli[34]       |glTexCoord1s[34]         |
 20105	|---------------------------+------------------------+-------------------------|
 20106	|glColor3ubv[34]            |glLightModeliv[34]      |glTexCoord1sv[34]        |
 20107	|---------------------------+------------------------+-------------------------|
 20108	|glColor3ui[34]             |glLightf[34]            |glTexCoord2d[34]         |
 20109	|---------------------------+------------------------+-------------------------|
 20110	|glColor3uiv[34]            |glLightfv[34]           |glTexCoord2dv[34]        |
 20111	|---------------------------+------------------------+-------------------------|
 20112	|glColor3us[34]             |glLighti[34]            |glTexCoord2f[34]         |
 20113	|---------------------------+------------------------+-------------------------|
 20114	|glColor3usv[34]            |glLightiv[34]           |glTexCoord2fv[34]        |
 20115	|---------------------------+------------------------+-------------------------|
 20116	|glColor4b[34]              |glLineStipple[34]       |glTexCoord2i[34]         |
 20117	|---------------------------+------------------------+-------------------------|
 20118	|glColor4bv[34]             |glLineWidth[34]         |glTexCoord2iv[34]        |
 20119	|---------------------------+------------------------+-------------------------|
 20120	|glColor4d[34]              |glListBase[34]          |glTexCoord2s[34]         |
 20121	|---------------------------+------------------------+-------------------------|
 20122	|glColor4dv[34]             |glLoadIdentity[34]      |glTexCoord2sv[34]        |
 20123	|---------------------------+------------------------+-------------------------|
 20124	|glColor4f[34]              |glLoadMatrixd[34]       |glTexCoord3d[34]         |
 20125	|---------------------------+------------------------+-------------------------|
 20126	|glColor4fv[34]             |glLoadMatrixf[34]       |glTexCoord3dv[34]        |
 20127	|---------------------------+------------------------+-------------------------|
 20128	|glColor4i[34]              |glLoadName[34]          |glTexCoord3f[34]         |
 20129	|---------------------------+------------------------+-------------------------|
 20130	|glColor4iv[34]             |glLogicOp[34]           |glTexCoord3fv[34]        |
 20131	|---------------------------+------------------------+-------------------------|
 20132	|glColor4s[34]              |glMap1d[34]             |glTexCoord3i[34]         |
 20133	|---------------------------+------------------------+-------------------------|
 20134	|glColor4sv[34]             |glMap1f[34]             |glTexCoord3iv[34]        |
 20135	|---------------------------+------------------------+-------------------------|
 20136	|glColor4ub[34]             |glMap2d[34]             |glTexCoord3s[34]         |
 20137	|---------------------------+------------------------+-------------------------|
 20138	|glColor4ubv[34]            |glMap2f[34]             |glTexCoord3sv[34]        |
 20139	|---------------------------+------------------------+-------------------------|
 20140	|glColor4ui[34]             |glMapGrid1d[34]         |glTexCoord4d[34]         |
 20141	|---------------------------+------------------------+-------------------------|
 20142	|glColor4uiv[34]            |glMapGrid1f[34]         |glTexCoord4dv[34]        |
 20143	|---------------------------+------------------------+-------------------------|
 20144	|glColor4us[34]             |glMapGrid2d[34]         |glTexCoord4f[34]         |
 20145	|---------------------------+------------------------+-------------------------|
 20146	|glColor4usv[34]            |glMapGrid2f[34]         |glTexCoord4fv[34]        |
 20147	|---------------------------+------------------------+-------------------------|
 20148	|glColorMask[34]            |glMaterialf[34]         |glTexCoord4i[34]         |
 20149	|---------------------------+------------------------+-------------------------|
 20150	|glColorMaterial[34]        |glMaterialfv[34]        |glTexCoord4iv[34]        |
 20151	|---------------------------+------------------------+-------------------------|
 20152	|glColorPointer[34]         |glMateriali[34]         |glTexCoord4s[34]         |
 20153	|---------------------------+------------------------+-------------------------|
 20154	|glColorSubTable[34]        |glMaterialiv[34]        |glTexCoord4sv[34]        |
 20155	|---------------------------+------------------------+-------------------------|
 20156	|glColorTable[34]           |glMatrixMode[34]        |glTexCoordPointer[34]    |
 20157	|---------------------------+------------------------+-------------------------|
 20158	|glColorTableParameterfv[34]|glMinmax[34]            |glTexEnvf[34]            |
 20159	|---------------------------+------------------------+-------------------------|
 20160	|glColorTableParameteriv[34]|glMultMatrixd[34]       |glTexEnvfv[34]           |
 20161	|---------------------------+------------------------+-------------------------|
 20162	|glConvolutionFilter1D[34]  |glMultMatrixf[34]       |glTexEnvi[34]            |
 20163	|---------------------------+------------------------+-------------------------|
 20164	|glConvolutionFilter2D[34]  |glMultiTexCoord1dARB[34]|glTexEnviv[34]           |
 20165	|---------------------------+------------------------+-------------------------|
 20166	|glConvolutionParameterf[34]|glMultiTexCoord1dvARB   |glTexGend[34]            |
 20167	|                           |[34]                    |                         |
 20168	|---------------------------+------------------------+-------------------------|
 20169	|glConvolutionParameterfv   |glMultiTexCoord1fARB[34]|glTexGendv[34]           |
 20170	|[34]                       |                        |                         |
 20171	|---------------------------+------------------------+-------------------------|
 20172	|glConvolutionParameteri[34]|glMultiTexCoord1fvARB   |glTexGenf[34]            |
 20173	|                           |[34]                    |                         |
 20174	|---------------------------+------------------------+-------------------------|
 20175	|glConvolutionParameteriv   |glMultiTexCoord1iARB[34]|glTexGenfv[34]           |
 20176	|[34]                       |                        |                         |
 20177	|---------------------------+------------------------+-------------------------|
 20178	|glCopyColorSubTable[34]    |glMultiTexCoord1ivARB   |glTexGeni[34]            |
 20179	|                           |[34]                    |                         |
 20180	|---------------------------+------------------------+-------------------------|
 20181	|glCopyColorTable[34]       |glMultiTexCoord1sARB[34]|glTexGeniv[34]           |
 20182	|---------------------------+------------------------+-------------------------|
 20183	|glCopyConvolutionFilter1D  |glMultiTexCoord1svARB   |glTexImage1D[34]         |
 20184	|[34]                       |[34]                    |                         |
 20185	|---------------------------+------------------------+-------------------------|
 20186	|glCopyConvolutionFilter2D  |glMultiTexCoord2dARB[34]|glTexImage2D[34]         |
 20187	|[34]                       |                        |                         |
 20188	|---------------------------+------------------------+-------------------------|
 20189	|glCopyPixels[34]           |glMultiTexCoord2dvARB   |glTexImage3D[34]         |
 20190	|                           |[34]                    |                         |
 20191	|---------------------------+------------------------+-------------------------|
 20192	|glCopyTexImage1D[34]       |glMultiTexCoord2fARB[34]|glTexParameterf[34]      |
 20193	|---------------------------+------------------------+-------------------------|
 20194	|glCopyTexImage2D[34]       |glMultiTexCoord2fvARB   |glTexParameterfv[34]     |
 20195	|                           |[34]                    |                         |
 20196	|---------------------------+------------------------+-------------------------|
 20197	|glCopyTexSubImage1D[34]    |glMultiTexCoord2iARB[34]|glTexParameteri[34]      |
 20198	|---------------------------+------------------------+-------------------------|
 20199	|glCopyTexSubImage2D[34]    |glMultiTexCoord2ivARB   |glTexParameteriv[34]     |
 20200	|                           |[34]                    |                         |
 20201	|---------------------------+------------------------+-------------------------|
 20202	|glCopyTexSubImage3D[34]    |glMultiTexCoord2sARB[34]|glTexSubImage1D[34]      |
 20203	|---------------------------+------------------------+-------------------------|
 20204	|glCullFace[34]             |glMultiTexCoord2svARB   |glTexSubImage2D[34]      |
 20205	|                           |[34]                    |                         |
 20206	|---------------------------+------------------------+-------------------------|
 20207	|glDeleteLists[34]          |glMultiTexCoord3dARB[34]|glTexSubImage3D[34]      |
 20208	|---------------------------+------------------------+-------------------------|
 20209	|glDeleteTextures[34]       |glMultiTexCoord3dvARB   |glTranslated[34]         |
 20210	|                           |[34]                    |                         |
 20211	|---------------------------+------------------------+-------------------------|
 20212	|glDepthFunc[34]            |glMultiTexCoord3fARB[34]|glTranslatef[34]         |
 20213	|---------------------------+------------------------+-------------------------|
 20214	|glDepthMask[34]            |glMultiTexCoord3fvARB   |glVertex2d[34]           |
 20215	|                           |[34]                    |                         |
 20216	|---------------------------+------------------------+-------------------------|
 20217	|glDepthRange[34]           |glMultiTexCoord3iARB[34]|glVertex2dv[34]          |
 20218	|---------------------------+------------------------+-------------------------|
 20219	|glDisable[34]              |glMultiTexCoord3ivARB   |glVertex2f[34]           |
 20220	|                           |[34]                    |                         |
 20221	|---------------------------+------------------------+-------------------------|
 20222	|glDisableClientState[34]   |glMultiTexCoord3sARB[34]|glVertex2fv[34]          |
 20223	|---------------------------+------------------------+-------------------------|
 20224	|glDrawArrays[34]           |glMultiTexCoord3svARB   |glVertex2i[34]           |
 20225	|                           |[34]                    |                         |
 20226	|---------------------------+------------------------+-------------------------|
 20227	|glDrawBuffer[34]           |glMultiTexCoord4dARB[34]|glVertex2iv[34]          |
 20228	|---------------------------+------------------------+-------------------------|
 20229	|glDrawElements[34]         |glMultiTexCoord4dvARB   |glVertex2s[34]           |
 20230	|                           |[34]                    |                         |
 20231	|---------------------------+------------------------+-------------------------|
 20232	|glDrawPixels[34]           |glMultiTexCoord4fARB[34]|glVertex2sv[34]          |
 20233	|---------------------------+------------------------+-------------------------|
 20234	|glDrawRangeElements[34]    |glMultiTexCoord4fvARB   |glVertex3d[34]           |
 20235	|                           |[34]                    |                         |
 20236	|---------------------------+------------------------+-------------------------|
 20237	|glEdgeFlag[34]             |glMultiTexCoord4iARB[34]|glVertex3dv[34]          |
 20238	|---------------------------+------------------------+-------------------------|
 20239	|glEdgeFlagPointer[34]      |glMultiTexCoord4ivARB   |glVertex3f[34]           |
 20240	|                           |[34]                    |                         |
 20241	|---------------------------+------------------------+-------------------------|
 20242	|glEdgeFlagv[34]            |glMultiTexCoord4sARB[34]|glVertex3fv[34]          |
 20243	|---------------------------+------------------------+-------------------------|
 20244	|glEnable[34]               |glMultiTexCoord4svARB   |glVertex3i[34]           |
 20245	|                           |[34]                    |                         |
 20246	|---------------------------+------------------------+-------------------------|
 20247	|glEnableClientState[34]    |glNewList[34]           |glVertex3iv[34]          |
 20248	|---------------------------+------------------------+-------------------------|
 20249	|glEnd[34]                  |glNormal3b[34]          |glVertex3s[34]           |
 20250	|---------------------------+------------------------+-------------------------|
 20251	|glEndList[34]              |glNormal3bv[34]         |glVertex3sv[34]          |
 20252	|---------------------------+------------------------+-------------------------|
 20253	|glEvalCoord1d[34]          |glNormal3d[34]          |glVertex4d[34]           |
 20254	|---------------------------+------------------------+-------------------------|
 20255	|glEvalCoord1dv[34]         |glNormal3dv[34]         |glVertex4dv[34]          |
 20256	|---------------------------+------------------------+-------------------------|
 20257	|glEvalCoord1f[34]          |glNormal3f[34]          |glVertex4f[34]           |
 20258	|---------------------------+------------------------+-------------------------|
 20259	|glEvalCoord1fv[34]         |glNormal3fv[34]         |glVertex4fv[34]          |
 20260	|---------------------------+------------------------+-------------------------|
 20261	|glEvalCoord2d[34]          |glNormal3i[34]          |glVertex4i[34]           |
 20262	|---------------------------+------------------------+-------------------------|
 20263	|glEvalCoord2dv[34]         |glNormal3iv[34]         |glVertex4iv[34]          |
 20264	|---------------------------+------------------------+-------------------------|
 20265	|glEvalCoord2f[34]          |glNormal3s[34]          |glVertex4s[34]           |
 20266	|---------------------------+------------------------+-------------------------|
 20267	|glEvalCoord2fv[34]         |glNormal3sv[34]         |glVertex4sv[34]          |
 20268	|---------------------------+------------------------+-------------------------|
 20269	|glEvalMesh1[34]            |glNormalPointer[34]     |glVertexPointer[34]      |
 20270	|---------------------------+------------------------+-------------------------|
 20271	|glEvalMesh2[34]            |glOrtho[34]             |glViewport[34]           |
 20272	|---------------------------+------------------------+-------------------------|
 20273	|glEvalPoint1[34]           |glPassThrough[34]       |glXChooseFBConfig[34]    |
 20274	|---------------------------+------------------------+-------------------------|
 20275	|glEvalPoint2[34]           |glPixelMapfv[34]        |glXChooseVisual[34]      |
 20276	|---------------------------+------------------------+-------------------------|
 20277	|glFeedbackBuffer[34]       |glPixelMapuiv[34]       |glXCopyContext[34]       |
 20278	|---------------------------+------------------------+-------------------------|
 20279	|glFinish[34]               |glPixelMapusv[34]       |glXCreateContext[34]     |
 20280	|---------------------------+------------------------+-------------------------|
 20281	|glFlush[34]                |glPixelStoref[34]       |glXCreateGLXPixmap[34]   |
 20282	|---------------------------+------------------------+-------------------------|
 20283	|glFogf[34]                 |glPixelStorei[34]       |glXCreateNewContext[34]  |
 20284	|---------------------------+------------------------+-------------------------|
 20285	|glFogfv[34]                |glPixelTransferf[34]    |glXCreatePbuffer[34]     |
 20286	|---------------------------+------------------------+-------------------------|
 20287	|glFogi[34]                 |glPixelTransferi[34]    |glXCreatePixmap[34]      |
 20288	|---------------------------+------------------------+-------------------------|
 20289	|glFogiv[34]                |glPixelZoom[34]         |glXCreateWindow[34]      |
 20290	|---------------------------+------------------------+-------------------------|
 20291	|glFrontFace[34]            |glPointSize[34]         |glXDestroyContext[34]    |
 20292	|---------------------------+------------------------+-------------------------|
 20293	|glFrustum[34]              |glPolygonMode[34]       |glXDestroyGLXPixmap[34]  |
 20294	|---------------------------+------------------------+-------------------------|
 20295	|glGenLists[34]             |glPolygonOffset[34]     |glXDestroyPbuffer[34]    |
 20296	|---------------------------+------------------------+-------------------------|
 20297	|glGenTextures[34]          |glPolygonStipple[34]    |glXDestroyPixmap[34]     |
 20298	|---------------------------+------------------------+-------------------------|
 20299	|glGetBooleanv[34]          |glPopAttrib[34]         |glXDestroyWindow[34]     |
 20300	|---------------------------+------------------------+-------------------------|
 20301	|glGetClipPlane[34]         |glPopClientAttrib[34]   |glXFreeContextEXT[34]    |
 20302	|---------------------------+------------------------+-------------------------|
 20303	|glGetColorTable[34]        |glPopMatrix[34]         |glXGetClientString[34]   |
 20304	|---------------------------+------------------------+-------------------------|
 20305	|glGetColorTableParameterfv |glPopName[34]           |glXGetConfig[34]         |
 20306	|[34]                       |                        |                         |
 20307	|---------------------------+------------------------+-------------------------|
 20308	|glGetColorTableParameteriv |glPrioritizeTextures[34]|glXGetContextIDEXT[34]   |
 20309	|[34]                       |                        |                         |
 20310	|---------------------------+------------------------+-------------------------|
 20311	|glGetConvolutionFilter[34] |glPushAttrib[34]        |glXGetCurrentContext[34] |
 20312	|---------------------------+------------------------+-------------------------|
 20313	|glGetConvolutionParameterfv|glPushClientAttrib[34]  |glXGetCurrentDisplay[34] |
 20314	|[34]                       |                        |                         |
 20315	|---------------------------+------------------------+-------------------------|
 20316	|glGetConvolutionParameteriv|glPushMatrix[34]        |glXGetCurrentDrawable[34]|
 20317	|[34]                       |                        |                         |
 20318	|---------------------------+------------------------+-------------------------|
 20319	|glGetDoublev[34]           |glPushName[34]          |glXGetCurrentReadDrawable|
 20320	|                           |                        |[34]                     |
 20321	|---------------------------+------------------------+-------------------------|
 20322	|glGetError[34]             |glRasterPos2d[34]       |glXGetFBConfigAttrib[34] |
 20323	|---------------------------+------------------------+-------------------------|
 20324	|glGetFloatv[34]            |glRasterPos2dv[34]      |glXGetSelectedEvent[34]  |
 20325	|---------------------------+------------------------+-------------------------|
 20326	|glGetHistogram[34]         |glRasterPos2f[34]       |glXGetVisualFromFBConfig |
 20327	|                           |                        |[34]                     |
 20328	|---------------------------+------------------------+-------------------------|
 20329	|glGetHistogramParameterfv  |glRasterPos2fv[34]      |glXImportContextEXT[34]  |
 20330	|[34]                       |                        |                         |
 20331	|---------------------------+------------------------+-------------------------|
 20332	|glGetHistogramParameteriv  |glRasterPos2i[34]       |glXIsDirect[34]          |
 20333	|[34]                       |                        |                         |
 20334	|---------------------------+------------------------+-------------------------|
 20335	|glGetIntegerv[34]          |glRasterPos2iv[34]      |glXMakeContextCurrent[34]|
 20336	|---------------------------+------------------------+-------------------------|
 20337	|glGetLightfv[34]           |glRasterPos2s[34]       |glXMakeCurrent[34]       |
 20338	|---------------------------+------------------------+-------------------------|
 20339	|glGetLightiv[34]           |glRasterPos2sv[34]      |glXQueryContext[34]      |
 20340	|---------------------------+------------------------+-------------------------|
 20341	|glGetMapdv[34]             |glRasterPos3d[34]       |glXQueryContextInfoEXT   |
 20342	|                           |                        |[34]                     |
 20343	|---------------------------+------------------------+-------------------------|
 20344	|glGetMapfv[34]             |glRasterPos3dv[34]      |glXQueryDrawable[34]     |
 20345	|---------------------------+------------------------+-------------------------|
 20346	|glGetMapiv[34]             |glRasterPos3f[34]       |glXQueryExtension[34]    |
 20347	|---------------------------+------------------------+-------------------------|
 20348	|glGetMaterialfv[34]        |glRasterPos3fv[34]      |glXQueryExtensionsString |
 20349	|                           |                        |[34]                     |
 20350	|---------------------------+------------------------+-------------------------|
 20351	|glGetMaterialiv[34]        |glRasterPos3i[34]       |glXQueryServerString[34] |
 20352	|---------------------------+------------------------+-------------------------|
 20353	|glGetMinmax[34]            |glRasterPos3iv[34]      |glXQueryVersion[34]      |
 20354	|---------------------------+------------------------+-------------------------|
 20355	|glGetMinmaxParameterfv[34] |glRasterPos3s[34]       |glXSelectEvent[34]       |
 20356	|---------------------------+------------------------+-------------------------|
 20357	|glGetMinmaxParameteriv[34] |glRasterPos3sv[34]      |glXSwapBuffers[34]       |
 20358	|---------------------------+------------------------+-------------------------|
 20359	|glGetPixelMapfv[34]        |glRasterPos4d[34]       |glXUseXFont[34]          |
 20360	|---------------------------+------------------------+-------------------------|
 20361	|glGetPixelMapuiv[34]       |glRasterPos4dv[34]      |glXWaitGL[34]            |
 20362	|---------------------------+------------------------+-------------------------|
 20363	|glGetPixelMapusv[34]       |glRasterPos4f[34]       |glXWaitX[34]             |
 20364	|---------------------------+------------------------+-------------------------|
 20365	|glGetPointerv[34]          |glRasterPos4fv[34]      |                         |
 20366	|---------------------------+------------------------+-------------------------|
 20367	|glGetPolygonStipple[34]    |glRasterPos4i[34]       |                         |
 20368	+------------------------------------------------------------------------------+
 20369	-------------------------------------------------------------------------------
 20370	
 20371	libXext
 20372	
 20373	The behaviour of the interfaces in this library is specified by the following
 20374	Standards.
 20375	
 20376	Double Buffer Extension Library                                             
 20377	X Display Power Management Signaling (DPMS) Extension, Library Specification
 20378	Security Extension Specification, Version 7.1                               
 20379	X Nonrectangular Window Shape Extension Library Version 1.0                 
 20380	MIT-SHM--The MIT Shared Memory Extension                                    
 20381	X Synchronization Extension Library                                         
 20382	
 20383	Table A-7. libXext Function Interfaces
 20384	
 20385	+--------------------------------------------------------------------------------------+
 20386	|DPMSCapable[25]               |XShmCreateImage[28]       |XSyncQueryExtension[29]     |
 20387	|------------------------------+--------------------------+----------------------------|
 20388	|DPMSDisable[25]               |XShmCreatePixmap[28]      |XSyncSetCounter[29]         |
 20389	|------------------------------+--------------------------+----------------------------|
 20390	|DPMSEnable[25]                |XShmDetach[28]            |XSyncSetPriority[29]        |
 20391	|------------------------------+--------------------------+----------------------------|
 20392	|DPMSForceLevel[25]            |XShmGetEventBase[28]      |XSyncValueAdd[29]           |
 20393	|------------------------------+--------------------------+----------------------------|
 20394	|DPMSGetTimeouts[25]           |XShmGetImage[28]          |XSyncValueEqual[29]         |
 20395	|------------------------------+--------------------------+----------------------------|
 20396	|DPMSGetVersion[25]            |XShmPixmapFormat[28]      |XSyncValueGreaterOrEqual[29]|
 20397	|------------------------------+--------------------------+----------------------------|
 20398	|DPMSInfo[25]                  |XShmPutImage[28]          |XSyncValueGreaterThan[29]   |
 20399	|------------------------------+--------------------------+----------------------------|
 20400	|DPMSQueryExtension[25]        |XShmQueryExtension[28]    |XSyncValueHigh32[29]        |
 20401	|------------------------------+--------------------------+----------------------------|
 20402	|DPMSSetTimeouts[25]           |XShmQueryVersion[28]      |XSyncValueIsNegative[29]    |
 20403	|------------------------------+--------------------------+----------------------------|
 20404	|XSecurityAllocXauth[26]       |XSyncAwait[29]            |XSyncValueIsPositive[29]    |
 20405	|------------------------------+--------------------------+----------------------------|
 20406	|XSecurityFreeXauth[26]        |XSyncChangeAlarm[29]      |XSyncValueIsZero[29]        |
 20407	|------------------------------+--------------------------+----------------------------|
 20408	|XSecurityGenerateAuthorization|XSyncChangeCounter[29]    |XSyncValueLessOrEqual[29]   |
 20409	|[26]                          |                          |                            |
 20410	|------------------------------+--------------------------+----------------------------|
 20411	|XSecurityQueryExtension[26]   |XSyncCreateAlarm[29]      |XSyncValueLessThan[29]      |
 20412	|------------------------------+--------------------------+----------------------------|
 20413	|XSecurityRevokeAuthorization  |XSyncCreateCounter[29]    |XSyncValueLow32[29]         |
 20414	|[26]                          |                          |                            |
 20415	|------------------------------+--------------------------+----------------------------|
 20416	|XShapeCombineMask[27]         |XSyncDestroyAlarm[29]     |XSyncValueSubtract[29]      |
 20417	|------------------------------+--------------------------+----------------------------|
 20418	|XShapeCombineRectangles[27]   |XSyncDestroyCounter[29]   |XdbeAllocateBackBufferName  |
 20419	|                              |                          |[24]                        |
 20420	|------------------------------+--------------------------+----------------------------|
 20421	|XShapeCombineRegion[27]       |XSyncFreeSystemCounterList|XdbeBeginIdiom[24]          |
 20422	|                              |[29]                      |                            |
 20423	|------------------------------+--------------------------+----------------------------|
 20424	|XShapeCombineShape[27]        |XSyncGetPriority[29]      |XdbeDeallocateBackBufferName|
 20425	|                              |                          |[24]                        |
 20426	|------------------------------+--------------------------+----------------------------|
 20427	|XShapeGetRectangles[27]       |XSyncInitialize[29]       |XdbeEndIdiom[24]            |
 20428	|------------------------------+--------------------------+----------------------------|
 20429	|XShapeInputSelected[27]       |XSyncIntToValue[29]       |XdbeFreeVisualInfo[24]      |
 20430	|------------------------------+--------------------------+----------------------------|
 20431	|XShapeOffsetShape[27]         |XSyncIntsToValue[29]      |XdbeGetBackBufferAttributes |
 20432	|                              |                          |[24]                        |
 20433	|------------------------------+--------------------------+----------------------------|
 20434	|XShapeQueryExtension[27]      |XSyncListSystemCounters   |XdbeGetVisualInfo[24]       |
 20435	|                              |[29]                      |                            |
 20436	|------------------------------+--------------------------+----------------------------|
 20437	|XShapeQueryExtents[27]        |XSyncMaxValue[29]         |XdbeQueryExtension[24]      |
 20438	|------------------------------+--------------------------+----------------------------|
 20439	|XShapeQueryVersion[27]        |XSyncMinValue[29]         |XdbeSwapBuffers[24]         |
 20440	|------------------------------+--------------------------+----------------------------|
 20441	|XShapeSelectInput[27]         |XSyncQueryAlarm[29]       |                            |
 20442	|------------------------------+--------------------------+----------------------------|
 20443	|XShmAttach[28]                |XSyncQueryCounter[29]     |                            |
 20444	+--------------------------------------------------------------------------------------+
 20445	-------------------------------------------------------------------------------
 20446	
 20447	libICE
 20448	
 20449	The behaviour of the interfaces in this library is specified by the following
 20450	Standards.
 20451	
 20452	X11R6.4 X Inter-Client Exchange (ICE) Protocol
 20453	
 20454	Table A-8. libICE Function Interfaces
 20455	
 20456	+----------------------------------------------------------------------------------------+
 20457	|IceAcceptConnection[31]    |IceGetConnectionContext[31]     |IceProtocolVersion[31]     |
 20458	|---------------------------+--------------------------------+---------------------------|
 20459	|IceAddConnectionWatch[31]  |IceGetInBufSize[31]             |IceReadAuthFileEntry[31]   |
 20460	|---------------------------+--------------------------------+---------------------------|
 20461	|IceAllocScratch[31]        |IceGetListenConnectionNumber[31]|IceRegisterForProtocolReply|
 20462	|                           |                                |[31]                       |
 20463	|---------------------------+--------------------------------+---------------------------|
 20464	|IceAppLockConn[31]         |IceGetListenConnectionString[31]|IceRegisterForProtocolSetup|
 20465	|                           |                                |[31]                       |
 20466	|---------------------------+--------------------------------+---------------------------|
 20467	|IceAppUnlockConn[31]       |IceGetOutBufSize[31]            |IceRelease[31]             |
 20468	|---------------------------+--------------------------------+---------------------------|
 20469	|IceAuthFileName[31]        |IceInitThreads[31]              |IceRemoveConnectionWatch   |
 20470	|                           |                                |[31]                       |
 20471	|---------------------------+--------------------------------+---------------------------|
 20472	|IceCheckShutdownNegotiation|IceLastReceivedSequenceNumber   |IceSetErrorHandler[31]     |
 20473	|[31]                       |[31]                            |                           |
 20474	|---------------------------+--------------------------------+---------------------------|
 20475	|IceCloseConnection[31]     |IceLastSentSequenceNumber[31]   |IceSetHostBasedAuthProc[31]|
 20476	|---------------------------+--------------------------------+---------------------------|
 20477	|IceComposeNetworkIdList[31]|IceListenForConnections[31]     |IceSetIOErrorHandler[31]   |
 20478	|---------------------------+--------------------------------+---------------------------|
 20479	|IceConnectionNumber[31]    |IceListenForWellKnownConnections|IceSetPaAuthData[31]       |
 20480	|                           |[31]                            |                           |
 20481	|---------------------------+--------------------------------+---------------------------|
 20482	|IceConnectionStatus[31]    |IceLockAuthFile[31]             |IceSetShutdownNegotiation  |
 20483	|                           |                                |[31]                       |
 20484	|---------------------------+--------------------------------+---------------------------|
 20485	|IceConnectionString[31]    |IceOpenConnection[31]           |IceSwapping[31]            |
 20486	|---------------------------+--------------------------------+---------------------------|
 20487	|IceFlush[31]               |IcePing[31]                     |IceUnlockAuthFile[31]      |
 20488	|---------------------------+--------------------------------+---------------------------|
 20489	|IceFreeAuthFileEntry[31]   |IceProcessMessages[31]          |IceVendor[31]              |
 20490	|---------------------------+--------------------------------+---------------------------|
 20491	|IceFreeListenObjs[31]      |IceProtocolRevision[31]         |IceWriteAuthFileEntry[31]  |
 20492	|---------------------------+--------------------------------+---------------------------|
 20493	|IceGenerateMagicCookie[31] |IceProtocolSetup[31]            |                           |
 20494	|---------------------------+--------------------------------+---------------------------|
 20495	|IceGetAuthFileEntry[31]    |IceProtocolShutdown[31]         |                           |
 20496	+----------------------------------------------------------------------------------------+
 20497	-------------------------------------------------------------------------------
 20498	
 20499	libSM
 20500	
 20501	The behaviour of the interfaces in this library is specified by the following
 20502	Standards.
 20503	
 20504	X11R6.4 X Session Management Library
 20505	
 20506	Table A-9. libSM Function Interfaces
 20507	
 20508	+-----------------------------------------------------------------------------+
 20509	|SmFreeProperty[30]   |SmcRelease[30]                |SmsInitialize[30]       |
 20510	|---------------------+------------------------------+------------------------|
 20511	|SmFreeReasons[30]    |SmcRequestSaveYourself[30]    |SmsInteract[30]         |
 20512	|---------------------+------------------------------+------------------------|
 20513	|SmcClientID[30]      |SmcRequestSaveYourselfPhase2  |SmsProtocolRevision[30] |
 20514	|                     |[30]                          |                        |
 20515	|---------------------+------------------------------+------------------------|
 20516	|SmcCloseConnection   |SmcSaveYourselfDone[30]       |SmsProtocolVersion[30]  |
 20517	|[30]                 |                              |                        |
 20518	|---------------------+------------------------------+------------------------|
 20519	|SmcDeleteProperties  |SmcSetErrorHandler[30]        |SmsRegisterClientReply  |
 20520	|[30]                 |                              |[30]                    |
 20521	|---------------------+------------------------------+------------------------|
 20522	|SmcGetIceConnection  |SmcSetProperties[30]          |SmsReturnProperties[30] |
 20523	|[30]                 |                              |                        |
 20524	|---------------------+------------------------------+------------------------|
 20525	|SmcGetProperties[30] |SmcVendor[30]                 |SmsSaveComplete[30]     |
 20526	|---------------------+------------------------------+------------------------|
 20527	|SmcInteractDone[30]  |SmsCleanUp[30]                |SmsSaveYourself[30]     |
 20528	|---------------------+------------------------------+------------------------|
 20529	|SmcInteractRequest   |SmsClientHostName[30]         |SmsSaveYourselfPhase2   |
 20530	|[30]                 |                              |[30]                    |
 20531	|---------------------+------------------------------+------------------------|
 20532	|SmcModifyCallbacks   |SmsClientID[30]               |SmsSetErrorHandler[30]  |
 20533	|[30]                 |                              |                        |
 20534	|---------------------+------------------------------+------------------------|
 20535	|SmcOpenConnection[30]|SmsDie[30]                    |SmsShutdownCancelled[30]|
 20536	|---------------------+------------------------------+------------------------|
 20537	|SmcProtocolRevision  |SmsGenerateClientID[30]       |                        |
 20538	|[30]                 |                              |                        |
 20539	|---------------------+------------------------------+------------------------|
 20540	|SmcProtocolVersion   |SmsGetIceConnection[30]       |                        |
 20541	|[30]                 |                              |                        |
 20542	+-----------------------------------------------------------------------------+
 20543	-------------------------------------------------------------------------------
 20544	
 20545	libdl
 20546	
 20547	The behaviour of the interfaces in this library is specified by the following
 20548	Standards.
 20549	
 20550	Linux Standard Base                                                            
 20551	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 20552	(ISBN: 1-85912-181-0, C606)                                                    
 20553	
 20554	Table A-10. libdl Function Interfaces
 20555	
 20556	+------------------------------------------------------------------+
 20557	|dladdr(GLIBC_2.0)[15] |dlerror(GLIBC_2.0)[16]|dlsym(GLIBC_2.0)[16]|
 20558	|----------------------+----------------------+--------------------|
 20559	|dlclose(GLIBC_2.0)[16]|dlopen(GLIBC_2.0)[16] |                    |
 20560	+------------------------------------------------------------------+
 20561	-------------------------------------------------------------------------------
 20562	
 20563	libcrypt
 20564	
 20565	The behaviour of the interfaces in this library is specified by the following
 20566	Standards.
 20567	
 20568	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 20569	(ISBN: 1-85912-181-0, C606)                                                    
 20570	
 20571	Table A-11. libcrypt Function Interfaces
 20572	
 20573	+-----------------------------------------------------------------+
 20574	|crypt(GLIBC_2.0)[17]|encrypt(GLIBC_2.0)[17]|setkey(GLIBC_2.0)[17]|
 20575	+-----------------------------------------------------------------+
 20576	-------------------------------------------------------------------------------
 20577	
 20578	libz
 20579	
 20580	The behaviour of the interfaces in this library is specified by the following
 20581	Standards.
 20582	
 20583	zlib 1.1.3 Manual
 20584	
 20585	Table A-12. libz Function Interfaces
 20586	
 20587	+-----------------------------------------------------------------+
 20588	|adler32[20]             |gzdopen[20]    |gztell[20]              |
 20589	|------------------------+---------------+------------------------|
 20590	|compress[20]            |gzeof[20]      |gzwrite[20]             |
 20591	|------------------------+---------------+------------------------|
 20592	|compress2[20]           |gzerror[20]    |inflate[20]             |
 20593	|------------------------+---------------+------------------------|
 20594	|crc32[20]               |gzflush[20]    |inflateEnd[20]          |
 20595	|------------------------+---------------+------------------------|
 20596	|deflate[20]             |gzgetc[20]     |inflateInit2_[20]       |
 20597	|------------------------+---------------+------------------------|
 20598	|deflateCopy[20]         |gzgets[20]     |inflateInit_[20]        |
 20599	|------------------------+---------------+------------------------|
 20600	|deflateEnd[20]          |gzopen[20]     |inflateReset[20]        |
 20601	|------------------------+---------------+------------------------|
 20602	|deflateInit2_[20]       |gzprintf[20]   |inflateSetDictionary[20]|
 20603	|------------------------+---------------+------------------------|
 20604	|deflateInit_[20]        |gzputc[20]     |inflateSync[20]         |
 20605	|------------------------+---------------+------------------------|
 20606	|deflateParams[20]       |gzputs[20]     |inflateSyncPoint[20]    |
 20607	|------------------------+---------------+------------------------|
 20608	|deflateReset[20]        |gzread[20]     |uncompress[20]          |
 20609	|------------------------+---------------+------------------------|
 20610	|deflateSetDictionary[20]|gzrewind[20]   |zError[20]              |
 20611	|------------------------+---------------+------------------------|
 20612	|get_crc_table[20]       |gzseek[20]     |                        |
 20613	|------------------------+---------------+------------------------|
 20614	|gzclose[20]             |gzsetparams[20]|                        |
 20615	+-----------------------------------------------------------------+
 20616	-------------------------------------------------------------------------------
 20617	
 20618	libncurses
 20619	
 20620	The behaviour of the interfaces in this library is specified by the following
 20621	Standards.
 20622	
 20623	CAE Specification, May 1996, X/Open Curses, Issue 4, Version 2 (ISBN:          
 20624	1-85912-171-3, C610), plus Corrigendum U018                                    
 20625	
 20626	Table A-13. libncurses Function Interfaces
 20627	
 20628	+----------------------------------------------------------+
 20629	|addch[21]           |mvcur[21]           |slk_refresh[21] |
 20630	|--------------------+--------------------+----------------|
 20631	|addchnstr[21]       |mvdelch[21]         |slk_restore[21] |
 20632	|--------------------+--------------------+----------------|
 20633	|addchstr[21]        |mvderwin[21]        |slk_set[21]     |
 20634	|--------------------+--------------------+----------------|
 20635	|addnstr[21]         |mvgetch[21]         |slk_touch[21]   |
 20636	|--------------------+--------------------+----------------|
 20637	|addstr[21]          |mvgetnstr[21]       |standend[21]    |
 20638	|--------------------+--------------------+----------------|
 20639	|attr_get[21]        |mvgetstr[21]        |standout[21]    |
 20640	|--------------------+--------------------+----------------|
 20641	|attr_off[21]        |mvhline[21]         |start_color[21] |
 20642	|--------------------+--------------------+----------------|
 20643	|attr_on[21]         |mvinch[21]          |subpad[21]      |
 20644	|--------------------+--------------------+----------------|
 20645	|attr_set[21]        |mvinchnstr[21]      |subwin[21]      |
 20646	|--------------------+--------------------+----------------|
 20647	|attroff[21]         |mvinchstr[21]       |syncok[21]      |
 20648	|--------------------+--------------------+----------------|
 20649	|attron[21]          |mvinnstr[21]        |termattrs[21]   |
 20650	|--------------------+--------------------+----------------|
 20651	|attrset[21]         |mvinsch[21]         |termname[21]    |
 20652	|--------------------+--------------------+----------------|
 20653	|baudrate[21]        |mvinsnstr[21]       |tgetent[21]     |
 20654	|--------------------+--------------------+----------------|
 20655	|beep[21]            |mvinsstr[21]        |tgetflag[21]    |
 20656	|--------------------+--------------------+----------------|
 20657	|bkgd[21]            |mvinstr[21]         |tgetnum[21]     |
 20658	|--------------------+--------------------+----------------|
 20659	|bkgdset[21]         |mvprintw[21]        |tgetstr[21]     |
 20660	|--------------------+--------------------+----------------|
 20661	|border[21]          |mvscanw[21]         |tgoto[21]       |
 20662	|--------------------+--------------------+----------------|
 20663	|box[21]             |mvvline[21]         |tigetflag[21]   |
 20664	|--------------------+--------------------+----------------|
 20665	|can_change_color[21]|mvwaddch[21]        |tigetnum[21]    |
 20666	|--------------------+--------------------+----------------|
 20667	|cbreak[21]          |mvwaddchnstr[21]    |tigetstr[21]    |
 20668	|--------------------+--------------------+----------------|
 20669	|chgat[21]           |mvwaddchstr[21]     |timeout[21]     |
 20670	|--------------------+--------------------+----------------|
 20671	|clear[21]           |mvwaddnstr[21]      |tparm[21]       |
 20672	|--------------------+--------------------+----------------|
 20673	|clearok[21]         |mvwaddstr[21]       |tputs[21]       |
 20674	|--------------------+--------------------+----------------|
 20675	|clrtobot[21]        |mvwchgat[21]        |typeahead[21]   |
 20676	|--------------------+--------------------+----------------|
 20677	|clrtoeol[21]        |mvwdelch[21]        |ungetch[21]     |
 20678	|--------------------+--------------------+----------------|
 20679	|color_content[21]   |mvwgetch[21]        |untouchwin[21]  |
 20680	|--------------------+--------------------+----------------|
 20681	|color_set[21]       |mvwgetnstr[21]      |use_env[21]     |
 20682	|--------------------+--------------------+----------------|
 20683	|copywin[21]         |mvwgetstr[21]       |vidattr[21]     |
 20684	|--------------------+--------------------+----------------|
 20685	|curs_set[21]        |mvwhline[21]        |vidputs[21]     |
 20686	|--------------------+--------------------+----------------|
 20687	|def_prog_mode[21]   |mvwin[21]           |vline[21]       |
 20688	|--------------------+--------------------+----------------|
 20689	|def_shell_mode[21]  |mvwinch[21]         |vw_printw[21]   |
 20690	|--------------------+--------------------+----------------|
 20691	|delay_output[21]    |mvwinchnstr[21]     |vw_scanw[21]    |
 20692	|--------------------+--------------------+----------------|
 20693	|delch[21]           |mvwinchstr[21]      |vwprintw[21]    |
 20694	|--------------------+--------------------+----------------|
 20695	|deleteln[21]        |mvwinnstr[21]       |vwscanw[21]     |
 20696	|--------------------+--------------------+----------------|
 20697	|delscreen[21]       |mvwinsch[21]        |waddch[21]      |
 20698	|--------------------+--------------------+----------------|
 20699	|delwin[21]          |mvwinsnstr[21]      |waddchnstr[21]  |
 20700	|--------------------+--------------------+----------------|
 20701	|derwin[21]          |mvwinsstr[21]       |waddchstr[21]   |
 20702	|--------------------+--------------------+----------------|
 20703	|doupdate[21]        |mvwinstr[21]        |waddnstr[21]    |
 20704	|--------------------+--------------------+----------------|
 20705	|dupwin[21]          |mvwprintw[21]       |waddstr[21]     |
 20706	|--------------------+--------------------+----------------|
 20707	|echo[21]            |mvwscanw[21]        |wattr_get[21]   |
 20708	|--------------------+--------------------+----------------|
 20709	|echochar[21]        |mvwvline[21]        |wattr_off[21]   |
 20710	|--------------------+--------------------+----------------|
 20711	|endwin[21]          |napms[21]           |wattr_on[21]    |
 20712	|--------------------+--------------------+----------------|
 20713	|erase[21]           |newpad[21]          |wattr_set[21]   |
 20714	|--------------------+--------------------+----------------|
 20715	|erasechar[21]       |newterm[21]         |wattroff[21]    |
 20716	|--------------------+--------------------+----------------|
 20717	|filter[21]          |newwin[21]          |wattron[21]     |
 20718	|--------------------+--------------------+----------------|
 20719	|flash[21]           |nl[21]              |wattrset[21]    |
 20720	|--------------------+--------------------+----------------|
 20721	|flushinp[21]        |nocbreak[21]        |wbkgd[21]       |
 20722	|--------------------+--------------------+----------------|
 20723	|getbkgd[21]         |nodelay[21]         |wbkgdset[21]    |
 20724	|--------------------+--------------------+----------------|
 20725	|getch[21]           |noecho[21]          |wborder[21]     |
 20726	|--------------------+--------------------+----------------|
 20727	|getnstr[21]         |nonl[21]            |wchgat[21]      |
 20728	|--------------------+--------------------+----------------|
 20729	|getstr[21]          |noqiflush[21]       |wclear[21]      |
 20730	|--------------------+--------------------+----------------|
 20731	|getwin[21]          |noraw[21]           |wclrtobot[21]   |
 20732	|--------------------+--------------------+----------------|
 20733	|halfdelay[21]       |notimeout[21]       |wclrtoeol[21]   |
 20734	|--------------------+--------------------+----------------|
 20735	|has_colors[21]      |overlay[21]         |wcolor_set[21]  |
 20736	|--------------------+--------------------+----------------|
 20737	|has_ic[21]          |overwrite[21]       |wcursyncup[21]  |
 20738	|--------------------+--------------------+----------------|
 20739	|has_il[21]          |pair_content[21]    |wdelch[21]      |
 20740	|--------------------+--------------------+----------------|
 20741	|hline[21]           |pechochar[21]       |wdeleteln[21]   |
 20742	|--------------------+--------------------+----------------|
 20743	|idcok[21]           |pnoutrefresh[21]    |wechochar[21]   |
 20744	|--------------------+--------------------+----------------|
 20745	|idlok[21]           |prefresh[21]        |werase[21]      |
 20746	|--------------------+--------------------+----------------|
 20747	|immedok[21]         |printw[21]          |wgetch[21]      |
 20748	|--------------------+--------------------+----------------|
 20749	|inch[21]            |putp[21]            |wgetnstr[21]    |
 20750	|--------------------+--------------------+----------------|
 20751	|inchnstr[21]        |putwin[21]          |wgetstr[21]     |
 20752	|--------------------+--------------------+----------------|
 20753	|inchstr[21]         |qiflush[21]         |whline[21]      |
 20754	|--------------------+--------------------+----------------|
 20755	|init_color[21]      |raw[21]             |winch[21]       |
 20756	|--------------------+--------------------+----------------|
 20757	|init_pair[21]       |redrawwin[21]       |winchnstr[21]   |
 20758	|--------------------+--------------------+----------------|
 20759	|initscr[21]         |refresh[21]         |winchstr[21]    |
 20760	|--------------------+--------------------+----------------|
 20761	|innstr[21]          |reset_prog_mode[21] |winnstr[21]     |
 20762	|--------------------+--------------------+----------------|
 20763	|insch[21]           |reset_shell_mode[21]|winsch[21]      |
 20764	|--------------------+--------------------+----------------|
 20765	|insdelln[21]        |resetty[21]         |winsdelln[21]   |
 20766	|--------------------+--------------------+----------------|
 20767	|insertln[21]        |ripoffline[21]      |winsertln[21]   |
 20768	|--------------------+--------------------+----------------|
 20769	|insnstr[21]         |savetty[21]         |winsnstr[21]    |
 20770	|--------------------+--------------------+----------------|
 20771	|insstr[21]          |scanw[21]           |winsstr[21]     |
 20772	|--------------------+--------------------+----------------|
 20773	|instr[21]           |scr_dump[21]        |winstr[21]      |
 20774	|--------------------+--------------------+----------------|
 20775	|intrflush[21]       |scr_init[21]        |wmove[21]       |
 20776	|--------------------+--------------------+----------------|
 20777	|is_linetouched[21]  |scr_restore[21]     |wnoutrefresh[21]|
 20778	|--------------------+--------------------+----------------|
 20779	|is_wintouched[21]   |scr_set[21]         |wprintw[21]     |
 20780	|--------------------+--------------------+----------------|
 20781	|isendwin[21]        |scrl[21]            |wredrawln[21]   |
 20782	|--------------------+--------------------+----------------|
 20783	|keyname[21]         |scroll[21]          |wrefresh[21]    |
 20784	|--------------------+--------------------+----------------|
 20785	|keypad[21]          |scrollok[21]        |wscanw[21]      |
 20786	|--------------------+--------------------+----------------|
 20787	|killchar[21]        |set_term[21]        |wscrl[21]       |
 20788	|--------------------+--------------------+----------------|
 20789	|leaveok[21]         |setscrreg[21]       |wsetscrreg[21]  |
 20790	|--------------------+--------------------+----------------|
 20791	|longname[21]        |slk_attr_set[21]    |wstandend[21]   |
 20792	|--------------------+--------------------+----------------|
 20793	|meta[21]            |slk_attroff[21]     |wstandout[21]   |
 20794	|--------------------+--------------------+----------------|
 20795	|move[21]            |slk_attron[21]      |wsyncdown[21]   |
 20796	|--------------------+--------------------+----------------|
 20797	|mvaddch[21]         |slk_attrset[21]     |wsyncup[21]     |
 20798	|--------------------+--------------------+----------------|
 20799	|mvaddchnstr[21]     |slk_clear[21]       |wtimeout[21]    |
 20800	|--------------------+--------------------+----------------|
 20801	|mvaddchstr[21]      |slk_color[21]       |wtouchln[21]    |
 20802	|--------------------+--------------------+----------------|
 20803	|mvaddnstr[21]       |slk_init[21]        |wvline[21]      |
 20804	|--------------------+--------------------+----------------|
 20805	|mvaddstr[21]        |slk_label[21]       |                |
 20806	|--------------------+--------------------+----------------|
 20807	|mvchgat[21]         |slk_noutrefresh[21] |                |
 20808	+----------------------------------------------------------+
 20809	
 20810	Table A-14. libncurses Data Interfaces
 20811	
 20812	+-----------------------+
 20813	|COLS[21] |curscr[21] | |
 20814	|---------+-----------+-|
 20815	|LINES[21]|stdscr[21] | |
 20816	+-----------------------+
 20817	-------------------------------------------------------------------------------
 20818	
 20819	libutil
 20820	
 20821	The behaviour of the interfaces in this library is specified by the following
 20822	Standards.
 20823	
 20824	Linux Standard Base
 20825	
 20826	Table A-15. libutil Function Interfaces
 20827	
 20828	+----------------------------------------------------------------------+
 20829	|forkpty(GLIBC_2.0)[22]|login_tty(GLIBC_2.0)[22]|logwtmp(GLIBC_2.0)[22]|
 20830	|----------------------+------------------------+----------------------|
 20831	|login(GLIBC_2.0)[22]  |logout(GLIBC_2.0)[22]   |openpty(GLIBC_2.0)[22]|
 20832	+----------------------------------------------------------------------+
 20833	-------------------------------------------------------------------------------
 20834	
 20835	libc
 20836	
 20837	The behaviour of the interfaces in this library is specified by the following
 20838	Standards.
 20839	
 20840	ISO/IEC 9899: 1999, Programming Languages --C                                  
 20841	Large File Support                                                             
 20842	Linux Standard Base                                                            
 20843	IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]                                    
 20844	CAE Specification, February 1997, Networking Services (XNS), Issue 5 (ISBN:    
 20845	1-85912-165-9, C523)                                                           
 20846	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 20847	(ISBN: 1-85912-181-0, C606)                                                    
 20848	System V Interface Definition, Issue 3                                         
 20849	System V Interface Definition,Fourth Edition                                   
 20850	
 20851	Table A-16. libc Function Interfaces
 20852	
 20853	+-----------------------------------------------------------------------------+
 20854	|_Exit(GLIBC_2.1.1)[3]     |gets(GLIBC_2.1.1)[8]      |shmdt(GLIBC_2.1.1)[8]  |
 20855	|--------------------------+--------------------------+-----------------------|
 20856	|_IO_feof(GLIBC_2.0)[5]    |getservbyname(GLIBC_2.0)  |shmget(GLIBC_2.0)[8]   |
 20857	|                          |[5]                       |                       |
 20858	|--------------------------+--------------------------+-----------------------|
 20859	|_IO_getc(GLIBC_2.0)[5]    |getservbyport(GLIBC_2.0)  |shutdown(GLIBC_2.0)[7] |
 20860	|                          |[7]                       |                       |
 20861	|--------------------------+--------------------------+-----------------------|
 20862	|_IO_putc(GLIBC_2.0)[5]    |getservent(GLIBC_2.0)[5]  |sigaction(GLIBC_2.0)[8]|
 20863	|--------------------------+--------------------------+-----------------------|
 20864	|_IO_puts(GLIBC_2.0)[5]    |getsid(GLIBC_2.0)[8]      |sigaddset(GLIBC_2.0)[8]|
 20865	|--------------------------+--------------------------+-----------------------|
 20866	|__assert_fail(GLIBC_2.0)  |getsockname(GLIBC_2.0)[7] |sigaltstack(GLIBC_2.0) |
 20867	|[5]                       |                          |[8]                    |
 20868	|--------------------------+--------------------------+-----------------------|
 20869	|__bzero(GLIBC_2.0)[5]     |getsockopt(GLIBC_2.0)[7]  |sigandset(GLIBC_2.0)[5]|
 20870	|--------------------------+--------------------------+-----------------------|
 20871	|__ctype_get_mb_cur_max    |getsubopt(GLIBC_2.0)[8]   |sigblock(GLIBC_2.0)[5] |
 20872	|(GLIBC_2.0)[5]            |                          |                       |
 20873	|--------------------------+--------------------------+-----------------------|
 20874	|__cxa_atexit(GLIBC_2.1.3) |gettext(GLIBC_2.1.3)[5]   |sigdelset(GLIBC_2.1.3) |
 20875	|[5]                       |                          |[8]                    |
 20876	|--------------------------+--------------------------+-----------------------|
 20877	|__dcgettext(GLIBC_2.0)[5] |gettimeofday(GLIBC_2.0)[8]|sigemptyset(GLIBC_2.0) |
 20878	|                          |                          |[8]                    |
 20879	|--------------------------+--------------------------+-----------------------|
 20880	|__errno_location          |getuid(GLIBC_2.0)[8]      |sigfillset(GLIBC_2.0)  |
 20881	|(GLIBC_2.0)[5]            |                          |[8]                    |
 20882	|--------------------------+--------------------------+-----------------------|
 20883	|__fpending(GLIBC_2.2)[5]  |getutent(GLIBC_2.2)[5]    |siggetmask(GLIBC_2.2)  |
 20884	|                          |                          |[5]                    |
 20885	|--------------------------+--------------------------+-----------------------|
 20886	|__fxstat(GLIBC_2.0)[5]    |getutent_r(GLIBC_2.0)[5]  |sighold(GLIBC_2.0)[8]  |
 20887	|--------------------------+--------------------------+-----------------------|
 20888	|__fxstat64(GLIBC_2.2)[5]  |getutxent(GLIBC_2.2)[8]   |sigignore(GLIBC_2.2)[8]|
 20889	|--------------------------+--------------------------+-----------------------|
 20890	|__getpagesize(GLIBC_2.0)  |getutxid(GLIBC_2.0)[8]    |siginterrupt(GLIBC_2.0)|
 20891	|[5]                       |                          |[8]                    |
 20892	|--------------------------+--------------------------+-----------------------|
 20893	|__getpgid(GLIBC_2.0)[5]   |getutxline(GLIBC_2.0)[8]  |sigisemptyset          |
 20894	|                          |                          |(GLIBC_2.0)[5]         |
 20895	|--------------------------+--------------------------+-----------------------|
 20896	|__libc_current_sigrtmax   |getw(GLIBC_2.1)[8]        |sigismember(GLIBC_2.1) |
 20897	|(GLIBC_2.1)[5]            |                          |[8]                    |
 20898	|--------------------------+--------------------------+-----------------------|
 20899	|__libc_current_sigrtmin   |getwc(GLIBC_2.1)[3]       |siglongjmp(GLIBC_2.1)  |
 20900	|(GLIBC_2.1)[5]            |                          |[8]                    |
 20901	|--------------------------+--------------------------+-----------------------|
 20902	|__libc_start_main         |getwchar(GLIBC_2.0)[8]    |signal(GLIBC_2.0)[8]   |
 20903	|(GLIBC_2.0)[5]            |                          |                       |
 20904	|--------------------------+--------------------------+-----------------------|
 20905	|__lxstat(GLIBC_2.0)[5]    |getwd(GLIBC_2.0)[8]       |sigorset(GLIBC_2.0)[5] |
 20906	|--------------------------+--------------------------+-----------------------|
 20907	|__lxstat64(GLIBC_2.2)[5]  |glob(GLIBC_2.2)[8]        |sigpause(GLIBC_2.2)[8] |
 20908	|--------------------------+--------------------------+-----------------------|
 20909	|__mbrlen(GLIBC_2.0)[5]    |glob64(GLIBC_2.0)[5]      |sigpending(GLIBC_2.0)  |
 20910	|                          |                          |[8]                    |
 20911	|--------------------------+--------------------------+-----------------------|
 20912	|__mempcpy(GLIBC_2.0)[5]   |globfree(GLIBC_2.0)[8]    |sigprocmask(GLIBC_2.0) |
 20913	|                          |                          |[8]                    |
 20914	|--------------------------+--------------------------+-----------------------|
 20915	|__rawmemchr(GLIBC_2.1)[5] |globfree64(GLIBC_2.1)[5]  |sigqueue(GLIBC_2.1)[8] |
 20916	|--------------------------+--------------------------+-----------------------|
 20917	|__secure_getenv(GLIBC_2.0)|gmtime(GLIBC_2.0)[8]      |sigrelse(GLIBC_2.0)[8] |
 20918	|[5]                       |                          |                       |
 20919	|--------------------------+--------------------------+-----------------------|
 20920	|__sigpause(GLIBC_2.0)[5]  |gmtime_r(GLIBC_2.0)[8]    |sigreturn(GLIBC_2.0)[5]|
 20921	|--------------------------+--------------------------+-----------------------|
 20922	|__sigsetjmp(GLIBC_2.0)[5] |grantpt(GLIBC_2.0)[8]     |sigset(GLIBC_2.0)[8]   |
 20923	|--------------------------+--------------------------+-----------------------|
 20924	|__stpcpy(GLIBC_2.0)[5]    |hcreate(GLIBC_2.0)[8]     |sigstack(GLIBC_2.0)[8] |
 20925	|--------------------------+--------------------------+-----------------------|
 20926	|__strdup(GLIBC_2.0)[5]    |hdestroy(GLIBC_2.0)[8]    |sigsuspend(GLIBC_2.0)  |
 20927	|                          |                          |[8]                    |
 20928	|--------------------------+--------------------------+-----------------------|
 20929	|__strtod_internal         |hsearch(GLIBC_2.0)[8]     |sigtimedwait(GLIBC_2.0)|
 20930	|(GLIBC_2.0)[5]            |                          |[8]                    |
 20931	|--------------------------+--------------------------+-----------------------|
 20932	|__strtof_internal         |htonl(GLIBC_2.0)[7]       |sigwait(GLIBC_2.0)[8]  |
 20933	|(GLIBC_2.0)[5]            |                          |                       |
 20934	|--------------------------+--------------------------+-----------------------|
 20935	|__strtok_r(GLIBC_2.0)[5]  |htons(GLIBC_2.0)[7]       |sigwaitinfo(GLIBC_2.0) |
 20936	|                          |                          |[8]                    |
 20937	|--------------------------+--------------------------+-----------------------|
 20938	|__strtol_internal         |iconv(GLIBC_2.0)[8]       |sleep(GLIBC_2.0)[8]    |
 20939	|(GLIBC_2.0)[5]            |                          |                       |
 20940	|--------------------------+--------------------------+-----------------------|
 20941	|__strtold_internal        |iconv_close(GLIBC_2.0)[8] |snprintf(GLIBC_2.0)[8] |
 20942	|(GLIBC_2.0)[5]            |                          |                       |
 20943	|--------------------------+--------------------------+-----------------------|
 20944	|__strtoll_internal        |iconv_open(GLIBC_2.0)[8]  |socket(GLIBC_2.0)[7]   |
 20945	|(GLIBC_2.0)[5]            |                          |                       |
 20946	|--------------------------+--------------------------+-----------------------|
 20947	|__strtoul_internal        |imaxabs(GLIBC_2.0)[3]     |socketpair(GLIBC_2.0)  |
 20948	|(GLIBC_2.0)[5]            |                          |[7]                    |
 20949	|--------------------------+--------------------------+-----------------------|
 20950	|__strtoull_internal       |imaxdiv(GLIBC_2.0)[3]     |sprintf(GLIBC_2.0)[8]  |
 20951	|(GLIBC_2.0)[5]            |                          |                       |
 20952	|--------------------------+--------------------------+-----------------------|
 20953	|__sysconf(GLIBC_2.2)[5]   |index(GLIBC_2.2)[8]       |srand(GLIBC_2.2)[8]    |
 20954	|--------------------------+--------------------------+-----------------------|
 20955	|__sysv_signal(GLIBC_2.0)  |inet_addr(GLIBC_2.0)[7]   |srand48(GLIBC_2.0)[8]  |
 20956	|[5]                       |                          |                       |
 20957	|--------------------------+--------------------------+-----------------------|
 20958	|__wcstod_internal         |inet_aton(GLIBC_2.0)[7]   |srandom(GLIBC_2.0)[8]  |
 20959	|(GLIBC_2.0)[5]            |                          |                       |
 20960	|--------------------------+--------------------------+-----------------------|
 20961	|__wcstof_internal         |inet_ntoa(GLIBC_2.0)[7]   |sscanf(GLIBC_2.0)[8]   |
 20962	|(GLIBC_2.0)[5]            |                          |                       |
 20963	|--------------------------+--------------------------+-----------------------|
 20964	|__wcstol_internal         |initgroups(GLIBC_2.0)[5]  |statfs(GLIBC_2.0)[5]   |
 20965	|(GLIBC_2.0)[5]            |                          |                       |
 20966	|--------------------------+--------------------------+-----------------------|
 20967	|__wcstold_internal        |initstate(GLIBC_2.0)[8]   |statvfs(GLIBC_2.0)[8]  |
 20968	|(GLIBC_2.0)[5]            |                          |                       |
 20969	|--------------------------+--------------------------+-----------------------|
 20970	|__wcstoll_internal        |insque(GLIBC_2.0)[8]      |step(GLIBC_2.0)[8]     |
 20971	|(GLIBC_2.0)[5]            |                          |                       |
 20972	|--------------------------+--------------------------+-----------------------|
 20973	|__wcstoul_internal        |ioctl(GLIBC_2.0)[8]       |stime(GLIBC_2.0)[5]    |
 20974	|(GLIBC_2.0)[5]            |                          |                       |
 20975	|--------------------------+--------------------------+-----------------------|
 20976	|__wcstoull_internal       |isalnum(GLIBC_2.0)[8]     |stpcpy(GLIBC_2.0)[5]   |
 20977	|(GLIBC_2.0)[5]            |                          |                       |
 20978	|--------------------------+--------------------------+-----------------------|
 20979	|__xmknod(GLIBC_2.0)[5]    |isalpha(GLIBC_2.0)[8]     |stpncpy(GLIBC_2.0)[5]  |
 20980	|--------------------------+--------------------------+-----------------------|
 20981	|__xstat(GLIBC_2.0)[5]     |isascii(GLIBC_2.0)[8]     |strcasecmp(GLIBC_2.0)  |
 20982	|                          |                          |[8]                    |
 20983	|--------------------------+--------------------------+-----------------------|
 20984	|__xstat64(GLIBC_2.2)[5]   |isatty(GLIBC_2.2)[8]      |strcasestr(GLIBC_2.2)  |
 20985	|                          |                          |[5]                    |
 20986	|--------------------------+--------------------------+-----------------------|
 20987	|_exit(GLIBC_2.0)[8]       |isblank(GLIBC_2.0)[5]     |strcat(GLIBC_2.0)[8]   |
 20988	|--------------------------+--------------------------+-----------------------|
 20989	|_longjmp(GLIBC_2.0)[8]    |iscntrl(GLIBC_2.0)[8]     |strchr(GLIBC_2.0)[8]   |
 20990	|--------------------------+--------------------------+-----------------------|
 20991	|_obstack_begin(GLIBC_2.0) |isdigit(GLIBC_2.0)[8]     |strcmp(GLIBC_2.0)[8]   |
 20992	|[5]                       |                          |                       |
 20993	|--------------------------+--------------------------+-----------------------|
 20994	|_obstack_newchunk         |isgraph(GLIBC_2.0)[8]     |strcoll(GLIBC_2.0)[8]  |
 20995	|(GLIBC_2.0)[5]            |                          |                       |
 20996	|--------------------------+--------------------------+-----------------------|
 20997	|_setjmp(GLIBC_2.0)[8]     |isinf(GLIBC_2.0)[3]       |strcpy(GLIBC_2.0)[8]   |
 20998	|--------------------------+--------------------------+-----------------------|
 20999	|_tolower(GLIBC_2.0)[8]    |isinfl(GLIBC_2.0)[3]      |strcspn(GLIBC_2.0)[8]  |
 21000	|--------------------------+--------------------------+-----------------------|
 21001	|_toupper(GLIBC_2.0)[8]    |islower(GLIBC_2.0)[8]     |strdup(GLIBC_2.0)[8]   |
 21002	|--------------------------+--------------------------+-----------------------|
 21003	|a64l(GLIBC_2.0)[8]        |isnan(GLIBC_2.0)[3]       |strerror(GLIBC_2.0)[8] |
 21004	|--------------------------+--------------------------+-----------------------|
 21005	|abort(GLIBC_2.0)[8]       |isnanf(GLIBC_2.0)[3]      |strerror_r(GLIBC_2.0)  |
 21006	|                          |                          |[5]                    |
 21007	|--------------------------+--------------------------+-----------------------|
 21008	|abs(GLIBC_2.0)[8]         |isnanl(GLIBC_2.0)[3]      |strfmon(GLIBC_2.0)[8]  |
 21009	|--------------------------+--------------------------+-----------------------|
 21010	|accept(GLIBC_2.0)[7]      |isprint(GLIBC_2.0)[8]     |strfry(GLIBC_2.0)[5]   |
 21011	|--------------------------+--------------------------+-----------------------|
 21012	|access(GLIBC_2.0)[8]      |ispunct(GLIBC_2.0)[8]     |strftime(GLIBC_2.0)[8] |
 21013	|--------------------------+--------------------------+-----------------------|
 21014	|acct(GLIBC_2.0)[5]        |isspace(GLIBC_2.0)[8]     |strlen(GLIBC_2.0)[8]   |
 21015	|--------------------------+--------------------------+-----------------------|
 21016	|adjtime(GLIBC_2.0)[5]     |isupper(GLIBC_2.0)[8]     |strncasecmp(GLIBC_2.0) |
 21017	|                          |                          |[8]                    |
 21018	|--------------------------+--------------------------+-----------------------|
 21019	|adjtimex(GLIBC_2.0)[5]    |iswalnum(GLIBC_2.0)[8]    |strncat(GLIBC_2.0)[8]  |
 21020	|--------------------------+--------------------------+-----------------------|
 21021	|advance(GLIBC_2.0)[8]     |iswalpha(GLIBC_2.0)[8]    |strncmp(GLIBC_2.0)[8]  |
 21022	|--------------------------+--------------------------+-----------------------|
 21023	|alarm(GLIBC_2.0)[8]       |iswblank(GLIBC_2.0)[5]    |strncpy(GLIBC_2.0)[8]  |
 21024	|--------------------------+--------------------------+-----------------------|
 21025	|alphasort(GLIBC_2.0)[5]   |iswcntrl(GLIBC_2.0)[8]    |strndup(GLIBC_2.0)[5]  |
 21026	|--------------------------+--------------------------+-----------------------|
 21027	|alphasort64(GLIBC_2.1)[5] |iswctype(GLIBC_2.1)[5]    |strnlen(GLIBC_2.1)[5]  |
 21028	|--------------------------+--------------------------+-----------------------|
 21029	|asctime(GLIBC_2.0)[8]     |iswdigit(GLIBC_2.0)[8]    |strpbrk(GLIBC_2.0)[8]  |
 21030	|--------------------------+--------------------------+-----------------------|
 21031	|asctime_r(GLIBC_2.0)[8]   |iswgraph(GLIBC_2.0)[8]    |strptime(GLIBC_2.0)[8] |
 21032	|--------------------------+--------------------------+-----------------------|
 21033	|atexit(GLIBC_2.0)[8]      |iswlower(GLIBC_2.0)[8]    |strrchr(GLIBC_2.0)[8]  |
 21034	|--------------------------+--------------------------+-----------------------|
 21035	|atof(GLIBC_2.0)[8]        |iswprint(GLIBC_2.0)[8]    |strsep(GLIBC_2.0)[5]   |
 21036	|--------------------------+--------------------------+-----------------------|
 21037	|atoi(GLIBC_2.0)[8]        |iswpunct(GLIBC_2.0)[8]    |strsignal(GLIBC_2.0)[5]|
 21038	|--------------------------+--------------------------+-----------------------|
 21039	|atol(GLIBC_2.0)[8]        |iswspace(GLIBC_2.0)[8]    |strspn(GLIBC_2.0)[8]   |
 21040	|--------------------------+--------------------------+-----------------------|
 21041	|authnone_create(GLIBC_2.0)|iswupper(GLIBC_2.0)[8]    |strstr(GLIBC_2.0)[8]   |
 21042	|[10]                      |                          |                       |
 21043	|--------------------------+--------------------------+-----------------------|
 21044	|basename(GLIBC_2.0)[8]    |iswxdigit(GLIBC_2.0)[8]   |strtod(GLIBC_2.0)[8]   |
 21045	|--------------------------+--------------------------+-----------------------|
 21046	|bcmp(GLIBC_2.0)[8]        |isxdigit(GLIBC_2.0)[8]    |strtof(GLIBC_2.0)[3]   |
 21047	|--------------------------+--------------------------+-----------------------|
 21048	|bcopy(GLIBC_2.0)[8]       |jrand48(GLIBC_2.0)[8]     |strtoimax(GLIBC_2.0)[3]|
 21049	|--------------------------+--------------------------+-----------------------|
 21050	|bind(GLIBC_2.0)[7]        |key_decryptsession        |strtok(GLIBC_2.0)[8]   |
 21051	|                          |(GLIBC_2.0)[9]            |                       |
 21052	|--------------------------+--------------------------+-----------------------|
 21053	|bindresvport(GLIBC_2.0)[5]|kill(GLIBC_2.0)[5]        |strtok_r(GLIBC_2.0)[5] |
 21054	|--------------------------+--------------------------+-----------------------|
 21055	|bindtextdomain(GLIBC_2.0) |killpg(GLIBC_2.0)[8]      |strtol(GLIBC_2.0)[8]   |
 21056	|[5]                       |                          |                       |
 21057	|--------------------------+--------------------------+-----------------------|
 21058	|brk(GLIBC_2.0)[8]         |l64a(GLIBC_2.0)[8]        |strtold(GLIBC_2.0)[3]  |
 21059	|--------------------------+--------------------------+-----------------------|
 21060	|bsd_signal(GLIBC_2.0)[8]  |labs(GLIBC_2.0)[8]        |strtoll(GLIBC_2.0)[3]  |
 21061	|--------------------------+--------------------------+-----------------------|
 21062	|bsearch(GLIBC_2.0)[8]     |lchown(GLIBC_2.0)[8]      |strtoq(GLIBC_2.0)[5]   |
 21063	|--------------------------+--------------------------+-----------------------|
 21064	|btowc(GLIBC_2.0)[8]       |ldiv(GLIBC_2.0)[8]        |strtoul(GLIBC_2.0)[8]  |
 21065	|--------------------------+--------------------------+-----------------------|
 21066	|bzero(GLIBC_2.0)[8]       |lfind(GLIBC_2.0)[8]       |strtoull(GLIBC_2.0)[3] |
 21067	|--------------------------+--------------------------+-----------------------|
 21068	|calloc(GLIBC_2.0)[8]      |link(GLIBC_2.0)[8]        |strtoumax(GLIBC_2.0)[3]|
 21069	|--------------------------+--------------------------+-----------------------|
 21070	|catclose(GLIBC_2.0)[8]    |listen(GLIBC_2.0)[7]      |strtouq(GLIBC_2.0)[5]  |
 21071	|--------------------------+--------------------------+-----------------------|
 21072	|catgets(GLIBC_2.0)[8]     |llabs(GLIBC_2.0)[3]       |strverscmp(GLIBC_2.0)  |
 21073	|                          |                          |[5]                    |
 21074	|--------------------------+--------------------------+-----------------------|
 21075	|catopen(GLIBC_2.0)[8]     |lldiv(GLIBC_2.0)[3]       |strxfrm(GLIBC_2.0)[8]  |
 21076	|--------------------------+--------------------------+-----------------------|
 21077	|cfgetispeed(GLIBC_2.0)[8] |localeconv(GLIBC_2.0)[8]  |svc_getreqset          |
 21078	|                          |                          |(GLIBC_2.0)[9]         |
 21079	|--------------------------+--------------------------+-----------------------|
 21080	|cfgetospeed(GLIBC_2.0)[8] |localtime(GLIBC_2.0)[8]   |svcerr_auth(GLIBC_2.0) |
 21081	|                          |                          |[9]                    |
 21082	|--------------------------+--------------------------+-----------------------|
 21083	|cfmakeraw(GLIBC_2.0)[5]   |localtime_r(GLIBC_2.0)[8] |svcerr_decode          |
 21084	|                          |                          |(GLIBC_2.0)[9]         |
 21085	|--------------------------+--------------------------+-----------------------|
 21086	|cfsetispeed(GLIBC_2.0)[8] |lockf(GLIBC_2.0)[8]       |svcerr_noproc          |
 21087	|                          |                          |(GLIBC_2.0)[9]         |
 21088	|--------------------------+--------------------------+-----------------------|
 21089	|cfsetospeed(GLIBC_2.0)[8] |lockf64(GLIBC_2.0)[4]     |svcerr_noprog          |
 21090	|                          |                          |(GLIBC_2.0)[9]         |
 21091	|--------------------------+--------------------------+-----------------------|
 21092	|cfsetspeed(GLIBC_2.0)[5]  |longjmp(GLIBC_2.0)[8]     |svcerr_progvers        |
 21093	|                          |                          |(GLIBC_2.0)[9]         |
 21094	|--------------------------+--------------------------+-----------------------|
 21095	|chdir(GLIBC_2.0)[8]       |lrand48(GLIBC_2.0)[8]     |svcerr_systemerr       |
 21096	|                          |                          |(GLIBC_2.0)[9]         |
 21097	|--------------------------+--------------------------+-----------------------|
 21098	|chmod(GLIBC_2.0)[8]       |lsearch(GLIBC_2.0)[8]     |svcerr_weakauth        |
 21099	|                          |                          |(GLIBC_2.0)[9]         |
 21100	|--------------------------+--------------------------+-----------------------|
 21101	|chown(GLIBC_2.1)[8]       |lseek(GLIBC_2.1)[8]       |swab(GLIBC_2.1)[8]     |
 21102	|--------------------------+--------------------------+-----------------------|
 21103	|chroot(GLIBC_2.0)[8]      |lseek64(GLIBC_2.0)[4]     |swapcontext(GLIBC_2.0) |
 21104	|                          |                          |[8]                    |
 21105	|--------------------------+--------------------------+-----------------------|
 21106	|clearerr(GLIBC_2.0)[8]    |makecontext(GLIBC_2.0)[8] |swprintf(GLIBC_2.0)[8] |
 21107	|--------------------------+--------------------------+-----------------------|
 21108	|clnt_create(GLIBC_2.0)[10]|malloc(GLIBC_2.0)[8]      |swscanf(GLIBC_2.0)[3]  |
 21109	|--------------------------+--------------------------+-----------------------|
 21110	|clnt_pcreateerror         |mblen(GLIBC_2.0)[8]       |symlink(GLIBC_2.0)[8]  |
 21111	|(GLIBC_2.0)[10]           |                          |                       |
 21112	|--------------------------+--------------------------+-----------------------|
 21113	|clnt_perrno(GLIBC_2.0)[10]|mbrlen(GLIBC_2.0)[8]      |sync(GLIBC_2.0)[8]     |
 21114	|--------------------------+--------------------------+-----------------------|
 21115	|clnt_perror(GLIBC_2.0)[10]|mbrtowc(GLIBC_2.0)[8]     |sysconf(GLIBC_2.0)[8]  |
 21116	|--------------------------+--------------------------+-----------------------|
 21117	|clnt_spcreateerror        |mbsinit(GLIBC_2.0)[8]     |syslog(GLIBC_2.0)[8]   |
 21118	|(GLIBC_2.0)[10]           |                          |                       |
 21119	|--------------------------+--------------------------+-----------------------|
 21120	|clnt_sperrno(GLIBC_2.0)   |mbsnrtowcs(GLIBC_2.0)[5]  |system(GLIBC_2.0)[5]   |
 21121	|[10]                      |                          |                       |
 21122	|--------------------------+--------------------------+-----------------------|
 21123	|clnt_sperror(GLIBC_2.0)   |mbsrtowcs(GLIBC_2.0)[8]   |tcdrain(GLIBC_2.0)[8]  |
 21124	|[10]                      |                          |                       |
 21125	|--------------------------+--------------------------+-----------------------|
 21126	|clock(GLIBC_2.0)[8]       |mbstowcs(GLIBC_2.0)[8]    |tcflow(GLIBC_2.0)[8]   |
 21127	|--------------------------+--------------------------+-----------------------|
 21128	|close(GLIBC_2.0)[8]       |mbtowc(GLIBC_2.0)[8]      |tcflush(GLIBC_2.0)[8]  |
 21129	|--------------------------+--------------------------+-----------------------|
 21130	|closedir(GLIBC_2.0)[8]    |memccpy(GLIBC_2.0)[8]     |tcgetattr(GLIBC_2.0)[8]|
 21131	|--------------------------+--------------------------+-----------------------|
 21132	|closelog(GLIBC_2.0)[8]    |memchr(GLIBC_2.0)[8]      |tcgetpgrp(GLIBC_2.0)[8]|
 21133	|--------------------------+--------------------------+-----------------------|
 21134	|confstr(GLIBC_2.0)[8]     |memcmp(GLIBC_2.0)[8]      |tcgetsid(GLIBC_2.0)[8] |
 21135	|--------------------------+--------------------------+-----------------------|
 21136	|connect(GLIBC_2.0)[7]     |memcpy(GLIBC_2.0)[8]      |tcsendbreak(GLIBC_2.0) |
 21137	|                          |                          |[8]                    |
 21138	|--------------------------+--------------------------+-----------------------|
 21139	|creat(GLIBC_2.0)[8]       |memmem(GLIBC_2.0)[5]      |tcsetattr(GLIBC_2.0)[8]|
 21140	|--------------------------+--------------------------+-----------------------|
 21141	|creat64(GLIBC_2.1)[4]     |memmove(GLIBC_2.1)[8]     |tcsetpgrp(GLIBC_2.1)[8]|
 21142	|--------------------------+--------------------------+-----------------------|
 21143	|ctermid(GLIBC_2.0)[8]     |memrchr(GLIBC_2.0)[5]     |telldir(GLIBC_2.0)[8]  |
 21144	|--------------------------+--------------------------+-----------------------|
 21145	|ctime(GLIBC_2.0)[8]       |memset(GLIBC_2.0)[8]      |tempnam(GLIBC_2.0)[8]  |
 21146	|--------------------------+--------------------------+-----------------------|
 21147	|ctime_r(GLIBC_2.0)[8]     |mkdir(GLIBC_2.0)[8]       |textdomain(GLIBC_2.0)  |
 21148	|                          |                          |[5]                    |
 21149	|--------------------------+--------------------------+-----------------------|
 21150	|cuserid(GLIBC_2.0)[8]     |mkfifo(GLIBC_2.0)[8]      |tfind(GLIBC_2.0)[8]    |
 21151	|--------------------------+--------------------------+-----------------------|
 21152	|daemon(GLIBC_2.0)[5]      |mkstemp(GLIBC_2.0)[8]     |time(GLIBC_2.0)[8]     |
 21153	|--------------------------+--------------------------+-----------------------|
 21154	|dcgettext(GLIBC_2.0)[5]   |mkstemp64(GLIBC_2.0)[4]   |times(GLIBC_2.0)[8]    |
 21155	|--------------------------+--------------------------+-----------------------|
 21156	|difftime(GLIBC_2.0)[8]    |mktemp(GLIBC_2.0)[8]      |tmpfile(GLIBC_2.0)[8]  |
 21157	|--------------------------+--------------------------+-----------------------|
 21158	|dirname(GLIBC_2.0)[8]     |mktime(GLIBC_2.0)[8]      |tmpfile64(GLIBC_2.0)[4]|
 21159	|--------------------------+--------------------------+-----------------------|
 21160	|div(GLIBC_2.0)[8]         |mlock(GLIBC_2.0)[8]       |tmpnam(GLIBC_2.0)[8]   |
 21161	|--------------------------+--------------------------+-----------------------|
 21162	|drand48(GLIBC_2.0)[8]     |mlockall(GLIBC_2.0)[8]    |toascii(GLIBC_2.0)[8]  |
 21163	|--------------------------+--------------------------+-----------------------|
 21164	|dup(GLIBC_2.0)[8]         |mmap(GLIBC_2.0)[8]        |tolower(GLIBC_2.0)[8]  |
 21165	|--------------------------+--------------------------+-----------------------|
 21166	|dup2(GLIBC_2.0)[8]        |mmap64(GLIBC_2.0)[4]      |toupper(GLIBC_2.0)[8]  |
 21167	|--------------------------+--------------------------+-----------------------|
 21168	|ecvt(GLIBC_2.0)[8]        |mprotect(GLIBC_2.0)[8]    |towctrans(GLIBC_2.0)[8]|
 21169	|--------------------------+--------------------------+-----------------------|
 21170	|endgrent(GLIBC_2.0)[8]    |mrand48(GLIBC_2.0)[8]     |towlower(GLIBC_2.0)[3] |
 21171	|--------------------------+--------------------------+-----------------------|
 21172	|endhostent(GLIBC_2.0)[7]  |msgctl(GLIBC_2.0)[8]      |towupper(GLIBC_2.0)[8] |
 21173	|--------------------------+--------------------------+-----------------------|
 21174	|endnetent(GLIBC_2.0)[7]   |msgget(GLIBC_2.0)[8]      |truncate(GLIBC_2.0)[8] |
 21175	|--------------------------+--------------------------+-----------------------|
 21176	|endprotoent(GLIBC_2.0)[7] |msgrcv(GLIBC_2.0)[8]      |truncate64(GLIBC_2.0)  |
 21177	|                          |                          |[4]                    |
 21178	|--------------------------+--------------------------+-----------------------|
 21179	|endpwent(GLIBC_2.0)[8]    |msgsnd(GLIBC_2.0)[8]      |tsearch(GLIBC_2.0)[8]  |
 21180	|--------------------------+--------------------------+-----------------------|
 21181	|endservent(GLIBC_2.0)[7]  |msync(GLIBC_2.0)[8]       |ttyname(GLIBC_2.0)[8]  |
 21182	|--------------------------+--------------------------+-----------------------|
 21183	|endutent(GLIBC_2.0)[8]    |munlock(GLIBC_2.0)[8]     |ttyname_r(GLIBC_2.0)[8]|
 21184	|--------------------------+--------------------------+-----------------------|
 21185	|endutxent(GLIBC_2.1)[8]   |munlockall(GLIBC_2.1)[8]  |twalk(GLIBC_2.1)[8]    |
 21186	|--------------------------+--------------------------+-----------------------|
 21187	|erand48(GLIBC_2.0)[8]     |munmap(GLIBC_2.0)[8]      |tzset(GLIBC_2.0)[8]    |
 21188	|--------------------------+--------------------------+-----------------------|
 21189	|err(GLIBC_2.0)[5]         |nanosleep(GLIBC_2.0)[8]   |ualarm(GLIBC_2.0)[8]   |
 21190	|--------------------------+--------------------------+-----------------------|
 21191	|error(GLIBC_2.0)[5]       |nftw(GLIBC_2.0)[8]        |ulimit(GLIBC_2.0)[8]   |
 21192	|--------------------------+--------------------------+-----------------------|
 21193	|errx(GLIBC_2.0)[5]        |nftw64(GLIBC_2.0)[4]      |umask(GLIBC_2.0)[8]    |
 21194	|--------------------------+--------------------------+-----------------------|
 21195	|execl(GLIBC_2.0)[8]       |nice(GLIBC_2.0)[8]        |uname(GLIBC_2.0)[8]    |
 21196	|--------------------------+--------------------------+-----------------------|
 21197	|execle(GLIBC_2.0)[8]      |nl_langinfo(GLIBC_2.0)[8] |ungetc(GLIBC_2.0)[8]   |
 21198	|--------------------------+--------------------------+-----------------------|
 21199	|execlp(GLIBC_2.0)[8]      |nrand48(GLIBC_2.0)[8]     |ungetwc(GLIBC_2.0)[3]  |
 21200	|--------------------------+--------------------------+-----------------------|
 21201	|execv(GLIBC_2.0)[8]       |ntohl(GLIBC_2.0)[7]       |unlink(GLIBC_2.0)[8]   |
 21202	|--------------------------+--------------------------+-----------------------|
 21203	|execve(GLIBC_2.0)[8]      |ntohs(GLIBC_2.0)[7]       |unlockpt(GLIBC_2.0)[8] |
 21204	|--------------------------+--------------------------+-----------------------|
 21205	|execvp(GLIBC_2.0)[8]      |obstack_free(GLIBC_2.0)[5]|usleep(GLIBC_2.0)[8]   |
 21206	|--------------------------+--------------------------+-----------------------|
 21207	|exit(GLIBC_2.0)[8]        |open(GLIBC_2.0)[8]        |utime(GLIBC_2.0)[8]    |
 21208	|--------------------------+--------------------------+-----------------------|
 21209	|fchdir(GLIBC_2.0)[8]      |open64(GLIBC_2.0)[4]      |utimes(GLIBC_2.0)[8]   |
 21210	|--------------------------+--------------------------+-----------------------|
 21211	|fchmod(GLIBC_2.0)[8]      |opendir(GLIBC_2.0)[8]     |vasprintf(GLIBC_2.0)[5]|
 21212	|--------------------------+--------------------------+-----------------------|
 21213	|fchown(GLIBC_2.0)[8]      |openlog(GLIBC_2.0)[8]     |vdprintf(GLIBC_2.0)[5] |
 21214	|--------------------------+--------------------------+-----------------------|
 21215	|fclose(GLIBC_2.1)[8]      |pathconf(GLIBC_2.1)[8]    |verrx(GLIBC_2.1)[5]    |
 21216	|--------------------------+--------------------------+-----------------------|
 21217	|fcntl(GLIBC_2.0)[8]       |pause(GLIBC_2.0)[8]       |vfork(GLIBC_2.0)[8]    |
 21218	|--------------------------+--------------------------+-----------------------|
 21219	|fcvt(GLIBC_2.0)[8]        |pclose(GLIBC_2.0)[8]      |vfprintf(GLIBC_2.0)[8] |
 21220	|--------------------------+--------------------------+-----------------------|
 21221	|fdatasync(GLIBC_2.0)[8]   |perror(GLIBC_2.0)[8]      |vfwprintf(GLIBC_2.0)[3]|
 21222	|--------------------------+--------------------------+-----------------------|
 21223	|fdetach(GLIBC_2.1)[8]     |pipe(GLIBC_2.1)[8]        |vfwscanf(GLIBC_2.1)[3] |
 21224	|--------------------------+--------------------------+-----------------------|
 21225	|fdopen(GLIBC_2.1)[8]      |poll(GLIBC_2.1)[8]        |vprintf(GLIBC_2.1)[8]  |
 21226	|--------------------------+--------------------------+-----------------------|
 21227	|feof(GLIBC_2.0)[8]        |popen(GLIBC_2.0)[8]       |vsnprintf(GLIBC_2.0)[8]|
 21228	|--------------------------+--------------------------+-----------------------|
 21229	|ferror(GLIBC_2.0)[8]      |posix_memalign(GLIBC_2.0) |vsprintf(GLIBC_2.0)[8] |
 21230	|                          |[6]                       |                       |
 21231	|--------------------------+--------------------------+-----------------------|
 21232	|fflush(GLIBC_2.0)[8]      |pread(GLIBC_2.0)[8]       |vswprintf(GLIBC_2.0)[3]|
 21233	|--------------------------+--------------------------+-----------------------|
 21234	|fflush_unlocked(GLIBC_2.0)|pread64(GLIBC_2.0)[4]     |vswscanf(GLIBC_2.0)[3] |
 21235	|[8]                       |                          |                       |
 21236	|--------------------------+--------------------------+-----------------------|
 21237	|ffs(GLIBC_2.0)[8]         |printf(GLIBC_2.0)[8]      |vwprintf(GLIBC_2.0)[3] |
 21238	|--------------------------+--------------------------+-----------------------|
 21239	|fgetc(GLIBC_2.0)[8]       |psignal(GLIBC_2.0)[5]     |vwscanf(GLIBC_2.0)[3]  |
 21240	|--------------------------+--------------------------+-----------------------|
 21241	|fgetpos(GLIBC_2.0)[8]     |ptsname(GLIBC_2.0)[8]     |wait(GLIBC_2.0)[8]     |
 21242	|--------------------------+--------------------------+-----------------------|
 21243	|fgetpos64(GLIBC_2.1)[4]   |putc(GLIBC_2.1)[8]        |wait3(GLIBC_2.1)[8]    |
 21244	|--------------------------+--------------------------+-----------------------|
 21245	|fgets(GLIBC_2.0)[8]       |putc_unlocked(GLIBC_2.0)  |wait4(GLIBC_2.0)[5]    |
 21246	|                          |[8]                       |                       |
 21247	|--------------------------+--------------------------+-----------------------|
 21248	|fgetwc(GLIBC_2.2)[8]      |putchar(GLIBC_2.2)[8]     |waitid(GLIBC_2.2)[8]   |
 21249	|--------------------------+--------------------------+-----------------------|
 21250	|fgetwc_unlocked(GLIBC_2.2)|putchar_unlocked          |waitpid(GLIBC_2.2)[8]  |
 21251	|[8]                       |(GLIBC_2.2)[8]            |                       |
 21252	|--------------------------+--------------------------+-----------------------|
 21253	|fgetws(GLIBC_2.2)[3]      |putenv(GLIBC_2.2)[8]      |warn(GLIBC_2.2)[5]     |
 21254	|--------------------------+--------------------------+-----------------------|
 21255	|fileno(GLIBC_2.0)[8]      |putmsg(GLIBC_2.0)[8]      |warnx(GLIBC_2.0)[5]    |
 21256	|--------------------------+--------------------------+-----------------------|
 21257	|flock(GLIBC_2.0)[5]       |puts(GLIBC_2.0)[8]        |wcpcpy(GLIBC_2.0)[5]   |
 21258	|--------------------------+--------------------------+-----------------------|
 21259	|flockfile(GLIBC_2.0)[8]   |pututxline(GLIBC_2.0)[8]  |wcpncpy(GLIBC_2.0)[5]  |
 21260	|--------------------------+--------------------------+-----------------------|
 21261	|fmtmsg(GLIBC_2.1)[8]      |putw(GLIBC_2.1)[8]        |wcrtomb(GLIBC_2.1)[8]  |
 21262	|--------------------------+--------------------------+-----------------------|
 21263	|fnmatch(GLIBC_2.2.3)[8]   |putwc(GLIBC_2.2.3)[3]     |wcscasecmp(GLIBC_2.2.3)|
 21264	|                          |                          |[5]                    |
 21265	|--------------------------+--------------------------+-----------------------|
 21266	|fopen(GLIBC_2.1)[8]       |putwchar(GLIBC_2.1)[3]    |wcscat(GLIBC_2.1)[8]   |
 21267	|--------------------------+--------------------------+-----------------------|
 21268	|fopen64(GLIBC_2.1)[4]     |pwrite(GLIBC_2.1)[8]      |wcschr(GLIBC_2.1)[8]   |
 21269	|--------------------------+--------------------------+-----------------------|
 21270	|fork(GLIBC_2.0)[8]        |pwrite64(GLIBC_2.0)[4]    |wcscmp(GLIBC_2.0)[8]   |
 21271	|--------------------------+--------------------------+-----------------------|
 21272	|fpathconf(GLIBC_2.0)[8]   |qsort(GLIBC_2.0)[8]       |wcscoll(GLIBC_2.0)[8]  |
 21273	|--------------------------+--------------------------+-----------------------|
 21274	|fprintf(GLIBC_2.0)[8]     |raise(GLIBC_2.0)[8]       |wcscpy(GLIBC_2.0)[8]   |
 21275	|--------------------------+--------------------------+-----------------------|
 21276	|fputc(GLIBC_2.0)[8]       |rand(GLIBC_2.0)[8]        |wcscspn(GLIBC_2.0)[8]  |
 21277	|--------------------------+--------------------------+-----------------------|
 21278	|fputs(GLIBC_2.0)[8]       |rand_r(GLIBC_2.0)[8]      |wcsdup(GLIBC_2.0)[5]   |
 21279	|--------------------------+--------------------------+-----------------------|
 21280	|fputwc(GLIBC_2.2)[3]      |random(GLIBC_2.2)[8]      |wcsftime(GLIBC_2.2)[3] |
 21281	|--------------------------+--------------------------+-----------------------|
 21282	|fputws(GLIBC_2.2)[3]      |random_r(GLIBC_2.2)[5]    |wcslen(GLIBC_2.2)[8]   |
 21283	|--------------------------+--------------------------+-----------------------|
 21284	|fread(GLIBC_2.0)[8]       |re_comp(GLIBC_2.0)[8]     |wcsncasecmp(GLIBC_2.0) |
 21285	|                          |                          |[5]                    |
 21286	|--------------------------+--------------------------+-----------------------|
 21287	|free(GLIBC_2.0)[8]        |re_exec(GLIBC_2.0)[8]     |wcsncat(GLIBC_2.0)[8]  |
 21288	|--------------------------+--------------------------+-----------------------|
 21289	|freopen(GLIBC_2.0)[8]     |read(GLIBC_2.0)[8]        |wcsncmp(GLIBC_2.0)[8]  |
 21290	|--------------------------+--------------------------+-----------------------|
 21291	|freopen64(GLIBC_2.1)[4]   |readdir(GLIBC_2.1)[8]     |wcsncpy(GLIBC_2.1)[8]  |
 21292	|--------------------------+--------------------------+-----------------------|
 21293	|fscanf(GLIBC_2.0)[8]      |readdir64(GLIBC_2.0)[4]   |wcsnlen(GLIBC_2.0)[5]  |
 21294	|--------------------------+--------------------------+-----------------------|
 21295	|fseek(GLIBC_2.0)[8]       |readlink(GLIBC_2.0)[8]    |wcsnrtombs(GLIBC_2.0)  |
 21296	|                          |                          |[5]                    |
 21297	|--------------------------+--------------------------+-----------------------|
 21298	|fseeko(GLIBC_2.1)[8]      |readv(GLIBC_2.1)[8]       |wcspbrk(GLIBC_2.1)[3]  |
 21299	|--------------------------+--------------------------+-----------------------|
 21300	|fseeko64(GLIBC_2.1)[4]    |realloc(GLIBC_2.1)[8]     |wcsrchr(GLIBC_2.1)[8]  |
 21301	|--------------------------+--------------------------+-----------------------|
 21302	|fsetpos(GLIBC_2.0)[8]     |realpath(GLIBC_2.0)[8]    |wcsrtombs(GLIBC_2.0)[8]|
 21303	|--------------------------+--------------------------+-----------------------|
 21304	|fsetpos64(GLIBC_2.1)[4]   |recv(GLIBC_2.1)[7]        |wcsspn(GLIBC_2.1)[8]   |
 21305	|--------------------------+--------------------------+-----------------------|
 21306	|fstatfs(GLIBC_2.0)[5]     |recvfrom(GLIBC_2.0)[7]    |wcsstr(GLIBC_2.0)[8]   |
 21307	|--------------------------+--------------------------+-----------------------|
 21308	|fstatfs64(GLIBC_2.1)[4]   |recvmsg(GLIBC_2.1)[7]     |wcstod(GLIBC_2.1)[8]   |
 21309	|--------------------------+--------------------------+-----------------------|
 21310	|fstatvfs(GLIBC_2.1)[8]    |regcomp(GLIBC_2.1)[8]     |wcstof(GLIBC_2.1)[3]   |
 21311	|--------------------------+--------------------------+-----------------------|
 21312	|fstatvfs64(GLIBC_2.1)[4]  |regerror(GLIBC_2.1)[8]    |wcstoimax(GLIBC_2.1)[3]|
 21313	|--------------------------+--------------------------+-----------------------|
 21314	|fsync(GLIBC_2.0)[8]       |regexec(GLIBC_2.0)[8]     |wcstok(GLIBC_2.0)[8]   |
 21315	|--------------------------+--------------------------+-----------------------|
 21316	|ftell(GLIBC_2.0)[8]       |regfree(GLIBC_2.0)[8]     |wcstol(GLIBC_2.0)[8]   |
 21317	|--------------------------+--------------------------+-----------------------|
 21318	|ftello(GLIBC_2.1)[8]      |remove(GLIBC_2.1)[8]      |wcstold(GLIBC_2.1)[3]  |
 21319	|--------------------------+--------------------------+-----------------------|
 21320	|ftello64(GLIBC_2.1)[4]    |remque(GLIBC_2.1)[8]      |wcstoll(GLIBC_2.1)[3]  |
 21321	|--------------------------+--------------------------+-----------------------|
 21322	|ftime(GLIBC_2.0)[8]       |rename(GLIBC_2.0)[8]      |wcstombs(GLIBC_2.0)[8] |
 21323	|--------------------------+--------------------------+-----------------------|
 21324	|ftok(GLIBC_2.0)[8]        |rewind(GLIBC_2.0)[8]      |wcstoq(GLIBC_2.0)[5]   |
 21325	|--------------------------+--------------------------+-----------------------|
 21326	|ftruncate(GLIBC_2.0)[8]   |rewinddir(GLIBC_2.0)[8]   |wcstoul(GLIBC_2.0)[8]  |
 21327	|--------------------------+--------------------------+-----------------------|
 21328	|ftruncate64(GLIBC_2.1)[4] |rindex(GLIBC_2.1)[8]      |wcstoull(GLIBC_2.1)[3] |
 21329	|--------------------------+--------------------------+-----------------------|
 21330	|ftrylockfile(GLIBC_2.0)[8]|rmdir(GLIBC_2.0)[8]       |wcstoumax(GLIBC_2.0)[3]|
 21331	|--------------------------+--------------------------+-----------------------|
 21332	|ftw(GLIBC_2.0)[8]         |sbrk(GLIBC_2.0)[8]        |wcstouq(GLIBC_2.0)[5]  |
 21333	|--------------------------+--------------------------+-----------------------|
 21334	|ftw64(GLIBC_2.1)[4]       |scanf(GLIBC_2.1)[8]       |wcswcs(GLIBC_2.1)[8]   |
 21335	|--------------------------+--------------------------+-----------------------|
 21336	|funlockfile(GLIBC_2.0)[8] |sched_get_priority_max    |wcswidth(GLIBC_2.0)[8] |
 21337	|                          |(GLIBC_2.0)[8]            |                       |
 21338	|--------------------------+--------------------------+-----------------------|
 21339	|fwide(GLIBC_2.2)[3]       |sched_get_priority_min    |wcsxfrm(GLIBC_2.2)[8]  |
 21340	|                          |(GLIBC_2.2)[8]            |                       |
 21341	|--------------------------+--------------------------+-----------------------|
 21342	|fwprintf(GLIBC_2.2)[5]    |sched_getparam(GLIBC_2.2) |wctob(GLIBC_2.2)[8]    |
 21343	|                          |[8]                       |                       |
 21344	|--------------------------+--------------------------+-----------------------|
 21345	|fwrite(GLIBC_2.0)[8]      |sched_getscheduler        |wctomb(GLIBC_2.0)[8]   |
 21346	|                          |(GLIBC_2.0)[8]            |                       |
 21347	|--------------------------+--------------------------+-----------------------|
 21348	|fwscanf(GLIBC_2.2)[3]     |sched_rr_get_interval     |wctrans(GLIBC_2.2)[8]  |
 21349	|                          |(GLIBC_2.2)[8]            |                       |
 21350	|--------------------------+--------------------------+-----------------------|
 21351	|gcvt(GLIBC_2.0)[8]        |sched_setparam(GLIBC_2.0) |wctype(GLIBC_2.0)[8]   |
 21352	|                          |[8]                       |                       |
 21353	|--------------------------+--------------------------+-----------------------|
 21354	|getc(GLIBC_2.0)[8]        |sched_setscheduler        |wcwidth(GLIBC_2.0)[8]  |
 21355	|                          |(GLIBC_2.0)[8]            |                       |
 21356	|--------------------------+--------------------------+-----------------------|
 21357	|getc_unlocked(GLIBC_2.0)  |sched_yield(GLIBC_2.0)[8] |wmemchr(GLIBC_2.0)[8]  |
 21358	|[8]                       |                          |                       |
 21359	|--------------------------+--------------------------+-----------------------|
 21360	|getchar(GLIBC_2.0)[8]     |seed48(GLIBC_2.0)[8]      |wmemcmp(GLIBC_2.0)[8]  |
 21361	|--------------------------+--------------------------+-----------------------|
 21362	|getchar_unlocked          |seekdir(GLIBC_2.0)[8]     |wmemcpy(GLIBC_2.0)[8]  |
 21363	|(GLIBC_2.0)[8]            |                          |                       |
 21364	|--------------------------+--------------------------+-----------------------|
 21365	|getcontext(GLIBC_2.1)[8]  |select(GLIBC_2.1)[7]      |wmemmove(GLIBC_2.1)[8] |
 21366	|--------------------------+--------------------------+-----------------------|
 21367	|getcwd(GLIBC_2.0)[8]      |semctl(GLIBC_2.0)[8]      |wmemset(GLIBC_2.0)[8]  |
 21368	|--------------------------+--------------------------+-----------------------|
 21369	|getdate(GLIBC_2.1)[8]     |semget(GLIBC_2.1)[8]      |wordexp(GLIBC_2.1)[8]  |
 21370	|--------------------------+--------------------------+-----------------------|
 21371	|getegid(GLIBC_2.0)[8]     |semop(GLIBC_2.0)[8]       |wordfree(GLIBC_2.0)[8] |
 21372	|--------------------------+--------------------------+-----------------------|
 21373	|getenv(GLIBC_2.0)[8]      |send(GLIBC_2.0)[7]        |wprintf(GLIBC_2.0)[3]  |
 21374	|--------------------------+--------------------------+-----------------------|
 21375	|geteuid(GLIBC_2.0)[8]     |sendmsg(GLIBC_2.0)[7]     |write(GLIBC_2.0)[8]    |
 21376	|--------------------------+--------------------------+-----------------------|
 21377	|getgid(GLIBC_2.0)[8]      |sendto(GLIBC_2.0)[7]      |writev(GLIBC_2.0)[8]   |
 21378	|--------------------------+--------------------------+-----------------------|
 21379	|getgrent(GLIBC_2.0)[8]    |setbuf(GLIBC_2.0)[8]      |wscanf(GLIBC_2.0)[3]   |
 21380	|--------------------------+--------------------------+-----------------------|
 21381	|getgrgid(GLIBC_2.0)[8]    |setbuffer(GLIBC_2.0)[5]   |xdr_accepted_reply     |
 21382	|                          |                          |(GLIBC_2.0)[9]         |
 21383	|--------------------------+--------------------------+-----------------------|
 21384	|getgrnam(GLIBC_2.0)[8]    |setcontext(GLIBC_2.0)[8]  |xdr_array(GLIBC_2.0)[9]|
 21385	|--------------------------+--------------------------+-----------------------|
 21386	|getgroups(GLIBC_2.0)[8]   |setegid(GLIBC_2.0)[5]     |xdr_bool(GLIBC_2.0)[9] |
 21387	|--------------------------+--------------------------+-----------------------|
 21388	|gethostbyaddr(GLIBC_2.0)  |seteuid(GLIBC_2.0)[5]     |xdr_bytes(GLIBC_2.0)[9]|
 21389	|[7]                       |                          |                       |
 21390	|--------------------------+--------------------------+-----------------------|
 21391	|gethostbyname(GLIBC_2.0)  |setgid(GLIBC_2.0)[8]      |xdr_callhdr(GLIBC_2.0) |
 21392	|[5]                       |                          |[9]                    |
 21393	|--------------------------+--------------------------+-----------------------|
 21394	|gethostbyname_r           |setgrent(GLIBC_2.1.2)[8]  |xdr_callmsg            |
 21395	|(GLIBC_2.1.2)[5]          |                          |(GLIBC_2.1.2)[9]       |
 21396	|--------------------------+--------------------------+-----------------------|
 21397	|gethostid(GLIBC_2.0)[8]   |setgroups(GLIBC_2.0)[5]   |xdr_char(GLIBC_2.0)[9] |
 21398	|--------------------------+--------------------------+-----------------------|
 21399	|gethostname(GLIBC_2.0)[7] |sethostent(GLIBC_2.0)[7]  |xdr_double(GLIBC_2.0)  |
 21400	|                          |                          |[9]                    |
 21401	|--------------------------+--------------------------+-----------------------|
 21402	|getitimer(GLIBC_2.0)[8]   |sethostid(GLIBC_2.0)[5]   |xdr_enum(GLIBC_2.0)[9] |
 21403	|--------------------------+--------------------------+-----------------------|
 21404	|getloadavg(GLIBC_2.2)[5]  |sethostname(GLIBC_2.2)[5] |xdr_float(GLIBC_2.2)[9]|
 21405	|--------------------------+--------------------------+-----------------------|
 21406	|getlogin(GLIBC_2.0)[8]    |setitimer(GLIBC_2.0)[8]   |xdr_free(GLIBC_2.0)[9] |
 21407	|--------------------------+--------------------------+-----------------------|
 21408	|getmsg(GLIBC_2.1)[8]      |setlocale(GLIBC_2.1)[8]   |xdr_int(GLIBC_2.1)[9]  |
 21409	|--------------------------+--------------------------+-----------------------|
 21410	|getnetbyaddr(GLIBC_2.0)[7]|setlogmask(GLIBC_2.0)[8]  |xdr_long(GLIBC_2.0)[9] |
 21411	|--------------------------+--------------------------+-----------------------|
 21412	|getopt(GLIBC_2.0)[5]      |setmntent(GLIBC_2.0)[5]   |xdr_opaque(GLIBC_2.0)  |
 21413	|                          |                          |[9]                    |
 21414	|--------------------------+--------------------------+-----------------------|
 21415	|getopt_long(GLIBC_2.0)[5] |setnetent(GLIBC_2.0)[7]   |xdr_opaque_auth        |
 21416	|                          |                          |(GLIBC_2.0)[9]         |
 21417	|--------------------------+--------------------------+-----------------------|
 21418	|getopt_long_only          |setpgid(GLIBC_2.0)[8]     |xdr_pointer(GLIBC_2.0) |
 21419	|(GLIBC_2.0)[5]            |                          |[9]                    |
 21420	|--------------------------+--------------------------+-----------------------|
 21421	|getpagesize(GLIBC_2.0)[8] |setpgrp(GLIBC_2.0)[8]     |xdr_reference          |
 21422	|                          |                          |(GLIBC_2.0)[9]         |
 21423	|--------------------------+--------------------------+-----------------------|
 21424	|getpeername(GLIBC_2.0)[7] |setpriority(GLIBC_2.0)[8] |xdr_rejected_reply     |
 21425	|                          |                          |(GLIBC_2.0)[9]         |
 21426	|--------------------------+--------------------------+-----------------------|
 21427	|getpgid(GLIBC_2.0)[8]     |setprotoent(GLIBC_2.0)[7] |xdr_replymsg(GLIBC_2.0)|
 21428	|                          |                          |[9]                    |
 21429	|--------------------------+--------------------------+-----------------------|
 21430	|getpgrp(GLIBC_2.0)[8]     |setpwent(GLIBC_2.0)[8]    |xdr_short(GLIBC_2.0)[9]|
 21431	|--------------------------+--------------------------+-----------------------|
 21432	|getpid(GLIBC_2.0)[8]      |setregid(GLIBC_2.0)[8]    |xdr_string(GLIBC_2.0)  |
 21433	|                          |                          |[9]                    |
 21434	|--------------------------+--------------------------+-----------------------|
 21435	|getppid(GLIBC_2.0)[8]     |setreuid(GLIBC_2.0)[8]    |xdr_u_char(GLIBC_2.0)  |
 21436	|                          |                          |[9]                    |
 21437	|--------------------------+--------------------------+-----------------------|
 21438	|getpriority(GLIBC_2.0)[8] |setrlimit(GLIBC_2.0)[8]   |xdr_u_long(GLIBC_2.0)  |
 21439	|                          |                          |[9]                    |
 21440	|--------------------------+--------------------------+-----------------------|
 21441	|getprotobyname(GLIBC_2.0) |setservent(GLIBC_2.0)[7]  |xdr_u_short(GLIBC_2.0) |
 21442	|[5]                       |                          |[9]                    |
 21443	|--------------------------+--------------------------+-----------------------|
 21444	|getprotobynumber          |setsid(GLIBC_2.0)[8]      |xdr_union(GLIBC_2.0)[9]|
 21445	|(GLIBC_2.0)[7]            |                          |                       |
 21446	|--------------------------+--------------------------+-----------------------|
 21447	|getprotoent(GLIBC_2.0)[5] |setsockopt(GLIBC_2.0)[7]  |xdr_vector(GLIBC_2.0)  |
 21448	|                          |                          |[9]                    |
 21449	|--------------------------+--------------------------+-----------------------|
 21450	|getpwent(GLIBC_2.0)[8]    |setstate(GLIBC_2.0)[8]    |xdr_void(GLIBC_2.0)[9] |
 21451	|--------------------------+--------------------------+-----------------------|
 21452	|getpwnam(GLIBC_2.0)[8]    |setuid(GLIBC_2.0)[8]      |xdr_wrapstring         |
 21453	|                          |                          |(GLIBC_2.0)[9]         |
 21454	|--------------------------+--------------------------+-----------------------|
 21455	|getpwuid(GLIBC_2.0)[8]    |setutent(GLIBC_2.0)[5]    |xdrmem_create          |
 21456	|                          |                          |(GLIBC_2.0)[9]         |
 21457	|--------------------------+--------------------------+-----------------------|
 21458	|getpwuid_r(GLIBC_2.0)[8]  |setutxent(GLIBC_2.0)[8]   |xdrrec_create          |
 21459	|                          |                          |(GLIBC_2.0)[9]         |
 21460	|--------------------------+--------------------------+-----------------------|
 21461	|getrlimit(GLIBC_2.2)[8]   |setvbuf(GLIBC_2.2)[8]     |xdrrec_eof(GLIBC_2.2)  |
 21462	|                          |                          |[9]                    |
 21463	|--------------------------+--------------------------+-----------------------|
 21464	|getrlimit64(GLIBC_2.1)[4] |shmat(GLIBC_2.1)[8]       |                       |
 21465	|--------------------------+--------------------------+-----------------------|
 21466	|getrusage(GLIBC_2.0)[8]   |shmctl(GLIBC_2.0)[8]      |                       |
 21467	+-----------------------------------------------------------------------------+
 21468	
 21469	Table A-17. libc Data Interfaces
 21470	
 21471	+--------------------------------------+
 21472	|__daylight[5]|__timezone[5]|h_errno[7]|
 21473	|-------------+-------------+----------|
 21474	|__environ[5] |__tzname[5]  |          |
 21475	+--------------------------------------+
 21476	-------------------------------------------------------------------------------
 21477	
 21478	libpthread
 21479	
 21480	The behaviour of the interfaces in this library is specified by the following
 21481	Standards.
 21482	
 21483	Linux Standard Base                                                            
 21484	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 21485	(ISBN: 1-85912-181-0, C606)                                                    
 21486	
 21487	Table A-18. libpthread Function Interfaces
 21488	
 21489	+---------------------------------------------------------------------------------------+
 21490	|pthread_attr_destroy        |pthread_condattr_init       |pthread_rwlock_tryrdlock     |
 21491	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |
 21492	|----------------------------+----------------------------+-----------------------------|
 21493	|pthread_attr_getdetachstate |pthread_create(GLIBC_2.0)   |pthread_rwlock_trywrlock     |
 21494	|(GLIBC_2.0)[14]             |[14]                        |(GLIBC_2.0)[14]              |
 21495	|----------------------------+----------------------------+-----------------------------|
 21496	|pthread_attr_getguardsize   |pthread_detach(GLIBC_2.1)   |pthread_rwlock_unlock        |
 21497	|(GLIBC_2.1)[14]             |[14]                        |(GLIBC_2.1)[14]              |
 21498	|----------------------------+----------------------------+-----------------------------|
 21499	|pthread_attr_getinheritsched|pthread_equal(GLIBC_2.0)[14]|pthread_rwlock_wrlock        |
 21500	|(GLIBC_2.0)[14]             |                            |(GLIBC_2.0)[14]              |
 21501	|----------------------------+----------------------------+-----------------------------|
 21502	|pthread_attr_getschedparam  |pthread_exit(GLIBC_2.0)[14] |pthread_rwlockattr_destroy   |
 21503	|(GLIBC_2.0)[14]             |                            |(GLIBC_2.0)[14]              |
 21504	|----------------------------+----------------------------+-----------------------------|
 21505	|pthread_attr_getschedpolicy |pthread_getschedparam       |pthread_rwlockattr_getpshared|
 21506	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |
 21507	|----------------------------+----------------------------+-----------------------------|
 21508	|pthread_attr_getscope       |pthread_getspecific         |pthread_rwlockattr_init      |
 21509	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |
 21510	|----------------------------+----------------------------+-----------------------------|
 21511	|pthread_attr_getstackaddr   |pthread_join(GLIBC_2.1)[14] |pthread_rwlockattr_setpshared|
 21512	|(GLIBC_2.1)[14]             |                            |(GLIBC_2.1)[14]              |
 21513	|----------------------------+----------------------------+-----------------------------|
 21514	|pthread_attr_getstacksize   |pthread_key_create          |pthread_self(GLIBC_2.1)[14]  |
 21515	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]             |                             |
 21516	|----------------------------+----------------------------+-----------------------------|
 21517	|pthread_attr_init(GLIBC_2.1)|pthread_key_delete          |pthread_setcancelstate       |
 21518	|[14]                        |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |
 21519	|----------------------------+----------------------------+-----------------------------|
 21520	|pthread_attr_setdetachstate |pthread_kill(GLIBC_2.0)[14] |pthread_setcanceltype        |
 21521	|(GLIBC_2.0)[14]             |                            |(GLIBC_2.0)[14]              |
 21522	|----------------------------+----------------------------+-----------------------------|
 21523	|pthread_attr_setguardsize   |pthread_mutex_destroy       |pthread_setschedparam        |
 21524	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]              |
 21525	|----------------------------+----------------------------+-----------------------------|
 21526	|pthread_attr_setinheritsched|pthread_mutex_init          |pthread_setspecific          |
 21527	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]              |
 21528	|----------------------------+----------------------------+-----------------------------|
 21529	|pthread_attr_setschedparam  |pthread_mutex_lock          |pthread_sigmask(GLIBC_2.0)   |
 21530	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |[14]                         |
 21531	|----------------------------+----------------------------+-----------------------------|
 21532	|pthread_attr_setschedpolicy |pthread_mutex_trylock       |pthread_testcancel(GLIBC_2.0)|
 21533	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |[14]                         |
 21534	|----------------------------+----------------------------+-----------------------------|
 21535	|pthread_attr_setscope       |pthread_mutex_unlock        |sem_close(GLIBC_2.0)[14]     |
 21536	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |                             |
 21537	|----------------------------+----------------------------+-----------------------------|
 21538	|pthread_attr_setstackaddr   |pthread_mutexattr_destroy   |sem_destroy(GLIBC_2.1)[14]   |
 21539	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]             |                             |
 21540	|----------------------------+----------------------------+-----------------------------|
 21541	|pthread_attr_setstacksize   |pthread_mutexattr_getpshared|sem_getvalue(GLIBC_2.1)[14]  |
 21542	|(GLIBC_2.1)[14]             |(GLIBC_2.1)[14]             |                             |
 21543	|----------------------------+----------------------------+-----------------------------|
 21544	|pthread_cancel(GLIBC_2.0)   |pthread_mutexattr_gettype   |sem_init(GLIBC_2.0)[14]      |
 21545	|[14]                        |(GLIBC_2.0)[14]             |                             |
 21546	|----------------------------+----------------------------+-----------------------------|
 21547	|pthread_cond_broadcast      |pthread_mutexattr_init      |sem_open(GLIBC_2.0)[14]      |
 21548	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |                             |
 21549	|----------------------------+----------------------------+-----------------------------|
 21550	|pthread_cond_destroy        |pthread_mutexattr_setpshared|sem_post(GLIBC_2.0)[14]      |
 21551	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |                             |
 21552	|----------------------------+----------------------------+-----------------------------|
 21553	|pthread_cond_init(GLIBC_2.0)|pthread_mutexattr_settype   |sem_timedwait(GLIBC_2.0)[13] |
 21554	|[14]                        |(GLIBC_2.0)[14]             |                             |
 21555	|----------------------------+----------------------------+-----------------------------|
 21556	|pthread_cond_signal         |pthread_once(GLIBC_2.0)[14] |sem_trywait(GLIBC_2.0)[14]   |
 21557	|(GLIBC_2.0)[14]             |                            |                             |
 21558	|----------------------------+----------------------------+-----------------------------|
 21559	|pthread_cond_timedwait      |pthread_rwlock_destroy      |sem_unlink(GLIBC_2.0)[14]    |
 21560	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |                             |
 21561	|----------------------------+----------------------------+-----------------------------|
 21562	|pthread_cond_wait(GLIBC_2.0)|pthread_rwlock_init         |sem_wait(GLIBC_2.0)[14]      |
 21563	|[14]                        |(GLIBC_2.0)[14]             |                             |
 21564	|----------------------------+----------------------------+-----------------------------|
 21565	|pthread_condattr_destroy    |pthread_rwlock_rdlock       |                             |
 21566	|(GLIBC_2.0)[14]             |(GLIBC_2.0)[14]             |                             |
 21567	+---------------------------------------------------------------------------------------+
 21568	-------------------------------------------------------------------------------
 21569	
 21570	librt
 21571	
 21572	The behaviour of the interfaces in this library is specified by the following
 21573	Standards.
 21574	
 21575	Large File Support                                                             
 21576	CAE Specification, January 1997, System Interfaces and Headers (XSH), Issue 5  
 21577	(ISBN: 1-85912-181-0, C606)                                                    
 21578	
 21579	Table A-19. librt Function Interfaces
 21580	
 21581	+-----------------------------------------------------------------------------+
 21582	|aio_cancel(GLIBC_2.1) |aio_suspend(GLIBC_2.1)[19]  |lio_listio64(GLIBC_2.1)  |
 21583	|[19]                  |                            |[18]                     |
 21584	|----------------------+----------------------------+-------------------------|
 21585	|aio_cancel64          |aio_suspend64(GLIBC_2.1)[18]|shm_open(GLIBC_2.1)[19]  |
 21586	|(GLIBC_2.1)[18]       |                            |                         |
 21587	|----------------------+----------------------------+-------------------------|
 21588	|aio_error(GLIBC_2.1)  |aio_write(GLIBC_2.1)[19]    |shm_unlink(GLIBC_2.1)[19]|
 21589	|[19]                  |                            |                         |
 21590	|----------------------+----------------------------+-------------------------|
 21591	|aio_error64(GLIBC_2.1)|aio_write64(GLIBC_2.1)[18]  |timer_create(GLIBC_2.1)  |
 21592	|[18]                  |                            |[19]                     |
 21593	|----------------------+----------------------------+-------------------------|
 21594	|aio_fsync(GLIBC_2.1)  |clock_getcpuclockid         |timer_delete(GLIBC_2.1)  |
 21595	|[19]                  |(GLIBC_2.1)[19]             |[19]                     |
 21596	|----------------------+----------------------------+-------------------------|
 21597	|aio_fsync64(GLIBC_2.1)|clock_getres(GLIBC_2.1)[19] |timer_getoverrun         |
 21598	|[18]                  |                            |(GLIBC_2.1)[19]          |
 21599	|----------------------+----------------------------+-------------------------|
 21600	|aio_read(GLIBC_2.1)   |clock_gettime(GLIBC_2.1)[19]|timer_gettime(GLIBC_2.1) |
 21601	|[19]                  |                            |[19]                     |
 21602	|----------------------+----------------------------+-------------------------|
 21603	|aio_read64(GLIBC_2.1) |clock_nanosleep(GLIBC_2.1)  |timer_settime(GLIBC_2.1) |
 21604	|[18]                  |[19]                        |[19]                     |
 21605	|----------------------+----------------------------+-------------------------|
 21606	|aio_return(GLIBC_2.1) |clock_settime(GLIBC_2.1)[19]|                         |
 21607	|[19]                  |                            |                         |
 21608	|----------------------+----------------------------+-------------------------|
 21609	|aio_return64          |lio_listio(GLIBC_2.1)[19]   |                         |
 21610	|(GLIBC_2.1)[18]       |                            |                         |
 21611	+-----------------------------------------------------------------------------+
 21612	
 21613	Notes
 21614	
 21615	[1]  It seems to be possible, using existing Linux development tools, to write 
 21616	     an application in C++ which complies with this rule by linking statically 
 21617	     with libstdc++ and all other libraries containing C++. The following      
 21618	     command illustrates how this may be accomplished:                         
 21619	                                                                               
 21620	     g++ example.cc -Wl,-Bdynamic,-lc,-Bstatic                                 
 21621	                                                                               
 21622	[2]  Symbol versions are unique for each architecture. In release 1.0 of this  
 21623	     specification, the versions for only the IA32 architecture are specified. 
 21624	     Versions will be correctly specified on a per achitecture basis in future 
 21625	     releases of the specification.                                            
 21626	                                                                               
 21627	[3]  ISO/IEC 9899: 1999, Programming Languages --C                             
 21628	                                                                               
 21629	[4]  Large File Support                                                        
 21630	                                                                               
 21631	[5]  Linux Standard Base                                                       
 21632	                                                                               
 21633	[6]  IEEE Std POSIX.1-1996 [ISO/IEC 9945-1:1996]                               
 21634	                                                                               
 21635	[7]  CAE Specification, February 1997, Networking Services (XNS), Issue 5      
 21636	     (ISBN: 1-85912-165-9, C523)                                               
 21637	                                                                               
 21638	[8]  CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21639	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21640	                                                                               
 21641	[9]  System V Interface Definition, Issue 3                                    
 21642	                                                                               
 21643	[10] System V Interface Definition,Fourth Edition                              
 21644	                                                                               
 21645	[11] ISO/IEC 9899: 1999, Programming Languages --C                             
 21646	                                                                               
 21647	[12] CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21648	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21649	                                                                               
 21650	[13] Linux Standard Base                                                       
 21651	                                                                               
 21652	[14] CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21653	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21654	                                                                               
 21655	[15] Linux Standard Base                                                       
 21656	                                                                               
 21657	[16] CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21658	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21659	                                                                               
 21660	[17] CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21661	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21662	                                                                               
 21663	[18] Large File Support                                                        
 21664	                                                                               
 21665	[19] CAE Specification, January 1997, System Interfaces and Headers (XSH),     
 21666	     Issue 5 (ISBN: 1-85912-181-0, C606)                                       
 21667	                                                                               
 21668	[20] zlib 1.1.3 Manual                                                         
 21669	                                                                               
 21670	[21] CAE Specification, May 1996, X/Open Curses, Issue 4, Version 2 (ISBN:     
 21671	     1-85912-171-3, C610), plus Corrigendum U018                               
 21672	                                                                               
 21673	[22] Linux Standard Base                                                       
 21674	                                                                               
 21675	[23] X11R6.4 Xlib - C library                                                  
 21676	                                                                               
 21677	[24] Double Buffer Extension Library                                           
 21678	                                                                               
 21679	[25] X Display Power Management Signaling (DPMS) Extension, Library            
 21680	     Specification                                                             
 21681	                                                                               
 21682	[26] Security Extension Specification, Version 7.1                             
 21683	                                                                               
 21684	[27] X Nonrectangular Window Shape Extension Library Version 1.0               
 21685	                                                                               
 21686	[28] MIT-SHM--The MIT Shared Memory Extension                                  
 21687	                                                                               
 21688	[29] X Synchronization Extension Library                                       
 21689	                                                                               
 21690	[30] X11R6.4 X Session Management Library                                      
 21691	                                                                               
 21692	[31] X11R6.4 X Inter-Client Exchange (ICE) Protocol                            
 21693	                                                                               
 21694	[32] Linux Standard Base                                                       
 21695	                                                                               
 21696	[33] X11R.4 X Toolkit Intrinsics                                               
 21697	                                                                               
 21698	[34] OpenGL® Application Binary Interface for Linux                            
 21699	                                                                               
 21700	[35] Some versions of RPM may produce packages which contain extensions or     
 21701	     modifications to the RPM package format beyond what has been documented in
 21702	     the appendix of the Maximum RPM book. An LSB-conformant package must not  
 21703	     contain any of these extensions, in order to assure interoperability with 
 21704	     the largest number of versions of RPM and packaging systems which         
 21705	     understand how to import RPM format packages.                             
 21706	                                                                               
 21707	[36] The distribution itself may use a different packaging format for its own  
 21708	     packages, and of course it may use any available mechanism for installing 
 21709	     the LSB-conformant packages.                                              
 21710	                                                                               
 21711	[37] Linux Standard Base                                                       
 21712	                                                                               
 21713	[38] CAE Specification, January 1997, Commands and Utilities (XCU), Issue 5    
 21714	     (ISBN: 1-85912-191-8, C604)                                               
 21715	                                                                               
 21716	[39] This specification does not require, but is designed to allow, the        
 21717	     development of a system which runs boot scripts in parallel. Hence,       
 21718	     enforced-serialization of scripts is avoided unless it is explicitly      
 21719	     necessary.                                                                
 21720	
